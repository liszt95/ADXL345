
ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e6c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08009f28  08009f28  00019f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a370  0800a370  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a378  0800a378  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001e0  0800a560  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800a560  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5cc  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002520  00000000  00000000  0002f7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ce3  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c827  00000000  00000000  0004d163  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099137  00000000  00000000  0005998a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d34  00000000  00000000  000f2b3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009f10 	.word	0x08009f10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	08009f10 	.word	0x08009f10

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f8f1 	bl	800160c <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f849 	bl	80014cc <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f8e3 	bl	800160c <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8d9 	bl	800160c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86b 	bl	8001544 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f861 	bl	8001544 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_cfrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	4661      	mov	r1, ip
 8000496:	e7ff      	b.n	8000498 <__aeabi_cfcmpeq>

08000498 <__aeabi_cfcmpeq>:
 8000498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049a:	f000 f9a9 	bl	80007f0 <__lesf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d401      	bmi.n	80004a6 <__aeabi_cfcmpeq+0xe>
 80004a2:	2100      	movs	r1, #0
 80004a4:	42c8      	cmn	r0, r1
 80004a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004a8 <__aeabi_fcmpeq>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f92b 	bl	8000704 <__eqsf2>
 80004ae:	4240      	negs	r0, r0
 80004b0:	3001      	adds	r0, #1
 80004b2:	bd10      	pop	{r4, pc}

080004b4 <__aeabi_fcmplt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 f99b 	bl	80007f0 <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	db01      	blt.n	80004c2 <__aeabi_fcmplt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmple>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f991 	bl	80007f0 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dd01      	ble.n	80004d6 <__aeabi_fcmple+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmpgt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f939 	bl	8000754 <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dc01      	bgt.n	80004ea <__aeabi_fcmpgt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpge>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f92f 	bl	8000754 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	da01      	bge.n	80004fe <__aeabi_fcmpge+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_uldivmod>:
 8000504:	2b00      	cmp	r3, #0
 8000506:	d111      	bne.n	800052c <__aeabi_uldivmod+0x28>
 8000508:	2a00      	cmp	r2, #0
 800050a:	d10f      	bne.n	800052c <__aeabi_uldivmod+0x28>
 800050c:	2900      	cmp	r1, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_uldivmod+0xe>
 8000510:	2800      	cmp	r0, #0
 8000512:	d002      	beq.n	800051a <__aeabi_uldivmod+0x16>
 8000514:	2100      	movs	r1, #0
 8000516:	43c9      	mvns	r1, r1
 8000518:	1c08      	adds	r0, r1, #0
 800051a:	b407      	push	{r0, r1, r2}
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <__aeabi_uldivmod+0x24>)
 800051e:	a102      	add	r1, pc, #8	; (adr r1, 8000528 <__aeabi_uldivmod+0x24>)
 8000520:	1840      	adds	r0, r0, r1
 8000522:	9002      	str	r0, [sp, #8]
 8000524:	bd03      	pop	{r0, r1, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	fffffee9 	.word	0xfffffee9
 800052c:	b403      	push	{r0, r1}
 800052e:	4668      	mov	r0, sp
 8000530:	b501      	push	{r0, lr}
 8000532:	9802      	ldr	r0, [sp, #8]
 8000534:	f000 f824 	bl	8000580 <__udivmoddi4>
 8000538:	9b01      	ldr	r3, [sp, #4]
 800053a:	469e      	mov	lr, r3
 800053c:	b002      	add	sp, #8
 800053e:	bc0c      	pop	{r2, r3}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ff95 	bl	800047c <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 fe95 	bl	8002288 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb2a 	bl	8001bc0 <__aeabi_dsub>
 800056c:	f001 fe8c 	bl	8002288 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__udivmoddi4>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	b5c0      	push	{r6, r7, lr}
 800058a:	0004      	movs	r4, r0
 800058c:	b082      	sub	sp, #8
 800058e:	000d      	movs	r5, r1
 8000590:	4691      	mov	r9, r2
 8000592:	4698      	mov	r8, r3
 8000594:	428b      	cmp	r3, r1
 8000596:	d82f      	bhi.n	80005f8 <__udivmoddi4+0x78>
 8000598:	d02c      	beq.n	80005f4 <__udivmoddi4+0x74>
 800059a:	4641      	mov	r1, r8
 800059c:	4648      	mov	r0, r9
 800059e:	f002 f809 	bl	80025b4 <__clzdi2>
 80005a2:	0029      	movs	r1, r5
 80005a4:	0006      	movs	r6, r0
 80005a6:	0020      	movs	r0, r4
 80005a8:	f002 f804 	bl	80025b4 <__clzdi2>
 80005ac:	1a33      	subs	r3, r6, r0
 80005ae:	469c      	mov	ip, r3
 80005b0:	3b20      	subs	r3, #32
 80005b2:	469a      	mov	sl, r3
 80005b4:	d500      	bpl.n	80005b8 <__udivmoddi4+0x38>
 80005b6:	e076      	b.n	80006a6 <__udivmoddi4+0x126>
 80005b8:	464b      	mov	r3, r9
 80005ba:	4652      	mov	r2, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001f      	movs	r7, r3
 80005c0:	464b      	mov	r3, r9
 80005c2:	4662      	mov	r2, ip
 80005c4:	4093      	lsls	r3, r2
 80005c6:	001e      	movs	r6, r3
 80005c8:	42af      	cmp	r7, r5
 80005ca:	d828      	bhi.n	800061e <__udivmoddi4+0x9e>
 80005cc:	d025      	beq.n	800061a <__udivmoddi4+0x9a>
 80005ce:	4653      	mov	r3, sl
 80005d0:	1ba4      	subs	r4, r4, r6
 80005d2:	41bd      	sbcs	r5, r7
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da00      	bge.n	80005da <__udivmoddi4+0x5a>
 80005d8:	e07b      	b.n	80006d2 <__udivmoddi4+0x152>
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	9200      	str	r2, [sp, #0]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4652      	mov	r2, sl
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	4662      	mov	r2, ip
 80005ee:	4093      	lsls	r3, r2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	e018      	b.n	8000626 <__udivmoddi4+0xa6>
 80005f4:	4282      	cmp	r2, r0
 80005f6:	d9d0      	bls.n	800059a <__udivmoddi4+0x1a>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2300      	movs	r3, #0
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <__udivmoddi4+0x8a>
 8000606:	601c      	str	r4, [r3, #0]
 8000608:	605d      	str	r5, [r3, #4]
 800060a:	9800      	ldr	r0, [sp, #0]
 800060c:	9901      	ldr	r1, [sp, #4]
 800060e:	b002      	add	sp, #8
 8000610:	bc1c      	pop	{r2, r3, r4}
 8000612:	4690      	mov	r8, r2
 8000614:	4699      	mov	r9, r3
 8000616:	46a2      	mov	sl, r4
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	42a3      	cmp	r3, r4
 800061c:	d9d7      	bls.n	80005ce <__udivmoddi4+0x4e>
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	4663      	mov	r3, ip
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0e9      	beq.n	8000600 <__udivmoddi4+0x80>
 800062c:	07fb      	lsls	r3, r7, #31
 800062e:	4698      	mov	r8, r3
 8000630:	4641      	mov	r1, r8
 8000632:	0872      	lsrs	r2, r6, #1
 8000634:	430a      	orrs	r2, r1
 8000636:	087b      	lsrs	r3, r7, #1
 8000638:	4666      	mov	r6, ip
 800063a:	e00e      	b.n	800065a <__udivmoddi4+0xda>
 800063c:	42ab      	cmp	r3, r5
 800063e:	d101      	bne.n	8000644 <__udivmoddi4+0xc4>
 8000640:	42a2      	cmp	r2, r4
 8000642:	d80c      	bhi.n	800065e <__udivmoddi4+0xde>
 8000644:	1aa4      	subs	r4, r4, r2
 8000646:	419d      	sbcs	r5, r3
 8000648:	2001      	movs	r0, #1
 800064a:	1924      	adds	r4, r4, r4
 800064c:	416d      	adcs	r5, r5
 800064e:	2100      	movs	r1, #0
 8000650:	3e01      	subs	r6, #1
 8000652:	1824      	adds	r4, r4, r0
 8000654:	414d      	adcs	r5, r1
 8000656:	2e00      	cmp	r6, #0
 8000658:	d006      	beq.n	8000668 <__udivmoddi4+0xe8>
 800065a:	42ab      	cmp	r3, r5
 800065c:	d9ee      	bls.n	800063c <__udivmoddi4+0xbc>
 800065e:	3e01      	subs	r6, #1
 8000660:	1924      	adds	r4, r4, r4
 8000662:	416d      	adcs	r5, r5
 8000664:	2e00      	cmp	r6, #0
 8000666:	d1f8      	bne.n	800065a <__udivmoddi4+0xda>
 8000668:	9800      	ldr	r0, [sp, #0]
 800066a:	9901      	ldr	r1, [sp, #4]
 800066c:	4653      	mov	r3, sl
 800066e:	1900      	adds	r0, r0, r4
 8000670:	4169      	adcs	r1, r5
 8000672:	2b00      	cmp	r3, #0
 8000674:	db23      	blt.n	80006be <__udivmoddi4+0x13e>
 8000676:	002b      	movs	r3, r5
 8000678:	4652      	mov	r2, sl
 800067a:	40d3      	lsrs	r3, r2
 800067c:	002a      	movs	r2, r5
 800067e:	4664      	mov	r4, ip
 8000680:	40e2      	lsrs	r2, r4
 8000682:	001c      	movs	r4, r3
 8000684:	4653      	mov	r3, sl
 8000686:	0015      	movs	r5, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	db2d      	blt.n	80006e8 <__udivmoddi4+0x168>
 800068c:	0026      	movs	r6, r4
 800068e:	4657      	mov	r7, sl
 8000690:	40be      	lsls	r6, r7
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4667      	mov	r7, ip
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e7ac      	b.n	8000600 <__udivmoddi4+0x80>
 80006a6:	4662      	mov	r2, ip
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	464a      	mov	r2, r9
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	4661      	mov	r1, ip
 80006b2:	0013      	movs	r3, r2
 80006b4:	4642      	mov	r2, r8
 80006b6:	408a      	lsls	r2, r1
 80006b8:	0017      	movs	r7, r2
 80006ba:	431f      	orrs	r7, r3
 80006bc:	e780      	b.n	80005c0 <__udivmoddi4+0x40>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	4666      	mov	r6, ip
 80006c8:	409a      	lsls	r2, r3
 80006ca:	0023      	movs	r3, r4
 80006cc:	40f3      	lsrs	r3, r6
 80006ce:	4313      	orrs	r3, r2
 80006d0:	e7d4      	b.n	800067c <__udivmoddi4+0xfc>
 80006d2:	4662      	mov	r2, ip
 80006d4:	2320      	movs	r3, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	9100      	str	r1, [sp, #0]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	e780      	b.n	80005ea <__udivmoddi4+0x6a>
 80006e8:	2320      	movs	r3, #32
 80006ea:	4662      	mov	r2, ip
 80006ec:	0026      	movs	r6, r4
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	002f      	movs	r7, r5
 80006f4:	46b0      	mov	r8, r6
 80006f6:	4666      	mov	r6, ip
 80006f8:	40b7      	lsls	r7, r6
 80006fa:	4646      	mov	r6, r8
 80006fc:	003b      	movs	r3, r7
 80006fe:	4333      	orrs	r3, r6
 8000700:	e7c8      	b.n	8000694 <__udivmoddi4+0x114>
 8000702:	46c0      	nop			; (mov r8, r8)

08000704 <__eqsf2>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	0042      	lsls	r2, r0, #1
 8000708:	024e      	lsls	r6, r1, #9
 800070a:	004c      	lsls	r4, r1, #1
 800070c:	0245      	lsls	r5, r0, #9
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	0e12      	lsrs	r2, r2, #24
 8000712:	0fc3      	lsrs	r3, r0, #31
 8000714:	0a76      	lsrs	r6, r6, #9
 8000716:	0e24      	lsrs	r4, r4, #24
 8000718:	0fc9      	lsrs	r1, r1, #31
 800071a:	2aff      	cmp	r2, #255	; 0xff
 800071c:	d00f      	beq.n	800073e <__eqsf2+0x3a>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d011      	beq.n	8000746 <__eqsf2+0x42>
 8000722:	2001      	movs	r0, #1
 8000724:	42a2      	cmp	r2, r4
 8000726:	d000      	beq.n	800072a <__eqsf2+0x26>
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	42b5      	cmp	r5, r6
 800072c:	d1fc      	bne.n	8000728 <__eqsf2+0x24>
 800072e:	428b      	cmp	r3, r1
 8000730:	d00d      	beq.n	800074e <__eqsf2+0x4a>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d1f8      	bne.n	8000728 <__eqsf2+0x24>
 8000736:	0028      	movs	r0, r5
 8000738:	1e45      	subs	r5, r0, #1
 800073a:	41a8      	sbcs	r0, r5
 800073c:	e7f4      	b.n	8000728 <__eqsf2+0x24>
 800073e:	2001      	movs	r0, #1
 8000740:	2d00      	cmp	r5, #0
 8000742:	d1f1      	bne.n	8000728 <__eqsf2+0x24>
 8000744:	e7eb      	b.n	800071e <__eqsf2+0x1a>
 8000746:	2001      	movs	r0, #1
 8000748:	2e00      	cmp	r6, #0
 800074a:	d1ed      	bne.n	8000728 <__eqsf2+0x24>
 800074c:	e7e9      	b.n	8000722 <__eqsf2+0x1e>
 800074e:	2000      	movs	r0, #0
 8000750:	e7ea      	b.n	8000728 <__eqsf2+0x24>
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__gesf2>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	004a      	lsls	r2, r1, #1
 8000758:	024e      	lsls	r6, r1, #9
 800075a:	0245      	lsls	r5, r0, #9
 800075c:	0044      	lsls	r4, r0, #1
 800075e:	0a6d      	lsrs	r5, r5, #9
 8000760:	0e24      	lsrs	r4, r4, #24
 8000762:	0fc3      	lsrs	r3, r0, #31
 8000764:	0a76      	lsrs	r6, r6, #9
 8000766:	0e12      	lsrs	r2, r2, #24
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	2cff      	cmp	r4, #255	; 0xff
 800076c:	d015      	beq.n	800079a <__gesf2+0x46>
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d00e      	beq.n	8000790 <__gesf2+0x3c>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d115      	bne.n	80007a2 <__gesf2+0x4e>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d101      	bne.n	800077e <__gesf2+0x2a>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d01c      	beq.n	80007b8 <__gesf2+0x64>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d014      	beq.n	80007ac <__gesf2+0x58>
 8000782:	428b      	cmp	r3, r1
 8000784:	d027      	beq.n	80007d6 <__gesf2+0x82>
 8000786:	2002      	movs	r0, #2
 8000788:	3b01      	subs	r3, #1
 800078a:	4018      	ands	r0, r3
 800078c:	3801      	subs	r0, #1
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	2e00      	cmp	r6, #0
 8000792:	d0ee      	beq.n	8000772 <__gesf2+0x1e>
 8000794:	2002      	movs	r0, #2
 8000796:	4240      	negs	r0, r0
 8000798:	e7f9      	b.n	800078e <__gesf2+0x3a>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d1fa      	bne.n	8000794 <__gesf2+0x40>
 800079e:	2aff      	cmp	r2, #255	; 0xff
 80007a0:	d00e      	beq.n	80007c0 <__gesf2+0x6c>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d10e      	bne.n	80007c4 <__gesf2+0x70>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d0ed      	beq.n	8000786 <__gesf2+0x32>
 80007aa:	e00b      	b.n	80007c4 <__gesf2+0x70>
 80007ac:	2301      	movs	r3, #1
 80007ae:	3901      	subs	r1, #1
 80007b0:	4399      	bics	r1, r3
 80007b2:	0008      	movs	r0, r1
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ea      	b.n	800078e <__gesf2+0x3a>
 80007b8:	2000      	movs	r0, #0
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d0e7      	beq.n	800078e <__gesf2+0x3a>
 80007be:	e7e2      	b.n	8000786 <__gesf2+0x32>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d1e7      	bne.n	8000794 <__gesf2+0x40>
 80007c4:	428b      	cmp	r3, r1
 80007c6:	d1de      	bne.n	8000786 <__gesf2+0x32>
 80007c8:	4294      	cmp	r4, r2
 80007ca:	dd05      	ble.n	80007d8 <__gesf2+0x84>
 80007cc:	2102      	movs	r1, #2
 80007ce:	1e58      	subs	r0, r3, #1
 80007d0:	4008      	ands	r0, r1
 80007d2:	3801      	subs	r0, #1
 80007d4:	e7db      	b.n	800078e <__gesf2+0x3a>
 80007d6:	2400      	movs	r4, #0
 80007d8:	42a2      	cmp	r2, r4
 80007da:	dc04      	bgt.n	80007e6 <__gesf2+0x92>
 80007dc:	42b5      	cmp	r5, r6
 80007de:	d8d2      	bhi.n	8000786 <__gesf2+0x32>
 80007e0:	2000      	movs	r0, #0
 80007e2:	42b5      	cmp	r5, r6
 80007e4:	d2d3      	bcs.n	800078e <__gesf2+0x3a>
 80007e6:	1e58      	subs	r0, r3, #1
 80007e8:	2301      	movs	r3, #1
 80007ea:	4398      	bics	r0, r3
 80007ec:	3001      	adds	r0, #1
 80007ee:	e7ce      	b.n	800078e <__gesf2+0x3a>

080007f0 <__lesf2>:
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	0042      	lsls	r2, r0, #1
 80007f4:	0244      	lsls	r4, r0, #9
 80007f6:	024d      	lsls	r5, r1, #9
 80007f8:	0fc3      	lsrs	r3, r0, #31
 80007fa:	0048      	lsls	r0, r1, #1
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0e12      	lsrs	r2, r2, #24
 8000800:	0a6d      	lsrs	r5, r5, #9
 8000802:	0e00      	lsrs	r0, r0, #24
 8000804:	0fc9      	lsrs	r1, r1, #31
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d012      	beq.n	8000830 <__lesf2+0x40>
 800080a:	28ff      	cmp	r0, #255	; 0xff
 800080c:	d00c      	beq.n	8000828 <__lesf2+0x38>
 800080e:	2a00      	cmp	r2, #0
 8000810:	d112      	bne.n	8000838 <__lesf2+0x48>
 8000812:	2800      	cmp	r0, #0
 8000814:	d119      	bne.n	800084a <__lesf2+0x5a>
 8000816:	2d00      	cmp	r5, #0
 8000818:	d117      	bne.n	800084a <__lesf2+0x5a>
 800081a:	2c00      	cmp	r4, #0
 800081c:	d02b      	beq.n	8000876 <__lesf2+0x86>
 800081e:	2002      	movs	r0, #2
 8000820:	3b01      	subs	r3, #1
 8000822:	4018      	ands	r0, r3
 8000824:	3801      	subs	r0, #1
 8000826:	e026      	b.n	8000876 <__lesf2+0x86>
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0f0      	beq.n	800080e <__lesf2+0x1e>
 800082c:	2002      	movs	r0, #2
 800082e:	e022      	b.n	8000876 <__lesf2+0x86>
 8000830:	2c00      	cmp	r4, #0
 8000832:	d1fb      	bne.n	800082c <__lesf2+0x3c>
 8000834:	28ff      	cmp	r0, #255	; 0xff
 8000836:	d01f      	beq.n	8000878 <__lesf2+0x88>
 8000838:	2800      	cmp	r0, #0
 800083a:	d11f      	bne.n	800087c <__lesf2+0x8c>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d11d      	bne.n	800087c <__lesf2+0x8c>
 8000840:	2002      	movs	r0, #2
 8000842:	3b01      	subs	r3, #1
 8000844:	4018      	ands	r0, r3
 8000846:	3801      	subs	r0, #1
 8000848:	e015      	b.n	8000876 <__lesf2+0x86>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d00e      	beq.n	800086c <__lesf2+0x7c>
 800084e:	428b      	cmp	r3, r1
 8000850:	d1e5      	bne.n	800081e <__lesf2+0x2e>
 8000852:	2200      	movs	r2, #0
 8000854:	4290      	cmp	r0, r2
 8000856:	dc04      	bgt.n	8000862 <__lesf2+0x72>
 8000858:	42ac      	cmp	r4, r5
 800085a:	d8e0      	bhi.n	800081e <__lesf2+0x2e>
 800085c:	2000      	movs	r0, #0
 800085e:	42ac      	cmp	r4, r5
 8000860:	d209      	bcs.n	8000876 <__lesf2+0x86>
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	2301      	movs	r3, #1
 8000866:	4398      	bics	r0, r3
 8000868:	3001      	adds	r0, #1
 800086a:	e004      	b.n	8000876 <__lesf2+0x86>
 800086c:	2301      	movs	r3, #1
 800086e:	3901      	subs	r1, #1
 8000870:	4399      	bics	r1, r3
 8000872:	0008      	movs	r0, r1
 8000874:	3001      	adds	r0, #1
 8000876:	bd30      	pop	{r4, r5, pc}
 8000878:	2d00      	cmp	r5, #0
 800087a:	d1d7      	bne.n	800082c <__lesf2+0x3c>
 800087c:	428b      	cmp	r3, r1
 800087e:	d1ce      	bne.n	800081e <__lesf2+0x2e>
 8000880:	4282      	cmp	r2, r0
 8000882:	dde7      	ble.n	8000854 <__lesf2+0x64>
 8000884:	2102      	movs	r1, #2
 8000886:	1e58      	subs	r0, r3, #1
 8000888:	4008      	ands	r0, r1
 800088a:	3801      	subs	r0, #1
 800088c:	e7f3      	b.n	8000876 <__lesf2+0x86>
 800088e:	46c0      	nop			; (mov r8, r8)

08000890 <__aeabi_dadd>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	464f      	mov	r7, r9
 8000894:	4646      	mov	r6, r8
 8000896:	46d6      	mov	lr, sl
 8000898:	000c      	movs	r4, r1
 800089a:	0309      	lsls	r1, r1, #12
 800089c:	b5c0      	push	{r6, r7, lr}
 800089e:	0a49      	lsrs	r1, r1, #9
 80008a0:	0f47      	lsrs	r7, r0, #29
 80008a2:	005e      	lsls	r6, r3, #1
 80008a4:	4339      	orrs	r1, r7
 80008a6:	031f      	lsls	r7, r3, #12
 80008a8:	0fdb      	lsrs	r3, r3, #31
 80008aa:	469c      	mov	ip, r3
 80008ac:	0065      	lsls	r5, r4, #1
 80008ae:	0a7b      	lsrs	r3, r7, #9
 80008b0:	0f57      	lsrs	r7, r2, #29
 80008b2:	431f      	orrs	r7, r3
 80008b4:	0d6d      	lsrs	r5, r5, #21
 80008b6:	0fe4      	lsrs	r4, r4, #31
 80008b8:	0d76      	lsrs	r6, r6, #21
 80008ba:	46a1      	mov	r9, r4
 80008bc:	00c0      	lsls	r0, r0, #3
 80008be:	46b8      	mov	r8, r7
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	1bab      	subs	r3, r5, r6
 80008c4:	4564      	cmp	r4, ip
 80008c6:	d07b      	beq.n	80009c0 <__aeabi_dadd+0x130>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dd5f      	ble.n	800098c <__aeabi_dadd+0xfc>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x42>
 80008d0:	e0a4      	b.n	8000a1c <__aeabi_dadd+0x18c>
 80008d2:	003e      	movs	r6, r7
 80008d4:	4316      	orrs	r6, r2
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x4a>
 80008d8:	e112      	b.n	8000b00 <__aeabi_dadd+0x270>
 80008da:	1e5e      	subs	r6, r3, #1
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x52>
 80008e0:	e19e      	b.n	8000c20 <__aeabi_dadd+0x390>
 80008e2:	1a87      	subs	r7, r0, r2
 80008e4:	4643      	mov	r3, r8
 80008e6:	42b8      	cmp	r0, r7
 80008e8:	4180      	sbcs	r0, r0
 80008ea:	2501      	movs	r5, #1
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	4240      	negs	r0, r0
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	020b      	lsls	r3, r1, #8
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_dadd+0x68>
 80008f6:	e131      	b.n	8000b5c <__aeabi_dadd+0x2cc>
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	0a4e      	lsrs	r6, r1, #9
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x72>
 8000900:	e16e      	b.n	8000be0 <__aeabi_dadd+0x350>
 8000902:	0030      	movs	r0, r6
 8000904:	f001 fe38 	bl	8002578 <__clzsi2>
 8000908:	0003      	movs	r3, r0
 800090a:	3b08      	subs	r3, #8
 800090c:	2b1f      	cmp	r3, #31
 800090e:	dd00      	ble.n	8000912 <__aeabi_dadd+0x82>
 8000910:	e161      	b.n	8000bd6 <__aeabi_dadd+0x346>
 8000912:	2220      	movs	r2, #32
 8000914:	0039      	movs	r1, r7
 8000916:	1ad2      	subs	r2, r2, r3
 8000918:	409e      	lsls	r6, r3
 800091a:	40d1      	lsrs	r1, r2
 800091c:	409f      	lsls	r7, r3
 800091e:	430e      	orrs	r6, r1
 8000920:	429d      	cmp	r5, r3
 8000922:	dd00      	ble.n	8000926 <__aeabi_dadd+0x96>
 8000924:	e151      	b.n	8000bca <__aeabi_dadd+0x33a>
 8000926:	1b5d      	subs	r5, r3, r5
 8000928:	1c6b      	adds	r3, r5, #1
 800092a:	2b1f      	cmp	r3, #31
 800092c:	dd00      	ble.n	8000930 <__aeabi_dadd+0xa0>
 800092e:	e17c      	b.n	8000c2a <__aeabi_dadd+0x39a>
 8000930:	2120      	movs	r1, #32
 8000932:	1ac9      	subs	r1, r1, r3
 8000934:	003d      	movs	r5, r7
 8000936:	0030      	movs	r0, r6
 8000938:	408f      	lsls	r7, r1
 800093a:	4088      	lsls	r0, r1
 800093c:	40dd      	lsrs	r5, r3
 800093e:	1e79      	subs	r1, r7, #1
 8000940:	418f      	sbcs	r7, r1
 8000942:	0031      	movs	r1, r6
 8000944:	2207      	movs	r2, #7
 8000946:	4328      	orrs	r0, r5
 8000948:	40d9      	lsrs	r1, r3
 800094a:	2500      	movs	r5, #0
 800094c:	4307      	orrs	r7, r0
 800094e:	403a      	ands	r2, r7
 8000950:	2a00      	cmp	r2, #0
 8000952:	d009      	beq.n	8000968 <__aeabi_dadd+0xd8>
 8000954:	230f      	movs	r3, #15
 8000956:	403b      	ands	r3, r7
 8000958:	2b04      	cmp	r3, #4
 800095a:	d005      	beq.n	8000968 <__aeabi_dadd+0xd8>
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	42bb      	cmp	r3, r7
 8000960:	41bf      	sbcs	r7, r7
 8000962:	427f      	negs	r7, r7
 8000964:	19c9      	adds	r1, r1, r7
 8000966:	001f      	movs	r7, r3
 8000968:	020b      	lsls	r3, r1, #8
 800096a:	d400      	bmi.n	800096e <__aeabi_dadd+0xde>
 800096c:	e226      	b.n	8000dbc <__aeabi_dadd+0x52c>
 800096e:	1c6a      	adds	r2, r5, #1
 8000970:	4bc6      	ldr	r3, [pc, #792]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000972:	0555      	lsls	r5, r2, #21
 8000974:	0d6d      	lsrs	r5, r5, #21
 8000976:	429a      	cmp	r2, r3
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0xec>
 800097a:	e106      	b.n	8000b8a <__aeabi_dadd+0x2fa>
 800097c:	4ac4      	ldr	r2, [pc, #784]	; (8000c90 <__aeabi_dadd+0x400>)
 800097e:	08ff      	lsrs	r7, r7, #3
 8000980:	400a      	ands	r2, r1
 8000982:	0753      	lsls	r3, r2, #29
 8000984:	0252      	lsls	r2, r2, #9
 8000986:	433b      	orrs	r3, r7
 8000988:	0b12      	lsrs	r2, r2, #12
 800098a:	e08e      	b.n	8000aaa <__aeabi_dadd+0x21a>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x102>
 8000990:	e0b8      	b.n	8000b04 <__aeabi_dadd+0x274>
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	055b      	lsls	r3, r3, #21
 8000996:	0d5b      	lsrs	r3, r3, #21
 8000998:	2b01      	cmp	r3, #1
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x10e>
 800099c:	e130      	b.n	8000c00 <__aeabi_dadd+0x370>
 800099e:	1a87      	subs	r7, r0, r2
 80009a0:	4643      	mov	r3, r8
 80009a2:	42b8      	cmp	r0, r7
 80009a4:	41b6      	sbcs	r6, r6
 80009a6:	1acb      	subs	r3, r1, r3
 80009a8:	4276      	negs	r6, r6
 80009aa:	1b9e      	subs	r6, r3, r6
 80009ac:	0233      	lsls	r3, r6, #8
 80009ae:	d500      	bpl.n	80009b2 <__aeabi_dadd+0x122>
 80009b0:	e14c      	b.n	8000c4c <__aeabi_dadd+0x3bc>
 80009b2:	003b      	movs	r3, r7
 80009b4:	4333      	orrs	r3, r6
 80009b6:	d1a1      	bne.n	80008fc <__aeabi_dadd+0x6c>
 80009b8:	2200      	movs	r2, #0
 80009ba:	2400      	movs	r4, #0
 80009bc:	2500      	movs	r5, #0
 80009be:	e070      	b.n	8000aa2 <__aeabi_dadd+0x212>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_dadd+0x136>
 80009c4:	e0e5      	b.n	8000b92 <__aeabi_dadd+0x302>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x13c>
 80009ca:	e083      	b.n	8000ad4 <__aeabi_dadd+0x244>
 80009cc:	4eaf      	ldr	r6, [pc, #700]	; (8000c8c <__aeabi_dadd+0x3fc>)
 80009ce:	42b5      	cmp	r5, r6
 80009d0:	d060      	beq.n	8000a94 <__aeabi_dadd+0x204>
 80009d2:	2680      	movs	r6, #128	; 0x80
 80009d4:	0436      	lsls	r6, r6, #16
 80009d6:	4337      	orrs	r7, r6
 80009d8:	46b8      	mov	r8, r7
 80009da:	2b38      	cmp	r3, #56	; 0x38
 80009dc:	dc00      	bgt.n	80009e0 <__aeabi_dadd+0x150>
 80009de:	e13e      	b.n	8000c5e <__aeabi_dadd+0x3ce>
 80009e0:	4643      	mov	r3, r8
 80009e2:	4313      	orrs	r3, r2
 80009e4:	001f      	movs	r7, r3
 80009e6:	1e7a      	subs	r2, r7, #1
 80009e8:	4197      	sbcs	r7, r2
 80009ea:	183f      	adds	r7, r7, r0
 80009ec:	4287      	cmp	r7, r0
 80009ee:	4180      	sbcs	r0, r0
 80009f0:	4240      	negs	r0, r0
 80009f2:	1809      	adds	r1, r1, r0
 80009f4:	020b      	lsls	r3, r1, #8
 80009f6:	d400      	bmi.n	80009fa <__aeabi_dadd+0x16a>
 80009f8:	e0b0      	b.n	8000b5c <__aeabi_dadd+0x2cc>
 80009fa:	4ba4      	ldr	r3, [pc, #656]	; (8000c8c <__aeabi_dadd+0x3fc>)
 80009fc:	3501      	adds	r5, #1
 80009fe:	429d      	cmp	r5, r3
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0x174>
 8000a02:	e0c3      	b.n	8000b8c <__aeabi_dadd+0x2fc>
 8000a04:	4aa2      	ldr	r2, [pc, #648]	; (8000c90 <__aeabi_dadd+0x400>)
 8000a06:	087b      	lsrs	r3, r7, #1
 8000a08:	400a      	ands	r2, r1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	400f      	ands	r7, r1
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	0851      	lsrs	r1, r2, #1
 8000a12:	07d3      	lsls	r3, r2, #31
 8000a14:	2207      	movs	r2, #7
 8000a16:	431f      	orrs	r7, r3
 8000a18:	403a      	ands	r2, r7
 8000a1a:	e799      	b.n	8000950 <__aeabi_dadd+0xc0>
 8000a1c:	4e9b      	ldr	r6, [pc, #620]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000a1e:	42b5      	cmp	r5, r6
 8000a20:	d038      	beq.n	8000a94 <__aeabi_dadd+0x204>
 8000a22:	2680      	movs	r6, #128	; 0x80
 8000a24:	0436      	lsls	r6, r6, #16
 8000a26:	4337      	orrs	r7, r6
 8000a28:	46b8      	mov	r8, r7
 8000a2a:	2b38      	cmp	r3, #56	; 0x38
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x1a0>
 8000a2e:	e0dc      	b.n	8000bea <__aeabi_dadd+0x35a>
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	dc00      	bgt.n	8000a36 <__aeabi_dadd+0x1a6>
 8000a34:	e130      	b.n	8000c98 <__aeabi_dadd+0x408>
 8000a36:	001e      	movs	r6, r3
 8000a38:	4647      	mov	r7, r8
 8000a3a:	3e20      	subs	r6, #32
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	46bc      	mov	ip, r7
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d004      	beq.n	8000a4e <__aeabi_dadd+0x1be>
 8000a44:	2640      	movs	r6, #64	; 0x40
 8000a46:	1af3      	subs	r3, r6, r3
 8000a48:	4646      	mov	r6, r8
 8000a4a:	409e      	lsls	r6, r3
 8000a4c:	4332      	orrs	r2, r6
 8000a4e:	0017      	movs	r7, r2
 8000a50:	4663      	mov	r3, ip
 8000a52:	1e7a      	subs	r2, r7, #1
 8000a54:	4197      	sbcs	r7, r2
 8000a56:	431f      	orrs	r7, r3
 8000a58:	e0cc      	b.n	8000bf4 <__aeabi_dadd+0x364>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x1d0>
 8000a5e:	e204      	b.n	8000e6a <__aeabi_dadd+0x5da>
 8000a60:	4643      	mov	r3, r8
 8000a62:	4313      	orrs	r3, r2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x1d8>
 8000a66:	e159      	b.n	8000d1c <__aeabi_dadd+0x48c>
 8000a68:	074b      	lsls	r3, r1, #29
 8000a6a:	08c0      	lsrs	r0, r0, #3
 8000a6c:	4318      	orrs	r0, r3
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	08c9      	lsrs	r1, r1, #3
 8000a72:	031b      	lsls	r3, r3, #12
 8000a74:	4219      	tst	r1, r3
 8000a76:	d008      	beq.n	8000a8a <__aeabi_dadd+0x1fa>
 8000a78:	4645      	mov	r5, r8
 8000a7a:	08ed      	lsrs	r5, r5, #3
 8000a7c:	421d      	tst	r5, r3
 8000a7e:	d104      	bne.n	8000a8a <__aeabi_dadd+0x1fa>
 8000a80:	4643      	mov	r3, r8
 8000a82:	08d0      	lsrs	r0, r2, #3
 8000a84:	0759      	lsls	r1, r3, #29
 8000a86:	4308      	orrs	r0, r1
 8000a88:	0029      	movs	r1, r5
 8000a8a:	0f42      	lsrs	r2, r0, #29
 8000a8c:	00c9      	lsls	r1, r1, #3
 8000a8e:	4d7f      	ldr	r5, [pc, #508]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000a90:	4311      	orrs	r1, r2
 8000a92:	00c0      	lsls	r0, r0, #3
 8000a94:	074b      	lsls	r3, r1, #29
 8000a96:	08ca      	lsrs	r2, r1, #3
 8000a98:	497c      	ldr	r1, [pc, #496]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000a9a:	08c0      	lsrs	r0, r0, #3
 8000a9c:	4303      	orrs	r3, r0
 8000a9e:	428d      	cmp	r5, r1
 8000aa0:	d068      	beq.n	8000b74 <__aeabi_dadd+0x2e4>
 8000aa2:	0312      	lsls	r2, r2, #12
 8000aa4:	056d      	lsls	r5, r5, #21
 8000aa6:	0b12      	lsrs	r2, r2, #12
 8000aa8:	0d6d      	lsrs	r5, r5, #21
 8000aaa:	2100      	movs	r1, #0
 8000aac:	0312      	lsls	r2, r2, #12
 8000aae:	0018      	movs	r0, r3
 8000ab0:	0b13      	lsrs	r3, r2, #12
 8000ab2:	0d0a      	lsrs	r2, r1, #20
 8000ab4:	0512      	lsls	r2, r2, #20
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <__aeabi_dadd+0x404>)
 8000aba:	052d      	lsls	r5, r5, #20
 8000abc:	4013      	ands	r3, r2
 8000abe:	432b      	orrs	r3, r5
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	07e4      	lsls	r4, r4, #31
 8000ac4:	085b      	lsrs	r3, r3, #1
 8000ac6:	4323      	orrs	r3, r4
 8000ac8:	0019      	movs	r1, r3
 8000aca:	bc1c      	pop	{r2, r3, r4}
 8000acc:	4690      	mov	r8, r2
 8000ace:	4699      	mov	r9, r3
 8000ad0:	46a2      	mov	sl, r4
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad4:	003e      	movs	r6, r7
 8000ad6:	4316      	orrs	r6, r2
 8000ad8:	d012      	beq.n	8000b00 <__aeabi_dadd+0x270>
 8000ada:	1e5e      	subs	r6, r3, #1
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_dadd+0x252>
 8000ae0:	e100      	b.n	8000ce4 <__aeabi_dadd+0x454>
 8000ae2:	1887      	adds	r7, r0, r2
 8000ae4:	4287      	cmp	r7, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4441      	add	r1, r8
 8000aea:	4240      	negs	r0, r0
 8000aec:	1809      	adds	r1, r1, r0
 8000aee:	2501      	movs	r5, #1
 8000af0:	020b      	lsls	r3, r1, #8
 8000af2:	d533      	bpl.n	8000b5c <__aeabi_dadd+0x2cc>
 8000af4:	2502      	movs	r5, #2
 8000af6:	e785      	b.n	8000a04 <__aeabi_dadd+0x174>
 8000af8:	4664      	mov	r4, ip
 8000afa:	0033      	movs	r3, r6
 8000afc:	4641      	mov	r1, r8
 8000afe:	0010      	movs	r0, r2
 8000b00:	001d      	movs	r5, r3
 8000b02:	e7c7      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x27a>
 8000b08:	e0da      	b.n	8000cc0 <__aeabi_dadd+0x430>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	4304      	orrs	r4, r0
 8000b0e:	d0f3      	beq.n	8000af8 <__aeabi_dadd+0x268>
 8000b10:	1c5c      	adds	r4, r3, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x286>
 8000b14:	e19f      	b.n	8000e56 <__aeabi_dadd+0x5c6>
 8000b16:	4c5d      	ldr	r4, [pc, #372]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000b18:	42a6      	cmp	r6, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x28e>
 8000b1c:	e12f      	b.n	8000d7e <__aeabi_dadd+0x4ee>
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	2b38      	cmp	r3, #56	; 0x38
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dadd+0x296>
 8000b24:	e166      	b.n	8000df4 <__aeabi_dadd+0x564>
 8000b26:	2b1f      	cmp	r3, #31
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_dadd+0x29c>
 8000b2a:	e183      	b.n	8000e34 <__aeabi_dadd+0x5a4>
 8000b2c:	2420      	movs	r4, #32
 8000b2e:	0005      	movs	r5, r0
 8000b30:	1ae4      	subs	r4, r4, r3
 8000b32:	000f      	movs	r7, r1
 8000b34:	40dd      	lsrs	r5, r3
 8000b36:	40d9      	lsrs	r1, r3
 8000b38:	40a0      	lsls	r0, r4
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	40a7      	lsls	r7, r4
 8000b3e:	1a5b      	subs	r3, r3, r1
 8000b40:	1e44      	subs	r4, r0, #1
 8000b42:	41a0      	sbcs	r0, r4
 8000b44:	4698      	mov	r8, r3
 8000b46:	432f      	orrs	r7, r5
 8000b48:	4338      	orrs	r0, r7
 8000b4a:	1a17      	subs	r7, r2, r0
 8000b4c:	42ba      	cmp	r2, r7
 8000b4e:	4192      	sbcs	r2, r2
 8000b50:	4643      	mov	r3, r8
 8000b52:	4252      	negs	r2, r2
 8000b54:	1a99      	subs	r1, r3, r2
 8000b56:	4664      	mov	r4, ip
 8000b58:	0035      	movs	r5, r6
 8000b5a:	e6ca      	b.n	80008f2 <__aeabi_dadd+0x62>
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	403a      	ands	r2, r7
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d000      	beq.n	8000b66 <__aeabi_dadd+0x2d6>
 8000b64:	e6f6      	b.n	8000954 <__aeabi_dadd+0xc4>
 8000b66:	074b      	lsls	r3, r1, #29
 8000b68:	08ca      	lsrs	r2, r1, #3
 8000b6a:	4948      	ldr	r1, [pc, #288]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000b6c:	08ff      	lsrs	r7, r7, #3
 8000b6e:	433b      	orrs	r3, r7
 8000b70:	428d      	cmp	r5, r1
 8000b72:	d196      	bne.n	8000aa2 <__aeabi_dadd+0x212>
 8000b74:	0019      	movs	r1, r3
 8000b76:	4311      	orrs	r1, r2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x2ec>
 8000b7a:	e19e      	b.n	8000eba <__aeabi_dadd+0x62a>
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0309      	lsls	r1, r1, #12
 8000b80:	430a      	orrs	r2, r1
 8000b82:	0312      	lsls	r2, r2, #12
 8000b84:	0b12      	lsrs	r2, r2, #12
 8000b86:	4d41      	ldr	r5, [pc, #260]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000b88:	e78f      	b.n	8000aaa <__aeabi_dadd+0x21a>
 8000b8a:	0015      	movs	r5, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e78b      	b.n	8000aaa <__aeabi_dadd+0x21a>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dadd+0x308>
 8000b96:	e0c7      	b.n	8000d28 <__aeabi_dadd+0x498>
 8000b98:	1c6b      	adds	r3, r5, #1
 8000b9a:	055f      	lsls	r7, r3, #21
 8000b9c:	0d7f      	lsrs	r7, r7, #21
 8000b9e:	2f01      	cmp	r7, #1
 8000ba0:	dc00      	bgt.n	8000ba4 <__aeabi_dadd+0x314>
 8000ba2:	e0f1      	b.n	8000d88 <__aeabi_dadd+0x4f8>
 8000ba4:	4d39      	ldr	r5, [pc, #228]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000ba6:	42ab      	cmp	r3, r5
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x31c>
 8000baa:	e0b9      	b.n	8000d20 <__aeabi_dadd+0x490>
 8000bac:	1885      	adds	r5, r0, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	4285      	cmp	r5, r0
 8000bb2:	4189      	sbcs	r1, r1
 8000bb4:	4442      	add	r2, r8
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	1851      	adds	r1, r2, r1
 8000bba:	2207      	movs	r2, #7
 8000bbc:	07cf      	lsls	r7, r1, #31
 8000bbe:	086d      	lsrs	r5, r5, #1
 8000bc0:	432f      	orrs	r7, r5
 8000bc2:	0849      	lsrs	r1, r1, #1
 8000bc4:	403a      	ands	r2, r7
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	e6c2      	b.n	8000950 <__aeabi_dadd+0xc0>
 8000bca:	2207      	movs	r2, #7
 8000bcc:	4930      	ldr	r1, [pc, #192]	; (8000c90 <__aeabi_dadd+0x400>)
 8000bce:	1aed      	subs	r5, r5, r3
 8000bd0:	4031      	ands	r1, r6
 8000bd2:	403a      	ands	r2, r7
 8000bd4:	e6bc      	b.n	8000950 <__aeabi_dadd+0xc0>
 8000bd6:	003e      	movs	r6, r7
 8000bd8:	3828      	subs	r0, #40	; 0x28
 8000bda:	4086      	lsls	r6, r0
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e69f      	b.n	8000920 <__aeabi_dadd+0x90>
 8000be0:	0038      	movs	r0, r7
 8000be2:	f001 fcc9 	bl	8002578 <__clzsi2>
 8000be6:	3020      	adds	r0, #32
 8000be8:	e68e      	b.n	8000908 <__aeabi_dadd+0x78>
 8000bea:	4643      	mov	r3, r8
 8000bec:	4313      	orrs	r3, r2
 8000bee:	001f      	movs	r7, r3
 8000bf0:	1e7a      	subs	r2, r7, #1
 8000bf2:	4197      	sbcs	r7, r2
 8000bf4:	1bc7      	subs	r7, r0, r7
 8000bf6:	42b8      	cmp	r0, r7
 8000bf8:	4180      	sbcs	r0, r0
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	e678      	b.n	80008f2 <__aeabi_dadd+0x62>
 8000c00:	000e      	movs	r6, r1
 8000c02:	003b      	movs	r3, r7
 8000c04:	4306      	orrs	r6, r0
 8000c06:	4313      	orrs	r3, r2
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d161      	bne.n	8000cd0 <__aeabi_dadd+0x440>
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_dadd+0x382>
 8000c10:	e0f4      	b.n	8000dfc <__aeabi_dadd+0x56c>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x388>
 8000c16:	e11b      	b.n	8000e50 <__aeabi_dadd+0x5c0>
 8000c18:	4664      	mov	r4, ip
 8000c1a:	0039      	movs	r1, r7
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	e739      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000c20:	4f1a      	ldr	r7, [pc, #104]	; (8000c8c <__aeabi_dadd+0x3fc>)
 8000c22:	42bb      	cmp	r3, r7
 8000c24:	d07a      	beq.n	8000d1c <__aeabi_dadd+0x48c>
 8000c26:	0033      	movs	r3, r6
 8000c28:	e6ff      	b.n	8000a2a <__aeabi_dadd+0x19a>
 8000c2a:	0030      	movs	r0, r6
 8000c2c:	3d1f      	subs	r5, #31
 8000c2e:	40e8      	lsrs	r0, r5
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d003      	beq.n	8000c3c <__aeabi_dadd+0x3ac>
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	1acb      	subs	r3, r1, r3
 8000c38:	409e      	lsls	r6, r3
 8000c3a:	4337      	orrs	r7, r6
 8000c3c:	1e7b      	subs	r3, r7, #1
 8000c3e:	419f      	sbcs	r7, r3
 8000c40:	2207      	movs	r2, #7
 8000c42:	4307      	orrs	r7, r0
 8000c44:	403a      	ands	r2, r7
 8000c46:	2100      	movs	r1, #0
 8000c48:	2500      	movs	r5, #0
 8000c4a:	e789      	b.n	8000b60 <__aeabi_dadd+0x2d0>
 8000c4c:	1a17      	subs	r7, r2, r0
 8000c4e:	4643      	mov	r3, r8
 8000c50:	42ba      	cmp	r2, r7
 8000c52:	41b6      	sbcs	r6, r6
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	4276      	negs	r6, r6
 8000c58:	1b8e      	subs	r6, r1, r6
 8000c5a:	4664      	mov	r4, ip
 8000c5c:	e64e      	b.n	80008fc <__aeabi_dadd+0x6c>
 8000c5e:	2b1f      	cmp	r3, #31
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_dadd+0x3d4>
 8000c62:	e0ad      	b.n	8000dc0 <__aeabi_dadd+0x530>
 8000c64:	2620      	movs	r6, #32
 8000c66:	4647      	mov	r7, r8
 8000c68:	1af6      	subs	r6, r6, r3
 8000c6a:	40b7      	lsls	r7, r6
 8000c6c:	46b9      	mov	r9, r7
 8000c6e:	0017      	movs	r7, r2
 8000c70:	46b2      	mov	sl, r6
 8000c72:	40df      	lsrs	r7, r3
 8000c74:	464e      	mov	r6, r9
 8000c76:	433e      	orrs	r6, r7
 8000c78:	0037      	movs	r7, r6
 8000c7a:	4656      	mov	r6, sl
 8000c7c:	40b2      	lsls	r2, r6
 8000c7e:	1e56      	subs	r6, r2, #1
 8000c80:	41b2      	sbcs	r2, r6
 8000c82:	4317      	orrs	r7, r2
 8000c84:	4642      	mov	r2, r8
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	1889      	adds	r1, r1, r2
 8000c8a:	e6ae      	b.n	80009ea <__aeabi_dadd+0x15a>
 8000c8c:	000007ff 	.word	0x000007ff
 8000c90:	ff7fffff 	.word	0xff7fffff
 8000c94:	800fffff 	.word	0x800fffff
 8000c98:	2620      	movs	r6, #32
 8000c9a:	4647      	mov	r7, r8
 8000c9c:	1af6      	subs	r6, r6, r3
 8000c9e:	40b7      	lsls	r7, r6
 8000ca0:	46b9      	mov	r9, r7
 8000ca2:	0017      	movs	r7, r2
 8000ca4:	46b2      	mov	sl, r6
 8000ca6:	40df      	lsrs	r7, r3
 8000ca8:	464e      	mov	r6, r9
 8000caa:	433e      	orrs	r6, r7
 8000cac:	0037      	movs	r7, r6
 8000cae:	4656      	mov	r6, sl
 8000cb0:	40b2      	lsls	r2, r6
 8000cb2:	1e56      	subs	r6, r2, #1
 8000cb4:	41b2      	sbcs	r2, r6
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	40da      	lsrs	r2, r3
 8000cbc:	1a89      	subs	r1, r1, r2
 8000cbe:	e799      	b.n	8000bf4 <__aeabi_dadd+0x364>
 8000cc0:	4c7f      	ldr	r4, [pc, #508]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000cc2:	42a6      	cmp	r6, r4
 8000cc4:	d05b      	beq.n	8000d7e <__aeabi_dadd+0x4ee>
 8000cc6:	2480      	movs	r4, #128	; 0x80
 8000cc8:	0424      	lsls	r4, r4, #16
 8000cca:	425b      	negs	r3, r3
 8000ccc:	4321      	orrs	r1, r4
 8000cce:	e727      	b.n	8000b20 <__aeabi_dadd+0x290>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d10c      	bne.n	8000cee <__aeabi_dadd+0x45e>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x44a>
 8000cd8:	e0cb      	b.n	8000e72 <__aeabi_dadd+0x5e2>
 8000cda:	4664      	mov	r4, ip
 8000cdc:	0039      	movs	r1, r7
 8000cde:	0010      	movs	r0, r2
 8000ce0:	4d77      	ldr	r5, [pc, #476]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000ce2:	e6d7      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000ce4:	4f76      	ldr	r7, [pc, #472]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000ce6:	42bb      	cmp	r3, r7
 8000ce8:	d018      	beq.n	8000d1c <__aeabi_dadd+0x48c>
 8000cea:	0033      	movs	r3, r6
 8000cec:	e675      	b.n	80009da <__aeabi_dadd+0x14a>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d014      	beq.n	8000d1c <__aeabi_dadd+0x48c>
 8000cf2:	074b      	lsls	r3, r1, #29
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	4318      	orrs	r0, r3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	08c9      	lsrs	r1, r1, #3
 8000cfc:	031b      	lsls	r3, r3, #12
 8000cfe:	4219      	tst	r1, r3
 8000d00:	d007      	beq.n	8000d12 <__aeabi_dadd+0x482>
 8000d02:	08fc      	lsrs	r4, r7, #3
 8000d04:	421c      	tst	r4, r3
 8000d06:	d104      	bne.n	8000d12 <__aeabi_dadd+0x482>
 8000d08:	0779      	lsls	r1, r7, #29
 8000d0a:	08d0      	lsrs	r0, r2, #3
 8000d0c:	4308      	orrs	r0, r1
 8000d0e:	46e1      	mov	r9, ip
 8000d10:	0021      	movs	r1, r4
 8000d12:	464c      	mov	r4, r9
 8000d14:	0f42      	lsrs	r2, r0, #29
 8000d16:	00c9      	lsls	r1, r1, #3
 8000d18:	4311      	orrs	r1, r2
 8000d1a:	00c0      	lsls	r0, r0, #3
 8000d1c:	4d68      	ldr	r5, [pc, #416]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000d1e:	e6b9      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000d20:	001d      	movs	r5, r3
 8000d22:	2200      	movs	r2, #0
 8000d24:	2300      	movs	r3, #0
 8000d26:	e6c0      	b.n	8000aaa <__aeabi_dadd+0x21a>
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d15b      	bne.n	8000de4 <__aeabi_dadd+0x554>
 8000d2c:	000d      	movs	r5, r1
 8000d2e:	4305      	orrs	r5, r0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x4a4>
 8000d32:	e6e2      	b.n	8000afa <__aeabi_dadd+0x26a>
 8000d34:	1c5d      	adds	r5, r3, #1
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x4aa>
 8000d38:	e0b0      	b.n	8000e9c <__aeabi_dadd+0x60c>
 8000d3a:	4d61      	ldr	r5, [pc, #388]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000d3c:	42ae      	cmp	r6, r5
 8000d3e:	d01f      	beq.n	8000d80 <__aeabi_dadd+0x4f0>
 8000d40:	43db      	mvns	r3, r3
 8000d42:	2b38      	cmp	r3, #56	; 0x38
 8000d44:	dc71      	bgt.n	8000e2a <__aeabi_dadd+0x59a>
 8000d46:	2b1f      	cmp	r3, #31
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_dadd+0x4bc>
 8000d4a:	e096      	b.n	8000e7a <__aeabi_dadd+0x5ea>
 8000d4c:	2520      	movs	r5, #32
 8000d4e:	000f      	movs	r7, r1
 8000d50:	1aed      	subs	r5, r5, r3
 8000d52:	40af      	lsls	r7, r5
 8000d54:	46b9      	mov	r9, r7
 8000d56:	0007      	movs	r7, r0
 8000d58:	46aa      	mov	sl, r5
 8000d5a:	40df      	lsrs	r7, r3
 8000d5c:	464d      	mov	r5, r9
 8000d5e:	433d      	orrs	r5, r7
 8000d60:	002f      	movs	r7, r5
 8000d62:	4655      	mov	r5, sl
 8000d64:	40a8      	lsls	r0, r5
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	1e45      	subs	r5, r0, #1
 8000d6a:	41a8      	sbcs	r0, r5
 8000d6c:	4488      	add	r8, r1
 8000d6e:	4307      	orrs	r7, r0
 8000d70:	18bf      	adds	r7, r7, r2
 8000d72:	4297      	cmp	r7, r2
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	4251      	negs	r1, r2
 8000d78:	4441      	add	r1, r8
 8000d7a:	0035      	movs	r5, r6
 8000d7c:	e63a      	b.n	80009f4 <__aeabi_dadd+0x164>
 8000d7e:	4664      	mov	r4, ip
 8000d80:	0035      	movs	r5, r6
 8000d82:	4641      	mov	r1, r8
 8000d84:	0010      	movs	r0, r2
 8000d86:	e685      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000d88:	000b      	movs	r3, r1
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_dadd+0x502>
 8000d90:	e663      	b.n	8000a5a <__aeabi_dadd+0x1ca>
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f5      	beq.n	8000d82 <__aeabi_dadd+0x4f2>
 8000d96:	4643      	mov	r3, r8
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x50e>
 8000d9c:	e67a      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000d9e:	1887      	adds	r7, r0, r2
 8000da0:	4287      	cmp	r7, r0
 8000da2:	4180      	sbcs	r0, r0
 8000da4:	2207      	movs	r2, #7
 8000da6:	4441      	add	r1, r8
 8000da8:	4240      	negs	r0, r0
 8000daa:	1809      	adds	r1, r1, r0
 8000dac:	403a      	ands	r2, r7
 8000dae:	020b      	lsls	r3, r1, #8
 8000db0:	d400      	bmi.n	8000db4 <__aeabi_dadd+0x524>
 8000db2:	e6d5      	b.n	8000b60 <__aeabi_dadd+0x2d0>
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <__aeabi_dadd+0x634>)
 8000db6:	3501      	adds	r5, #1
 8000db8:	4019      	ands	r1, r3
 8000dba:	e5c9      	b.n	8000950 <__aeabi_dadd+0xc0>
 8000dbc:	0038      	movs	r0, r7
 8000dbe:	e669      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000dc0:	001e      	movs	r6, r3
 8000dc2:	4647      	mov	r7, r8
 8000dc4:	3e20      	subs	r6, #32
 8000dc6:	40f7      	lsrs	r7, r6
 8000dc8:	46bc      	mov	ip, r7
 8000dca:	2b20      	cmp	r3, #32
 8000dcc:	d004      	beq.n	8000dd8 <__aeabi_dadd+0x548>
 8000dce:	2640      	movs	r6, #64	; 0x40
 8000dd0:	1af3      	subs	r3, r6, r3
 8000dd2:	4646      	mov	r6, r8
 8000dd4:	409e      	lsls	r6, r3
 8000dd6:	4332      	orrs	r2, r6
 8000dd8:	0017      	movs	r7, r2
 8000dda:	4663      	mov	r3, ip
 8000ddc:	1e7a      	subs	r2, r7, #1
 8000dde:	4197      	sbcs	r7, r2
 8000de0:	431f      	orrs	r7, r3
 8000de2:	e602      	b.n	80009ea <__aeabi_dadd+0x15a>
 8000de4:	4d36      	ldr	r5, [pc, #216]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000de6:	42ae      	cmp	r6, r5
 8000de8:	d0ca      	beq.n	8000d80 <__aeabi_dadd+0x4f0>
 8000dea:	2580      	movs	r5, #128	; 0x80
 8000dec:	042d      	lsls	r5, r5, #16
 8000dee:	425b      	negs	r3, r3
 8000df0:	4329      	orrs	r1, r5
 8000df2:	e7a6      	b.n	8000d42 <__aeabi_dadd+0x4b2>
 8000df4:	4308      	orrs	r0, r1
 8000df6:	1e41      	subs	r1, r0, #1
 8000df8:	4188      	sbcs	r0, r1
 8000dfa:	e6a6      	b.n	8000b4a <__aeabi_dadd+0x2ba>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dadd+0x572>
 8000e00:	e648      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000e02:	1a87      	subs	r7, r0, r2
 8000e04:	4643      	mov	r3, r8
 8000e06:	42b8      	cmp	r0, r7
 8000e08:	41b6      	sbcs	r6, r6
 8000e0a:	1acb      	subs	r3, r1, r3
 8000e0c:	4276      	negs	r6, r6
 8000e0e:	1b9e      	subs	r6, r3, r6
 8000e10:	0233      	lsls	r3, r6, #8
 8000e12:	d54b      	bpl.n	8000eac <__aeabi_dadd+0x61c>
 8000e14:	1a17      	subs	r7, r2, r0
 8000e16:	4643      	mov	r3, r8
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a89      	subs	r1, r1, r2
 8000e22:	2207      	movs	r2, #7
 8000e24:	4664      	mov	r4, ip
 8000e26:	403a      	ands	r2, r7
 8000e28:	e592      	b.n	8000950 <__aeabi_dadd+0xc0>
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	000f      	movs	r7, r1
 8000e2e:	1e79      	subs	r1, r7, #1
 8000e30:	418f      	sbcs	r7, r1
 8000e32:	e79d      	b.n	8000d70 <__aeabi_dadd+0x4e0>
 8000e34:	001c      	movs	r4, r3
 8000e36:	000f      	movs	r7, r1
 8000e38:	3c20      	subs	r4, #32
 8000e3a:	40e7      	lsrs	r7, r4
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	d003      	beq.n	8000e48 <__aeabi_dadd+0x5b8>
 8000e40:	2440      	movs	r4, #64	; 0x40
 8000e42:	1ae3      	subs	r3, r4, r3
 8000e44:	4099      	lsls	r1, r3
 8000e46:	4308      	orrs	r0, r1
 8000e48:	1e41      	subs	r1, r0, #1
 8000e4a:	4188      	sbcs	r0, r1
 8000e4c:	4338      	orrs	r0, r7
 8000e4e:	e67c      	b.n	8000b4a <__aeabi_dadd+0x2ba>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2400      	movs	r4, #0
 8000e54:	e625      	b.n	8000aa2 <__aeabi_dadd+0x212>
 8000e56:	1a17      	subs	r7, r2, r0
 8000e58:	4643      	mov	r3, r8
 8000e5a:	42ba      	cmp	r2, r7
 8000e5c:	4192      	sbcs	r2, r2
 8000e5e:	1a59      	subs	r1, r3, r1
 8000e60:	4252      	negs	r2, r2
 8000e62:	1a89      	subs	r1, r1, r2
 8000e64:	4664      	mov	r4, ip
 8000e66:	0035      	movs	r5, r6
 8000e68:	e543      	b.n	80008f2 <__aeabi_dadd+0x62>
 8000e6a:	4641      	mov	r1, r8
 8000e6c:	0010      	movs	r0, r2
 8000e6e:	4d14      	ldr	r5, [pc, #80]	; (8000ec0 <__aeabi_dadd+0x630>)
 8000e70:	e610      	b.n	8000a94 <__aeabi_dadd+0x204>
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	2400      	movs	r4, #0
 8000e76:	0312      	lsls	r2, r2, #12
 8000e78:	e680      	b.n	8000b7c <__aeabi_dadd+0x2ec>
 8000e7a:	001d      	movs	r5, r3
 8000e7c:	000f      	movs	r7, r1
 8000e7e:	3d20      	subs	r5, #32
 8000e80:	40ef      	lsrs	r7, r5
 8000e82:	46bc      	mov	ip, r7
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d003      	beq.n	8000e90 <__aeabi_dadd+0x600>
 8000e88:	2540      	movs	r5, #64	; 0x40
 8000e8a:	1aeb      	subs	r3, r5, r3
 8000e8c:	4099      	lsls	r1, r3
 8000e8e:	4308      	orrs	r0, r1
 8000e90:	0007      	movs	r7, r0
 8000e92:	4663      	mov	r3, ip
 8000e94:	1e78      	subs	r0, r7, #1
 8000e96:	4187      	sbcs	r7, r0
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e769      	b.n	8000d70 <__aeabi_dadd+0x4e0>
 8000e9c:	1887      	adds	r7, r0, r2
 8000e9e:	4297      	cmp	r7, r2
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	4441      	add	r1, r8
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	18c9      	adds	r1, r1, r3
 8000ea8:	0035      	movs	r5, r6
 8000eaa:	e5a3      	b.n	80009f4 <__aeabi_dadd+0x164>
 8000eac:	003b      	movs	r3, r7
 8000eae:	4333      	orrs	r3, r6
 8000eb0:	d0ce      	beq.n	8000e50 <__aeabi_dadd+0x5c0>
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	0031      	movs	r1, r6
 8000eb6:	403a      	ands	r2, r7
 8000eb8:	e652      	b.n	8000b60 <__aeabi_dadd+0x2d0>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	e5f4      	b.n	8000aaa <__aeabi_dadd+0x21a>
 8000ec0:	000007ff 	.word	0x000007ff
 8000ec4:	ff7fffff 	.word	0xff7fffff

08000ec8 <__aeabi_ddiv>:
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	4657      	mov	r7, sl
 8000ecc:	46de      	mov	lr, fp
 8000ece:	464e      	mov	r6, r9
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	b5e0      	push	{r5, r6, r7, lr}
 8000ed4:	4683      	mov	fp, r0
 8000ed6:	0007      	movs	r7, r0
 8000ed8:	030e      	lsls	r6, r1, #12
 8000eda:	0048      	lsls	r0, r1, #1
 8000edc:	b085      	sub	sp, #20
 8000ede:	4692      	mov	sl, r2
 8000ee0:	001c      	movs	r4, r3
 8000ee2:	0b36      	lsrs	r6, r6, #12
 8000ee4:	0d40      	lsrs	r0, r0, #21
 8000ee6:	0fcd      	lsrs	r5, r1, #31
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x26>
 8000eec:	e09d      	b.n	800102a <__aeabi_ddiv+0x162>
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <__aeabi_ddiv+0x27c>)
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	d039      	beq.n	8000f68 <__aeabi_ddiv+0xa0>
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	00f6      	lsls	r6, r6, #3
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	431e      	orrs	r6, r3
 8000efc:	4a92      	ldr	r2, [pc, #584]	; (8001148 <__aeabi_ddiv+0x280>)
 8000efe:	0f7b      	lsrs	r3, r7, #29
 8000f00:	4333      	orrs	r3, r6
 8000f02:	4699      	mov	r9, r3
 8000f04:	4694      	mov	ip, r2
 8000f06:	0003      	movs	r3, r0
 8000f08:	4463      	add	r3, ip
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2600      	movs	r6, #0
 8000f10:	00ff      	lsls	r7, r7, #3
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	0323      	lsls	r3, r4, #12
 8000f16:	0b1b      	lsrs	r3, r3, #12
 8000f18:	4698      	mov	r8, r3
 8000f1a:	0063      	lsls	r3, r4, #1
 8000f1c:	0fe4      	lsrs	r4, r4, #31
 8000f1e:	4652      	mov	r2, sl
 8000f20:	0d5b      	lsrs	r3, r3, #21
 8000f22:	9401      	str	r4, [sp, #4]
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0x60>
 8000f26:	e0b3      	b.n	8001090 <__aeabi_ddiv+0x1c8>
 8000f28:	4986      	ldr	r1, [pc, #536]	; (8001144 <__aeabi_ddiv+0x27c>)
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x68>
 8000f2e:	e09e      	b.n	800106e <__aeabi_ddiv+0x1a6>
 8000f30:	4642      	mov	r2, r8
 8000f32:	00d1      	lsls	r1, r2, #3
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0412      	lsls	r2, r2, #16
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	4651      	mov	r1, sl
 8000f3c:	0f49      	lsrs	r1, r1, #29
 8000f3e:	4311      	orrs	r1, r2
 8000f40:	468b      	mov	fp, r1
 8000f42:	4981      	ldr	r1, [pc, #516]	; (8001148 <__aeabi_ddiv+0x280>)
 8000f44:	4652      	mov	r2, sl
 8000f46:	468c      	mov	ip, r1
 8000f48:	9900      	ldr	r1, [sp, #0]
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1acb      	subs	r3, r1, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	002b      	movs	r3, r5
 8000f56:	4063      	eors	r3, r4
 8000f58:	469a      	mov	sl, r3
 8000f5a:	2e0f      	cmp	r6, #15
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x98>
 8000f5e:	e105      	b.n	800116c <__aeabi_ddiv+0x2a4>
 8000f60:	4b7a      	ldr	r3, [pc, #488]	; (800114c <__aeabi_ddiv+0x284>)
 8000f62:	00b6      	lsls	r6, r6, #2
 8000f64:	599b      	ldr	r3, [r3, r6]
 8000f66:	469f      	mov	pc, r3
 8000f68:	465b      	mov	r3, fp
 8000f6a:	4333      	orrs	r3, r6
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_ddiv+0xaa>
 8000f70:	e0b8      	b.n	80010e4 <__aeabi_ddiv+0x21c>
 8000f72:	2302      	movs	r3, #2
 8000f74:	2608      	movs	r6, #8
 8000f76:	2700      	movs	r7, #0
 8000f78:	9000      	str	r0, [sp, #0]
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	e7ca      	b.n	8000f14 <__aeabi_ddiv+0x4c>
 8000f7e:	46cb      	mov	fp, r9
 8000f80:	003a      	movs	r2, r7
 8000f82:	9902      	ldr	r1, [sp, #8]
 8000f84:	9501      	str	r5, [sp, #4]
 8000f86:	9b01      	ldr	r3, [sp, #4]
 8000f88:	469a      	mov	sl, r3
 8000f8a:	2902      	cmp	r1, #2
 8000f8c:	d027      	beq.n	8000fde <__aeabi_ddiv+0x116>
 8000f8e:	2903      	cmp	r1, #3
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0xcc>
 8000f92:	e280      	b.n	8001496 <__aeabi_ddiv+0x5ce>
 8000f94:	2901      	cmp	r1, #1
 8000f96:	d044      	beq.n	8001022 <__aeabi_ddiv+0x15a>
 8000f98:	496d      	ldr	r1, [pc, #436]	; (8001150 <__aeabi_ddiv+0x288>)
 8000f9a:	9b00      	ldr	r3, [sp, #0]
 8000f9c:	468c      	mov	ip, r1
 8000f9e:	4463      	add	r3, ip
 8000fa0:	001c      	movs	r4, r3
 8000fa2:	2c00      	cmp	r4, #0
 8000fa4:	dd38      	ble.n	8001018 <__aeabi_ddiv+0x150>
 8000fa6:	0753      	lsls	r3, r2, #29
 8000fa8:	d000      	beq.n	8000fac <__aeabi_ddiv+0xe4>
 8000faa:	e213      	b.n	80013d4 <__aeabi_ddiv+0x50c>
 8000fac:	08d2      	lsrs	r2, r2, #3
 8000fae:	465b      	mov	r3, fp
 8000fb0:	01db      	lsls	r3, r3, #7
 8000fb2:	d509      	bpl.n	8000fc8 <__aeabi_ddiv+0x100>
 8000fb4:	4659      	mov	r1, fp
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <__aeabi_ddiv+0x28c>)
 8000fb8:	4019      	ands	r1, r3
 8000fba:	468b      	mov	fp, r1
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	00c9      	lsls	r1, r1, #3
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	9b00      	ldr	r3, [sp, #0]
 8000fc4:	4463      	add	r3, ip
 8000fc6:	001c      	movs	r4, r3
 8000fc8:	4b63      	ldr	r3, [pc, #396]	; (8001158 <__aeabi_ddiv+0x290>)
 8000fca:	429c      	cmp	r4, r3
 8000fcc:	dc07      	bgt.n	8000fde <__aeabi_ddiv+0x116>
 8000fce:	465b      	mov	r3, fp
 8000fd0:	0564      	lsls	r4, r4, #21
 8000fd2:	075f      	lsls	r7, r3, #29
 8000fd4:	025b      	lsls	r3, r3, #9
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	0b1b      	lsrs	r3, r3, #12
 8000fda:	0d62      	lsrs	r2, r4, #21
 8000fdc:	e002      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2700      	movs	r7, #0
 8000fe2:	4a58      	ldr	r2, [pc, #352]	; (8001144 <__aeabi_ddiv+0x27c>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	031b      	lsls	r3, r3, #12
 8000fe8:	0b1c      	lsrs	r4, r3, #12
 8000fea:	0d0b      	lsrs	r3, r1, #20
 8000fec:	051b      	lsls	r3, r3, #20
 8000fee:	4323      	orrs	r3, r4
 8000ff0:	0514      	lsls	r4, r2, #20
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <__aeabi_ddiv+0x294>)
 8000ff4:	0038      	movs	r0, r7
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	431c      	orrs	r4, r3
 8000ffa:	4653      	mov	r3, sl
 8000ffc:	0064      	lsls	r4, r4, #1
 8000ffe:	07db      	lsls	r3, r3, #31
 8001000:	0864      	lsrs	r4, r4, #1
 8001002:	431c      	orrs	r4, r3
 8001004:	0021      	movs	r1, r4
 8001006:	b005      	add	sp, #20
 8001008:	bc3c      	pop	{r2, r3, r4, r5}
 800100a:	4690      	mov	r8, r2
 800100c:	4699      	mov	r9, r3
 800100e:	46a2      	mov	sl, r4
 8001010:	46ab      	mov	fp, r5
 8001012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001014:	2201      	movs	r2, #1
 8001016:	4252      	negs	r2, r2
 8001018:	2301      	movs	r3, #1
 800101a:	1b1b      	subs	r3, r3, r4
 800101c:	2b38      	cmp	r3, #56	; 0x38
 800101e:	dc00      	bgt.n	8001022 <__aeabi_ddiv+0x15a>
 8001020:	e1ad      	b.n	800137e <__aeabi_ddiv+0x4b6>
 8001022:	2200      	movs	r2, #0
 8001024:	2300      	movs	r3, #0
 8001026:	2700      	movs	r7, #0
 8001028:	e7dc      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 800102a:	465b      	mov	r3, fp
 800102c:	4333      	orrs	r3, r6
 800102e:	4699      	mov	r9, r3
 8001030:	d05e      	beq.n	80010f0 <__aeabi_ddiv+0x228>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x170>
 8001036:	e18a      	b.n	800134e <__aeabi_ddiv+0x486>
 8001038:	0030      	movs	r0, r6
 800103a:	f001 fa9d 	bl	8002578 <__clzsi2>
 800103e:	0003      	movs	r3, r0
 8001040:	3b0b      	subs	r3, #11
 8001042:	2b1c      	cmp	r3, #28
 8001044:	dd00      	ble.n	8001048 <__aeabi_ddiv+0x180>
 8001046:	e17b      	b.n	8001340 <__aeabi_ddiv+0x478>
 8001048:	221d      	movs	r2, #29
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	465a      	mov	r2, fp
 800104e:	0001      	movs	r1, r0
 8001050:	40da      	lsrs	r2, r3
 8001052:	3908      	subs	r1, #8
 8001054:	408e      	lsls	r6, r1
 8001056:	0013      	movs	r3, r2
 8001058:	465f      	mov	r7, fp
 800105a:	4333      	orrs	r3, r6
 800105c:	4699      	mov	r9, r3
 800105e:	408f      	lsls	r7, r1
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <__aeabi_ddiv+0x298>)
 8001062:	2600      	movs	r6, #0
 8001064:	1a1b      	subs	r3, r3, r0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	e752      	b.n	8000f14 <__aeabi_ddiv+0x4c>
 800106e:	4641      	mov	r1, r8
 8001070:	4653      	mov	r3, sl
 8001072:	430b      	orrs	r3, r1
 8001074:	493b      	ldr	r1, [pc, #236]	; (8001164 <__aeabi_ddiv+0x29c>)
 8001076:	469b      	mov	fp, r3
 8001078:	468c      	mov	ip, r1
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	4463      	add	r3, ip
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	465b      	mov	r3, fp
 8001082:	2b00      	cmp	r3, #0
 8001084:	d13b      	bne.n	80010fe <__aeabi_ddiv+0x236>
 8001086:	2302      	movs	r3, #2
 8001088:	2200      	movs	r2, #0
 800108a:	431e      	orrs	r6, r3
 800108c:	2102      	movs	r1, #2
 800108e:	e761      	b.n	8000f54 <__aeabi_ddiv+0x8c>
 8001090:	4643      	mov	r3, r8
 8001092:	4313      	orrs	r3, r2
 8001094:	469b      	mov	fp, r3
 8001096:	d037      	beq.n	8001108 <__aeabi_ddiv+0x240>
 8001098:	4643      	mov	r3, r8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0x1d8>
 800109e:	e162      	b.n	8001366 <__aeabi_ddiv+0x49e>
 80010a0:	4640      	mov	r0, r8
 80010a2:	f001 fa69 	bl	8002578 <__clzsi2>
 80010a6:	0003      	movs	r3, r0
 80010a8:	3b0b      	subs	r3, #11
 80010aa:	2b1c      	cmp	r3, #28
 80010ac:	dd00      	ble.n	80010b0 <__aeabi_ddiv+0x1e8>
 80010ae:	e153      	b.n	8001358 <__aeabi_ddiv+0x490>
 80010b0:	0002      	movs	r2, r0
 80010b2:	4641      	mov	r1, r8
 80010b4:	3a08      	subs	r2, #8
 80010b6:	4091      	lsls	r1, r2
 80010b8:	4688      	mov	r8, r1
 80010ba:	211d      	movs	r1, #29
 80010bc:	1acb      	subs	r3, r1, r3
 80010be:	4651      	mov	r1, sl
 80010c0:	40d9      	lsrs	r1, r3
 80010c2:	000b      	movs	r3, r1
 80010c4:	4641      	mov	r1, r8
 80010c6:	430b      	orrs	r3, r1
 80010c8:	469b      	mov	fp, r3
 80010ca:	4653      	mov	r3, sl
 80010cc:	4093      	lsls	r3, r2
 80010ce:	001a      	movs	r2, r3
 80010d0:	9b00      	ldr	r3, [sp, #0]
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <__aeabi_ddiv+0x2a0>)
 80010d4:	469c      	mov	ip, r3
 80010d6:	4460      	add	r0, ip
 80010d8:	0003      	movs	r3, r0
 80010da:	468c      	mov	ip, r1
 80010dc:	4463      	add	r3, ip
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	e737      	b.n	8000f54 <__aeabi_ddiv+0x8c>
 80010e4:	2303      	movs	r3, #3
 80010e6:	46b1      	mov	r9, r6
 80010e8:	9000      	str	r0, [sp, #0]
 80010ea:	260c      	movs	r6, #12
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	e711      	b.n	8000f14 <__aeabi_ddiv+0x4c>
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	2604      	movs	r6, #4
 80010f8:	2700      	movs	r7, #0
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	e70a      	b.n	8000f14 <__aeabi_ddiv+0x4c>
 80010fe:	2303      	movs	r3, #3
 8001100:	46c3      	mov	fp, r8
 8001102:	431e      	orrs	r6, r3
 8001104:	2103      	movs	r1, #3
 8001106:	e725      	b.n	8000f54 <__aeabi_ddiv+0x8c>
 8001108:	3301      	adds	r3, #1
 800110a:	431e      	orrs	r6, r3
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	e720      	b.n	8000f54 <__aeabi_ddiv+0x8c>
 8001112:	2300      	movs	r3, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	2700      	movs	r7, #0
 800111a:	031b      	lsls	r3, r3, #12
 800111c:	4a09      	ldr	r2, [pc, #36]	; (8001144 <__aeabi_ddiv+0x27c>)
 800111e:	e761      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	4649      	mov	r1, r9
 8001124:	031b      	lsls	r3, r3, #12
 8001126:	4219      	tst	r1, r3
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x264>
 800112a:	e0e2      	b.n	80012f2 <__aeabi_ddiv+0x42a>
 800112c:	4659      	mov	r1, fp
 800112e:	4219      	tst	r1, r3
 8001130:	d000      	beq.n	8001134 <__aeabi_ddiv+0x26c>
 8001132:	e0de      	b.n	80012f2 <__aeabi_ddiv+0x42a>
 8001134:	430b      	orrs	r3, r1
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	0017      	movs	r7, r2
 800113a:	0b1b      	lsrs	r3, r3, #12
 800113c:	46a2      	mov	sl, r4
 800113e:	4a01      	ldr	r2, [pc, #4]	; (8001144 <__aeabi_ddiv+0x27c>)
 8001140:	e750      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff
 8001148:	fffffc01 	.word	0xfffffc01
 800114c:	08009f58 	.word	0x08009f58
 8001150:	000003ff 	.word	0x000003ff
 8001154:	feffffff 	.word	0xfeffffff
 8001158:	000007fe 	.word	0x000007fe
 800115c:	800fffff 	.word	0x800fffff
 8001160:	fffffc0d 	.word	0xfffffc0d
 8001164:	fffff801 	.word	0xfffff801
 8001168:	000003f3 	.word	0x000003f3
 800116c:	45d9      	cmp	r9, fp
 800116e:	d900      	bls.n	8001172 <__aeabi_ddiv+0x2aa>
 8001170:	e0cb      	b.n	800130a <__aeabi_ddiv+0x442>
 8001172:	d100      	bne.n	8001176 <__aeabi_ddiv+0x2ae>
 8001174:	e0c6      	b.n	8001304 <__aeabi_ddiv+0x43c>
 8001176:	003c      	movs	r4, r7
 8001178:	4648      	mov	r0, r9
 800117a:	2700      	movs	r7, #0
 800117c:	9b00      	ldr	r3, [sp, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	465b      	mov	r3, fp
 8001184:	0e16      	lsrs	r6, r2, #24
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	431e      	orrs	r6, r3
 800118a:	0213      	lsls	r3, r2, #8
 800118c:	4698      	mov	r8, r3
 800118e:	0433      	lsls	r3, r6, #16
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	4699      	mov	r9, r3
 8001194:	0c31      	lsrs	r1, r6, #16
 8001196:	9101      	str	r1, [sp, #4]
 8001198:	f7ff f84c 	bl	8000234 <__aeabi_uidivmod>
 800119c:	464a      	mov	r2, r9
 800119e:	4342      	muls	r2, r0
 80011a0:	040b      	lsls	r3, r1, #16
 80011a2:	0c21      	lsrs	r1, r4, #16
 80011a4:	0005      	movs	r5, r0
 80011a6:	4319      	orrs	r1, r3
 80011a8:	428a      	cmp	r2, r1
 80011aa:	d907      	bls.n	80011bc <__aeabi_ddiv+0x2f4>
 80011ac:	1989      	adds	r1, r1, r6
 80011ae:	3d01      	subs	r5, #1
 80011b0:	428e      	cmp	r6, r1
 80011b2:	d803      	bhi.n	80011bc <__aeabi_ddiv+0x2f4>
 80011b4:	428a      	cmp	r2, r1
 80011b6:	d901      	bls.n	80011bc <__aeabi_ddiv+0x2f4>
 80011b8:	1e85      	subs	r5, r0, #2
 80011ba:	1989      	adds	r1, r1, r6
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	9901      	ldr	r1, [sp, #4]
 80011c0:	f7ff f838 	bl	8000234 <__aeabi_uidivmod>
 80011c4:	0409      	lsls	r1, r1, #16
 80011c6:	468c      	mov	ip, r1
 80011c8:	464a      	mov	r2, r9
 80011ca:	0421      	lsls	r1, r4, #16
 80011cc:	4664      	mov	r4, ip
 80011ce:	4342      	muls	r2, r0
 80011d0:	0c09      	lsrs	r1, r1, #16
 80011d2:	0003      	movs	r3, r0
 80011d4:	4321      	orrs	r1, r4
 80011d6:	428a      	cmp	r2, r1
 80011d8:	d904      	bls.n	80011e4 <__aeabi_ddiv+0x31c>
 80011da:	1989      	adds	r1, r1, r6
 80011dc:	3b01      	subs	r3, #1
 80011de:	428e      	cmp	r6, r1
 80011e0:	d800      	bhi.n	80011e4 <__aeabi_ddiv+0x31c>
 80011e2:	e0f1      	b.n	80013c8 <__aeabi_ddiv+0x500>
 80011e4:	042d      	lsls	r5, r5, #16
 80011e6:	431d      	orrs	r5, r3
 80011e8:	46ab      	mov	fp, r5
 80011ea:	4643      	mov	r3, r8
 80011ec:	1a89      	subs	r1, r1, r2
 80011ee:	4642      	mov	r2, r8
 80011f0:	0c28      	lsrs	r0, r5, #16
 80011f2:	0412      	lsls	r2, r2, #16
 80011f4:	0c1d      	lsrs	r5, r3, #16
 80011f6:	465b      	mov	r3, fp
 80011f8:	0c14      	lsrs	r4, r2, #16
 80011fa:	0022      	movs	r2, r4
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	435a      	muls	r2, r3
 8001202:	9403      	str	r4, [sp, #12]
 8001204:	436b      	muls	r3, r5
 8001206:	4344      	muls	r4, r0
 8001208:	9502      	str	r5, [sp, #8]
 800120a:	4368      	muls	r0, r5
 800120c:	191b      	adds	r3, r3, r4
 800120e:	0c15      	lsrs	r5, r2, #16
 8001210:	18eb      	adds	r3, r5, r3
 8001212:	429c      	cmp	r4, r3
 8001214:	d903      	bls.n	800121e <__aeabi_ddiv+0x356>
 8001216:	2480      	movs	r4, #128	; 0x80
 8001218:	0264      	lsls	r4, r4, #9
 800121a:	46a4      	mov	ip, r4
 800121c:	4460      	add	r0, ip
 800121e:	0c1c      	lsrs	r4, r3, #16
 8001220:	0415      	lsls	r5, r2, #16
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	0c2d      	lsrs	r5, r5, #16
 8001226:	1820      	adds	r0, r4, r0
 8001228:	195d      	adds	r5, r3, r5
 800122a:	4281      	cmp	r1, r0
 800122c:	d377      	bcc.n	800131e <__aeabi_ddiv+0x456>
 800122e:	d073      	beq.n	8001318 <__aeabi_ddiv+0x450>
 8001230:	1a0c      	subs	r4, r1, r0
 8001232:	4aa2      	ldr	r2, [pc, #648]	; (80014bc <__aeabi_ddiv+0x5f4>)
 8001234:	1b7d      	subs	r5, r7, r5
 8001236:	42af      	cmp	r7, r5
 8001238:	41bf      	sbcs	r7, r7
 800123a:	4694      	mov	ip, r2
 800123c:	9b00      	ldr	r3, [sp, #0]
 800123e:	427f      	negs	r7, r7
 8001240:	4463      	add	r3, ip
 8001242:	1be0      	subs	r0, r4, r7
 8001244:	001c      	movs	r4, r3
 8001246:	4286      	cmp	r6, r0
 8001248:	d100      	bne.n	800124c <__aeabi_ddiv+0x384>
 800124a:	e0db      	b.n	8001404 <__aeabi_ddiv+0x53c>
 800124c:	9901      	ldr	r1, [sp, #4]
 800124e:	f7fe fff1 	bl	8000234 <__aeabi_uidivmod>
 8001252:	464a      	mov	r2, r9
 8001254:	4342      	muls	r2, r0
 8001256:	040b      	lsls	r3, r1, #16
 8001258:	0c29      	lsrs	r1, r5, #16
 800125a:	0007      	movs	r7, r0
 800125c:	4319      	orrs	r1, r3
 800125e:	428a      	cmp	r2, r1
 8001260:	d907      	bls.n	8001272 <__aeabi_ddiv+0x3aa>
 8001262:	1989      	adds	r1, r1, r6
 8001264:	3f01      	subs	r7, #1
 8001266:	428e      	cmp	r6, r1
 8001268:	d803      	bhi.n	8001272 <__aeabi_ddiv+0x3aa>
 800126a:	428a      	cmp	r2, r1
 800126c:	d901      	bls.n	8001272 <__aeabi_ddiv+0x3aa>
 800126e:	1e87      	subs	r7, r0, #2
 8001270:	1989      	adds	r1, r1, r6
 8001272:	1a88      	subs	r0, r1, r2
 8001274:	9901      	ldr	r1, [sp, #4]
 8001276:	f7fe ffdd 	bl	8000234 <__aeabi_uidivmod>
 800127a:	0409      	lsls	r1, r1, #16
 800127c:	464a      	mov	r2, r9
 800127e:	4689      	mov	r9, r1
 8001280:	0429      	lsls	r1, r5, #16
 8001282:	464d      	mov	r5, r9
 8001284:	4342      	muls	r2, r0
 8001286:	0c09      	lsrs	r1, r1, #16
 8001288:	0003      	movs	r3, r0
 800128a:	4329      	orrs	r1, r5
 800128c:	428a      	cmp	r2, r1
 800128e:	d907      	bls.n	80012a0 <__aeabi_ddiv+0x3d8>
 8001290:	1989      	adds	r1, r1, r6
 8001292:	3b01      	subs	r3, #1
 8001294:	428e      	cmp	r6, r1
 8001296:	d803      	bhi.n	80012a0 <__aeabi_ddiv+0x3d8>
 8001298:	428a      	cmp	r2, r1
 800129a:	d901      	bls.n	80012a0 <__aeabi_ddiv+0x3d8>
 800129c:	1e83      	subs	r3, r0, #2
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	043f      	lsls	r7, r7, #16
 80012a2:	1a89      	subs	r1, r1, r2
 80012a4:	003a      	movs	r2, r7
 80012a6:	9f03      	ldr	r7, [sp, #12]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	0038      	movs	r0, r7
 80012ac:	0413      	lsls	r3, r2, #16
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	4358      	muls	r0, r3
 80012b2:	4681      	mov	r9, r0
 80012b4:	9802      	ldr	r0, [sp, #8]
 80012b6:	0c15      	lsrs	r5, r2, #16
 80012b8:	436f      	muls	r7, r5
 80012ba:	4343      	muls	r3, r0
 80012bc:	4345      	muls	r5, r0
 80012be:	4648      	mov	r0, r9
 80012c0:	0c00      	lsrs	r0, r0, #16
 80012c2:	4684      	mov	ip, r0
 80012c4:	19db      	adds	r3, r3, r7
 80012c6:	4463      	add	r3, ip
 80012c8:	429f      	cmp	r7, r3
 80012ca:	d903      	bls.n	80012d4 <__aeabi_ddiv+0x40c>
 80012cc:	2080      	movs	r0, #128	; 0x80
 80012ce:	0240      	lsls	r0, r0, #9
 80012d0:	4684      	mov	ip, r0
 80012d2:	4465      	add	r5, ip
 80012d4:	4648      	mov	r0, r9
 80012d6:	0c1f      	lsrs	r7, r3, #16
 80012d8:	0400      	lsls	r0, r0, #16
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	0c00      	lsrs	r0, r0, #16
 80012de:	197d      	adds	r5, r7, r5
 80012e0:	1818      	adds	r0, r3, r0
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d200      	bcs.n	80012e8 <__aeabi_ddiv+0x420>
 80012e6:	e084      	b.n	80013f2 <__aeabi_ddiv+0x52a>
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x424>
 80012ea:	e07f      	b.n	80013ec <__aeabi_ddiv+0x524>
 80012ec:	2301      	movs	r3, #1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	e657      	b.n	8000fa2 <__aeabi_ddiv+0xda>
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	464a      	mov	r2, r9
 80012f6:	031b      	lsls	r3, r3, #12
 80012f8:	4313      	orrs	r3, r2
 80012fa:	031b      	lsls	r3, r3, #12
 80012fc:	0b1b      	lsrs	r3, r3, #12
 80012fe:	46aa      	mov	sl, r5
 8001300:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <__aeabi_ddiv+0x5f8>)
 8001302:	e66f      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 8001304:	42ba      	cmp	r2, r7
 8001306:	d900      	bls.n	800130a <__aeabi_ddiv+0x442>
 8001308:	e735      	b.n	8001176 <__aeabi_ddiv+0x2ae>
 800130a:	464b      	mov	r3, r9
 800130c:	07dc      	lsls	r4, r3, #31
 800130e:	0858      	lsrs	r0, r3, #1
 8001310:	087b      	lsrs	r3, r7, #1
 8001312:	431c      	orrs	r4, r3
 8001314:	07ff      	lsls	r7, r7, #31
 8001316:	e734      	b.n	8001182 <__aeabi_ddiv+0x2ba>
 8001318:	2400      	movs	r4, #0
 800131a:	42af      	cmp	r7, r5
 800131c:	d289      	bcs.n	8001232 <__aeabi_ddiv+0x36a>
 800131e:	4447      	add	r7, r8
 8001320:	4547      	cmp	r7, r8
 8001322:	41a4      	sbcs	r4, r4
 8001324:	465b      	mov	r3, fp
 8001326:	4264      	negs	r4, r4
 8001328:	19a4      	adds	r4, r4, r6
 800132a:	1864      	adds	r4, r4, r1
 800132c:	3b01      	subs	r3, #1
 800132e:	42a6      	cmp	r6, r4
 8001330:	d21e      	bcs.n	8001370 <__aeabi_ddiv+0x4a8>
 8001332:	42a0      	cmp	r0, r4
 8001334:	d86d      	bhi.n	8001412 <__aeabi_ddiv+0x54a>
 8001336:	d100      	bne.n	800133a <__aeabi_ddiv+0x472>
 8001338:	e0b6      	b.n	80014a8 <__aeabi_ddiv+0x5e0>
 800133a:	1a24      	subs	r4, r4, r0
 800133c:	469b      	mov	fp, r3
 800133e:	e778      	b.n	8001232 <__aeabi_ddiv+0x36a>
 8001340:	0003      	movs	r3, r0
 8001342:	465a      	mov	r2, fp
 8001344:	3b28      	subs	r3, #40	; 0x28
 8001346:	409a      	lsls	r2, r3
 8001348:	2700      	movs	r7, #0
 800134a:	4691      	mov	r9, r2
 800134c:	e688      	b.n	8001060 <__aeabi_ddiv+0x198>
 800134e:	4658      	mov	r0, fp
 8001350:	f001 f912 	bl	8002578 <__clzsi2>
 8001354:	3020      	adds	r0, #32
 8001356:	e672      	b.n	800103e <__aeabi_ddiv+0x176>
 8001358:	0003      	movs	r3, r0
 800135a:	4652      	mov	r2, sl
 800135c:	3b28      	subs	r3, #40	; 0x28
 800135e:	409a      	lsls	r2, r3
 8001360:	4693      	mov	fp, r2
 8001362:	2200      	movs	r2, #0
 8001364:	e6b4      	b.n	80010d0 <__aeabi_ddiv+0x208>
 8001366:	4650      	mov	r0, sl
 8001368:	f001 f906 	bl	8002578 <__clzsi2>
 800136c:	3020      	adds	r0, #32
 800136e:	e69a      	b.n	80010a6 <__aeabi_ddiv+0x1de>
 8001370:	42a6      	cmp	r6, r4
 8001372:	d1e2      	bne.n	800133a <__aeabi_ddiv+0x472>
 8001374:	45b8      	cmp	r8, r7
 8001376:	d9dc      	bls.n	8001332 <__aeabi_ddiv+0x46a>
 8001378:	1a34      	subs	r4, r6, r0
 800137a:	469b      	mov	fp, r3
 800137c:	e759      	b.n	8001232 <__aeabi_ddiv+0x36a>
 800137e:	2b1f      	cmp	r3, #31
 8001380:	dc65      	bgt.n	800144e <__aeabi_ddiv+0x586>
 8001382:	4c50      	ldr	r4, [pc, #320]	; (80014c4 <__aeabi_ddiv+0x5fc>)
 8001384:	9900      	ldr	r1, [sp, #0]
 8001386:	46a4      	mov	ip, r4
 8001388:	465c      	mov	r4, fp
 800138a:	4461      	add	r1, ip
 800138c:	0008      	movs	r0, r1
 800138e:	408c      	lsls	r4, r1
 8001390:	0011      	movs	r1, r2
 8001392:	4082      	lsls	r2, r0
 8001394:	40d9      	lsrs	r1, r3
 8001396:	1e50      	subs	r0, r2, #1
 8001398:	4182      	sbcs	r2, r0
 800139a:	430c      	orrs	r4, r1
 800139c:	4314      	orrs	r4, r2
 800139e:	465a      	mov	r2, fp
 80013a0:	40da      	lsrs	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	0762      	lsls	r2, r4, #29
 80013a6:	d009      	beq.n	80013bc <__aeabi_ddiv+0x4f4>
 80013a8:	220f      	movs	r2, #15
 80013aa:	4022      	ands	r2, r4
 80013ac:	2a04      	cmp	r2, #4
 80013ae:	d005      	beq.n	80013bc <__aeabi_ddiv+0x4f4>
 80013b0:	0022      	movs	r2, r4
 80013b2:	1d14      	adds	r4, r2, #4
 80013b4:	4294      	cmp	r4, r2
 80013b6:	4189      	sbcs	r1, r1
 80013b8:	4249      	negs	r1, r1
 80013ba:	185b      	adds	r3, r3, r1
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	d562      	bpl.n	8001486 <__aeabi_ddiv+0x5be>
 80013c0:	2201      	movs	r2, #1
 80013c2:	2300      	movs	r3, #0
 80013c4:	2700      	movs	r7, #0
 80013c6:	e60d      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 80013c8:	428a      	cmp	r2, r1
 80013ca:	d800      	bhi.n	80013ce <__aeabi_ddiv+0x506>
 80013cc:	e70a      	b.n	80011e4 <__aeabi_ddiv+0x31c>
 80013ce:	1e83      	subs	r3, r0, #2
 80013d0:	1989      	adds	r1, r1, r6
 80013d2:	e707      	b.n	80011e4 <__aeabi_ddiv+0x31c>
 80013d4:	230f      	movs	r3, #15
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d100      	bne.n	80013de <__aeabi_ddiv+0x516>
 80013dc:	e5e6      	b.n	8000fac <__aeabi_ddiv+0xe4>
 80013de:	1d17      	adds	r7, r2, #4
 80013e0:	4297      	cmp	r7, r2
 80013e2:	4192      	sbcs	r2, r2
 80013e4:	4253      	negs	r3, r2
 80013e6:	449b      	add	fp, r3
 80013e8:	08fa      	lsrs	r2, r7, #3
 80013ea:	e5e0      	b.n	8000fae <__aeabi_ddiv+0xe6>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_ddiv+0x52a>
 80013f0:	e5d7      	b.n	8000fa2 <__aeabi_ddiv+0xda>
 80013f2:	1871      	adds	r1, r6, r1
 80013f4:	1e53      	subs	r3, r2, #1
 80013f6:	42b1      	cmp	r1, r6
 80013f8:	d327      	bcc.n	800144a <__aeabi_ddiv+0x582>
 80013fa:	42a9      	cmp	r1, r5
 80013fc:	d315      	bcc.n	800142a <__aeabi_ddiv+0x562>
 80013fe:	d058      	beq.n	80014b2 <__aeabi_ddiv+0x5ea>
 8001400:	001a      	movs	r2, r3
 8001402:	e773      	b.n	80012ec <__aeabi_ddiv+0x424>
 8001404:	2b00      	cmp	r3, #0
 8001406:	dc00      	bgt.n	800140a <__aeabi_ddiv+0x542>
 8001408:	e604      	b.n	8001014 <__aeabi_ddiv+0x14c>
 800140a:	2301      	movs	r3, #1
 800140c:	2200      	movs	r2, #0
 800140e:	449b      	add	fp, r3
 8001410:	e5cd      	b.n	8000fae <__aeabi_ddiv+0xe6>
 8001412:	2302      	movs	r3, #2
 8001414:	4447      	add	r7, r8
 8001416:	4547      	cmp	r7, r8
 8001418:	4189      	sbcs	r1, r1
 800141a:	425b      	negs	r3, r3
 800141c:	469c      	mov	ip, r3
 800141e:	4249      	negs	r1, r1
 8001420:	1989      	adds	r1, r1, r6
 8001422:	190c      	adds	r4, r1, r4
 8001424:	44e3      	add	fp, ip
 8001426:	1a24      	subs	r4, r4, r0
 8001428:	e703      	b.n	8001232 <__aeabi_ddiv+0x36a>
 800142a:	4643      	mov	r3, r8
 800142c:	005f      	lsls	r7, r3, #1
 800142e:	4547      	cmp	r7, r8
 8001430:	419b      	sbcs	r3, r3
 8001432:	46b8      	mov	r8, r7
 8001434:	425b      	negs	r3, r3
 8001436:	199e      	adds	r6, r3, r6
 8001438:	3a02      	subs	r2, #2
 800143a:	1989      	adds	r1, r1, r6
 800143c:	42a9      	cmp	r1, r5
 800143e:	d000      	beq.n	8001442 <__aeabi_ddiv+0x57a>
 8001440:	e754      	b.n	80012ec <__aeabi_ddiv+0x424>
 8001442:	4540      	cmp	r0, r8
 8001444:	d000      	beq.n	8001448 <__aeabi_ddiv+0x580>
 8001446:	e751      	b.n	80012ec <__aeabi_ddiv+0x424>
 8001448:	e5ab      	b.n	8000fa2 <__aeabi_ddiv+0xda>
 800144a:	001a      	movs	r2, r3
 800144c:	e7f6      	b.n	800143c <__aeabi_ddiv+0x574>
 800144e:	211f      	movs	r1, #31
 8001450:	465f      	mov	r7, fp
 8001452:	4249      	negs	r1, r1
 8001454:	1b0c      	subs	r4, r1, r4
 8001456:	40e7      	lsrs	r7, r4
 8001458:	2b20      	cmp	r3, #32
 800145a:	d007      	beq.n	800146c <__aeabi_ddiv+0x5a4>
 800145c:	491a      	ldr	r1, [pc, #104]	; (80014c8 <__aeabi_ddiv+0x600>)
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	468c      	mov	ip, r1
 8001462:	4463      	add	r3, ip
 8001464:	0018      	movs	r0, r3
 8001466:	465b      	mov	r3, fp
 8001468:	4083      	lsls	r3, r0
 800146a:	431a      	orrs	r2, r3
 800146c:	1e50      	subs	r0, r2, #1
 800146e:	4182      	sbcs	r2, r0
 8001470:	433a      	orrs	r2, r7
 8001472:	2707      	movs	r7, #7
 8001474:	2300      	movs	r3, #0
 8001476:	4017      	ands	r7, r2
 8001478:	d009      	beq.n	800148e <__aeabi_ddiv+0x5c6>
 800147a:	210f      	movs	r1, #15
 800147c:	2300      	movs	r3, #0
 800147e:	4011      	ands	r1, r2
 8001480:	0014      	movs	r4, r2
 8001482:	2904      	cmp	r1, #4
 8001484:	d195      	bne.n	80013b2 <__aeabi_ddiv+0x4ea>
 8001486:	0022      	movs	r2, r4
 8001488:	075f      	lsls	r7, r3, #29
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	0b1b      	lsrs	r3, r3, #12
 800148e:	08d2      	lsrs	r2, r2, #3
 8001490:	4317      	orrs	r7, r2
 8001492:	2200      	movs	r2, #0
 8001494:	e5a6      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	4659      	mov	r1, fp
 800149a:	031b      	lsls	r3, r3, #12
 800149c:	430b      	orrs	r3, r1
 800149e:	031b      	lsls	r3, r3, #12
 80014a0:	0017      	movs	r7, r2
 80014a2:	0b1b      	lsrs	r3, r3, #12
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <__aeabi_ddiv+0x5f8>)
 80014a6:	e59d      	b.n	8000fe4 <__aeabi_ddiv+0x11c>
 80014a8:	42bd      	cmp	r5, r7
 80014aa:	d8b2      	bhi.n	8001412 <__aeabi_ddiv+0x54a>
 80014ac:	469b      	mov	fp, r3
 80014ae:	2400      	movs	r4, #0
 80014b0:	e6bf      	b.n	8001232 <__aeabi_ddiv+0x36a>
 80014b2:	4580      	cmp	r8, r0
 80014b4:	d3b9      	bcc.n	800142a <__aeabi_ddiv+0x562>
 80014b6:	001a      	movs	r2, r3
 80014b8:	e7c3      	b.n	8001442 <__aeabi_ddiv+0x57a>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	000003ff 	.word	0x000003ff
 80014c0:	000007ff 	.word	0x000007ff
 80014c4:	0000041e 	.word	0x0000041e
 80014c8:	0000043e 	.word	0x0000043e

080014cc <__eqdf2>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	464f      	mov	r7, r9
 80014d0:	4646      	mov	r6, r8
 80014d2:	46d6      	mov	lr, sl
 80014d4:	4684      	mov	ip, r0
 80014d6:	b5c0      	push	{r6, r7, lr}
 80014d8:	4680      	mov	r8, r0
 80014da:	4e19      	ldr	r6, [pc, #100]	; (8001540 <__eqdf2+0x74>)
 80014dc:	0318      	lsls	r0, r3, #12
 80014de:	030f      	lsls	r7, r1, #12
 80014e0:	004d      	lsls	r5, r1, #1
 80014e2:	0b00      	lsrs	r0, r0, #12
 80014e4:	005c      	lsls	r4, r3, #1
 80014e6:	4682      	mov	sl, r0
 80014e8:	0b3f      	lsrs	r7, r7, #12
 80014ea:	0d6d      	lsrs	r5, r5, #21
 80014ec:	0fc9      	lsrs	r1, r1, #31
 80014ee:	4691      	mov	r9, r2
 80014f0:	0d64      	lsrs	r4, r4, #21
 80014f2:	0fdb      	lsrs	r3, r3, #31
 80014f4:	2001      	movs	r0, #1
 80014f6:	42b5      	cmp	r5, r6
 80014f8:	d00a      	beq.n	8001510 <__eqdf2+0x44>
 80014fa:	42b4      	cmp	r4, r6
 80014fc:	d003      	beq.n	8001506 <__eqdf2+0x3a>
 80014fe:	42a5      	cmp	r5, r4
 8001500:	d101      	bne.n	8001506 <__eqdf2+0x3a>
 8001502:	4557      	cmp	r7, sl
 8001504:	d00c      	beq.n	8001520 <__eqdf2+0x54>
 8001506:	bc1c      	pop	{r2, r3, r4}
 8001508:	4690      	mov	r8, r2
 800150a:	4699      	mov	r9, r3
 800150c:	46a2      	mov	sl, r4
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001510:	4666      	mov	r6, ip
 8001512:	433e      	orrs	r6, r7
 8001514:	d1f7      	bne.n	8001506 <__eqdf2+0x3a>
 8001516:	42ac      	cmp	r4, r5
 8001518:	d1f5      	bne.n	8001506 <__eqdf2+0x3a>
 800151a:	4654      	mov	r4, sl
 800151c:	4314      	orrs	r4, r2
 800151e:	d1f2      	bne.n	8001506 <__eqdf2+0x3a>
 8001520:	2001      	movs	r0, #1
 8001522:	45c8      	cmp	r8, r9
 8001524:	d1ef      	bne.n	8001506 <__eqdf2+0x3a>
 8001526:	4299      	cmp	r1, r3
 8001528:	d007      	beq.n	800153a <__eqdf2+0x6e>
 800152a:	2d00      	cmp	r5, #0
 800152c:	d1eb      	bne.n	8001506 <__eqdf2+0x3a>
 800152e:	4663      	mov	r3, ip
 8001530:	431f      	orrs	r7, r3
 8001532:	0038      	movs	r0, r7
 8001534:	1e47      	subs	r7, r0, #1
 8001536:	41b8      	sbcs	r0, r7
 8001538:	e7e5      	b.n	8001506 <__eqdf2+0x3a>
 800153a:	2000      	movs	r0, #0
 800153c:	e7e3      	b.n	8001506 <__eqdf2+0x3a>
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	000007ff 	.word	0x000007ff

08001544 <__gedf2>:
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	464f      	mov	r7, r9
 8001548:	4646      	mov	r6, r8
 800154a:	46d6      	mov	lr, sl
 800154c:	004d      	lsls	r5, r1, #1
 800154e:	b5c0      	push	{r6, r7, lr}
 8001550:	030e      	lsls	r6, r1, #12
 8001552:	0fc9      	lsrs	r1, r1, #31
 8001554:	468a      	mov	sl, r1
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <__gedf2+0xc4>)
 8001558:	031f      	lsls	r7, r3, #12
 800155a:	005c      	lsls	r4, r3, #1
 800155c:	4680      	mov	r8, r0
 800155e:	0b36      	lsrs	r6, r6, #12
 8001560:	0d6d      	lsrs	r5, r5, #21
 8001562:	4691      	mov	r9, r2
 8001564:	0b3f      	lsrs	r7, r7, #12
 8001566:	0d64      	lsrs	r4, r4, #21
 8001568:	0fdb      	lsrs	r3, r3, #31
 800156a:	428d      	cmp	r5, r1
 800156c:	d01e      	beq.n	80015ac <__gedf2+0x68>
 800156e:	428c      	cmp	r4, r1
 8001570:	d016      	beq.n	80015a0 <__gedf2+0x5c>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d11e      	bne.n	80015b4 <__gedf2+0x70>
 8001576:	4330      	orrs	r0, r6
 8001578:	4684      	mov	ip, r0
 800157a:	2c00      	cmp	r4, #0
 800157c:	d101      	bne.n	8001582 <__gedf2+0x3e>
 800157e:	433a      	orrs	r2, r7
 8001580:	d023      	beq.n	80015ca <__gedf2+0x86>
 8001582:	4662      	mov	r2, ip
 8001584:	2a00      	cmp	r2, #0
 8001586:	d01a      	beq.n	80015be <__gedf2+0x7a>
 8001588:	459a      	cmp	sl, r3
 800158a:	d029      	beq.n	80015e0 <__gedf2+0x9c>
 800158c:	4651      	mov	r1, sl
 800158e:	2002      	movs	r0, #2
 8001590:	3901      	subs	r1, #1
 8001592:	4008      	ands	r0, r1
 8001594:	3801      	subs	r0, #1
 8001596:	bc1c      	pop	{r2, r3, r4}
 8001598:	4690      	mov	r8, r2
 800159a:	4699      	mov	r9, r3
 800159c:	46a2      	mov	sl, r4
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a0:	0039      	movs	r1, r7
 80015a2:	4311      	orrs	r1, r2
 80015a4:	d0e5      	beq.n	8001572 <__gedf2+0x2e>
 80015a6:	2002      	movs	r0, #2
 80015a8:	4240      	negs	r0, r0
 80015aa:	e7f4      	b.n	8001596 <__gedf2+0x52>
 80015ac:	4330      	orrs	r0, r6
 80015ae:	d1fa      	bne.n	80015a6 <__gedf2+0x62>
 80015b0:	42ac      	cmp	r4, r5
 80015b2:	d00f      	beq.n	80015d4 <__gedf2+0x90>
 80015b4:	2c00      	cmp	r4, #0
 80015b6:	d10f      	bne.n	80015d8 <__gedf2+0x94>
 80015b8:	433a      	orrs	r2, r7
 80015ba:	d0e7      	beq.n	800158c <__gedf2+0x48>
 80015bc:	e00c      	b.n	80015d8 <__gedf2+0x94>
 80015be:	2201      	movs	r2, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4393      	bics	r3, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	3001      	adds	r0, #1
 80015c8:	e7e5      	b.n	8001596 <__gedf2+0x52>
 80015ca:	4663      	mov	r3, ip
 80015cc:	2000      	movs	r0, #0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0e1      	beq.n	8001596 <__gedf2+0x52>
 80015d2:	e7db      	b.n	800158c <__gedf2+0x48>
 80015d4:	433a      	orrs	r2, r7
 80015d6:	d1e6      	bne.n	80015a6 <__gedf2+0x62>
 80015d8:	459a      	cmp	sl, r3
 80015da:	d1d7      	bne.n	800158c <__gedf2+0x48>
 80015dc:	42a5      	cmp	r5, r4
 80015de:	dcd5      	bgt.n	800158c <__gedf2+0x48>
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	db05      	blt.n	80015f0 <__gedf2+0xac>
 80015e4:	42be      	cmp	r6, r7
 80015e6:	d8d1      	bhi.n	800158c <__gedf2+0x48>
 80015e8:	d008      	beq.n	80015fc <__gedf2+0xb8>
 80015ea:	2000      	movs	r0, #0
 80015ec:	42be      	cmp	r6, r7
 80015ee:	d2d2      	bcs.n	8001596 <__gedf2+0x52>
 80015f0:	4650      	mov	r0, sl
 80015f2:	2301      	movs	r3, #1
 80015f4:	3801      	subs	r0, #1
 80015f6:	4398      	bics	r0, r3
 80015f8:	3001      	adds	r0, #1
 80015fa:	e7cc      	b.n	8001596 <__gedf2+0x52>
 80015fc:	45c8      	cmp	r8, r9
 80015fe:	d8c5      	bhi.n	800158c <__gedf2+0x48>
 8001600:	2000      	movs	r0, #0
 8001602:	45c8      	cmp	r8, r9
 8001604:	d3f4      	bcc.n	80015f0 <__gedf2+0xac>
 8001606:	e7c6      	b.n	8001596 <__gedf2+0x52>
 8001608:	000007ff 	.word	0x000007ff

0800160c <__ledf2>:
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	464f      	mov	r7, r9
 8001610:	4646      	mov	r6, r8
 8001612:	46d6      	mov	lr, sl
 8001614:	004d      	lsls	r5, r1, #1
 8001616:	b5c0      	push	{r6, r7, lr}
 8001618:	030e      	lsls	r6, r1, #12
 800161a:	0fc9      	lsrs	r1, r1, #31
 800161c:	468a      	mov	sl, r1
 800161e:	492e      	ldr	r1, [pc, #184]	; (80016d8 <__ledf2+0xcc>)
 8001620:	031f      	lsls	r7, r3, #12
 8001622:	005c      	lsls	r4, r3, #1
 8001624:	4680      	mov	r8, r0
 8001626:	0b36      	lsrs	r6, r6, #12
 8001628:	0d6d      	lsrs	r5, r5, #21
 800162a:	4691      	mov	r9, r2
 800162c:	0b3f      	lsrs	r7, r7, #12
 800162e:	0d64      	lsrs	r4, r4, #21
 8001630:	0fdb      	lsrs	r3, r3, #31
 8001632:	428d      	cmp	r5, r1
 8001634:	d018      	beq.n	8001668 <__ledf2+0x5c>
 8001636:	428c      	cmp	r4, r1
 8001638:	d011      	beq.n	800165e <__ledf2+0x52>
 800163a:	2d00      	cmp	r5, #0
 800163c:	d118      	bne.n	8001670 <__ledf2+0x64>
 800163e:	4330      	orrs	r0, r6
 8001640:	4684      	mov	ip, r0
 8001642:	2c00      	cmp	r4, #0
 8001644:	d11e      	bne.n	8001684 <__ledf2+0x78>
 8001646:	433a      	orrs	r2, r7
 8001648:	d11c      	bne.n	8001684 <__ledf2+0x78>
 800164a:	4663      	mov	r3, ip
 800164c:	2000      	movs	r0, #0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d030      	beq.n	80016b4 <__ledf2+0xa8>
 8001652:	4651      	mov	r1, sl
 8001654:	2002      	movs	r0, #2
 8001656:	3901      	subs	r1, #1
 8001658:	4008      	ands	r0, r1
 800165a:	3801      	subs	r0, #1
 800165c:	e02a      	b.n	80016b4 <__ledf2+0xa8>
 800165e:	0039      	movs	r1, r7
 8001660:	4311      	orrs	r1, r2
 8001662:	d0ea      	beq.n	800163a <__ledf2+0x2e>
 8001664:	2002      	movs	r0, #2
 8001666:	e025      	b.n	80016b4 <__ledf2+0xa8>
 8001668:	4330      	orrs	r0, r6
 800166a:	d1fb      	bne.n	8001664 <__ledf2+0x58>
 800166c:	42ac      	cmp	r4, r5
 800166e:	d026      	beq.n	80016be <__ledf2+0xb2>
 8001670:	2c00      	cmp	r4, #0
 8001672:	d126      	bne.n	80016c2 <__ledf2+0xb6>
 8001674:	433a      	orrs	r2, r7
 8001676:	d124      	bne.n	80016c2 <__ledf2+0xb6>
 8001678:	4651      	mov	r1, sl
 800167a:	2002      	movs	r0, #2
 800167c:	3901      	subs	r1, #1
 800167e:	4008      	ands	r0, r1
 8001680:	3801      	subs	r0, #1
 8001682:	e017      	b.n	80016b4 <__ledf2+0xa8>
 8001684:	4662      	mov	r2, ip
 8001686:	2a00      	cmp	r2, #0
 8001688:	d00f      	beq.n	80016aa <__ledf2+0x9e>
 800168a:	459a      	cmp	sl, r3
 800168c:	d1e1      	bne.n	8001652 <__ledf2+0x46>
 800168e:	42a5      	cmp	r5, r4
 8001690:	db05      	blt.n	800169e <__ledf2+0x92>
 8001692:	42be      	cmp	r6, r7
 8001694:	d8dd      	bhi.n	8001652 <__ledf2+0x46>
 8001696:	d019      	beq.n	80016cc <__ledf2+0xc0>
 8001698:	2000      	movs	r0, #0
 800169a:	42be      	cmp	r6, r7
 800169c:	d20a      	bcs.n	80016b4 <__ledf2+0xa8>
 800169e:	4650      	mov	r0, sl
 80016a0:	2301      	movs	r3, #1
 80016a2:	3801      	subs	r0, #1
 80016a4:	4398      	bics	r0, r3
 80016a6:	3001      	adds	r0, #1
 80016a8:	e004      	b.n	80016b4 <__ledf2+0xa8>
 80016aa:	2201      	movs	r2, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4393      	bics	r3, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	3001      	adds	r0, #1
 80016b4:	bc1c      	pop	{r2, r3, r4}
 80016b6:	4690      	mov	r8, r2
 80016b8:	4699      	mov	r9, r3
 80016ba:	46a2      	mov	sl, r4
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	433a      	orrs	r2, r7
 80016c0:	d1d0      	bne.n	8001664 <__ledf2+0x58>
 80016c2:	459a      	cmp	sl, r3
 80016c4:	d1c5      	bne.n	8001652 <__ledf2+0x46>
 80016c6:	42a5      	cmp	r5, r4
 80016c8:	dcc3      	bgt.n	8001652 <__ledf2+0x46>
 80016ca:	e7e0      	b.n	800168e <__ledf2+0x82>
 80016cc:	45c8      	cmp	r8, r9
 80016ce:	d8c0      	bhi.n	8001652 <__ledf2+0x46>
 80016d0:	2000      	movs	r0, #0
 80016d2:	45c8      	cmp	r8, r9
 80016d4:	d3e3      	bcc.n	800169e <__ledf2+0x92>
 80016d6:	e7ed      	b.n	80016b4 <__ledf2+0xa8>
 80016d8:	000007ff 	.word	0x000007ff

080016dc <__aeabi_dmul>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4657      	mov	r7, sl
 80016e0:	46de      	mov	lr, fp
 80016e2:	464e      	mov	r6, r9
 80016e4:	4645      	mov	r5, r8
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	4683      	mov	fp, r0
 80016ea:	0006      	movs	r6, r0
 80016ec:	030f      	lsls	r7, r1, #12
 80016ee:	0048      	lsls	r0, r1, #1
 80016f0:	b087      	sub	sp, #28
 80016f2:	4692      	mov	sl, r2
 80016f4:	001d      	movs	r5, r3
 80016f6:	0b3f      	lsrs	r7, r7, #12
 80016f8:	0d40      	lsrs	r0, r0, #21
 80016fa:	0fcc      	lsrs	r4, r1, #31
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x26>
 8001700:	e06f      	b.n	80017e2 <__aeabi_dmul+0x106>
 8001702:	4bde      	ldr	r3, [pc, #888]	; (8001a7c <__aeabi_dmul+0x3a0>)
 8001704:	4298      	cmp	r0, r3
 8001706:	d038      	beq.n	800177a <__aeabi_dmul+0x9e>
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	00ff      	lsls	r7, r7, #3
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431f      	orrs	r7, r3
 8001710:	0f73      	lsrs	r3, r6, #29
 8001712:	433b      	orrs	r3, r7
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	4bda      	ldr	r3, [pc, #872]	; (8001a80 <__aeabi_dmul+0x3a4>)
 8001718:	2700      	movs	r7, #0
 800171a:	4699      	mov	r9, r3
 800171c:	2300      	movs	r3, #0
 800171e:	469b      	mov	fp, r3
 8001720:	00f6      	lsls	r6, r6, #3
 8001722:	4481      	add	r9, r0
 8001724:	032b      	lsls	r3, r5, #12
 8001726:	0069      	lsls	r1, r5, #1
 8001728:	0b1b      	lsrs	r3, r3, #12
 800172a:	4652      	mov	r2, sl
 800172c:	4698      	mov	r8, r3
 800172e:	0d49      	lsrs	r1, r1, #21
 8001730:	0fed      	lsrs	r5, r5, #31
 8001732:	2900      	cmp	r1, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x5c>
 8001736:	e085      	b.n	8001844 <__aeabi_dmul+0x168>
 8001738:	4bd0      	ldr	r3, [pc, #832]	; (8001a7c <__aeabi_dmul+0x3a0>)
 800173a:	4299      	cmp	r1, r3
 800173c:	d100      	bne.n	8001740 <__aeabi_dmul+0x64>
 800173e:	e073      	b.n	8001828 <__aeabi_dmul+0x14c>
 8001740:	4643      	mov	r3, r8
 8001742:	00da      	lsls	r2, r3, #3
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4313      	orrs	r3, r2
 800174a:	4652      	mov	r2, sl
 800174c:	48cc      	ldr	r0, [pc, #816]	; (8001a80 <__aeabi_dmul+0x3a4>)
 800174e:	0f52      	lsrs	r2, r2, #29
 8001750:	4684      	mov	ip, r0
 8001752:	4313      	orrs	r3, r2
 8001754:	4652      	mov	r2, sl
 8001756:	2000      	movs	r0, #0
 8001758:	4461      	add	r1, ip
 800175a:	00d2      	lsls	r2, r2, #3
 800175c:	4489      	add	r9, r1
 800175e:	0021      	movs	r1, r4
 8001760:	4069      	eors	r1, r5
 8001762:	9100      	str	r1, [sp, #0]
 8001764:	468c      	mov	ip, r1
 8001766:	2101      	movs	r1, #1
 8001768:	4449      	add	r1, r9
 800176a:	468a      	mov	sl, r1
 800176c:	2f0f      	cmp	r7, #15
 800176e:	d900      	bls.n	8001772 <__aeabi_dmul+0x96>
 8001770:	e090      	b.n	8001894 <__aeabi_dmul+0x1b8>
 8001772:	49c4      	ldr	r1, [pc, #784]	; (8001a84 <__aeabi_dmul+0x3a8>)
 8001774:	00bf      	lsls	r7, r7, #2
 8001776:	59cf      	ldr	r7, [r1, r7]
 8001778:	46bf      	mov	pc, r7
 800177a:	465b      	mov	r3, fp
 800177c:	433b      	orrs	r3, r7
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	d000      	beq.n	8001784 <__aeabi_dmul+0xa8>
 8001782:	e16a      	b.n	8001a5a <__aeabi_dmul+0x37e>
 8001784:	2302      	movs	r3, #2
 8001786:	2708      	movs	r7, #8
 8001788:	2600      	movs	r6, #0
 800178a:	4681      	mov	r9, r0
 800178c:	469b      	mov	fp, r3
 800178e:	e7c9      	b.n	8001724 <__aeabi_dmul+0x48>
 8001790:	0032      	movs	r2, r6
 8001792:	4658      	mov	r0, fp
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	4661      	mov	r1, ip
 8001798:	9100      	str	r1, [sp, #0]
 800179a:	2802      	cmp	r0, #2
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0xc4>
 800179e:	e075      	b.n	800188c <__aeabi_dmul+0x1b0>
 80017a0:	2803      	cmp	r0, #3
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0xca>
 80017a4:	e1fe      	b.n	8001ba4 <__aeabi_dmul+0x4c8>
 80017a6:	2801      	cmp	r0, #1
 80017a8:	d000      	beq.n	80017ac <__aeabi_dmul+0xd0>
 80017aa:	e12c      	b.n	8001a06 <__aeabi_dmul+0x32a>
 80017ac:	2300      	movs	r3, #0
 80017ae:	2700      	movs	r7, #0
 80017b0:	2600      	movs	r6, #0
 80017b2:	2500      	movs	r5, #0
 80017b4:	033f      	lsls	r7, r7, #12
 80017b6:	0d2a      	lsrs	r2, r5, #20
 80017b8:	0b3f      	lsrs	r7, r7, #12
 80017ba:	48b3      	ldr	r0, [pc, #716]	; (8001a88 <__aeabi_dmul+0x3ac>)
 80017bc:	0512      	lsls	r2, r2, #20
 80017be:	433a      	orrs	r2, r7
 80017c0:	4002      	ands	r2, r0
 80017c2:	051b      	lsls	r3, r3, #20
 80017c4:	4313      	orrs	r3, r2
 80017c6:	9a00      	ldr	r2, [sp, #0]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	07d1      	lsls	r1, r2, #31
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	430b      	orrs	r3, r1
 80017d0:	0030      	movs	r0, r6
 80017d2:	0019      	movs	r1, r3
 80017d4:	b007      	add	sp, #28
 80017d6:	bc3c      	pop	{r2, r3, r4, r5}
 80017d8:	4690      	mov	r8, r2
 80017da:	4699      	mov	r9, r3
 80017dc:	46a2      	mov	sl, r4
 80017de:	46ab      	mov	fp, r5
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	465b      	mov	r3, fp
 80017e4:	433b      	orrs	r3, r7
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	d100      	bne.n	80017ec <__aeabi_dmul+0x110>
 80017ea:	e12f      	b.n	8001a4c <__aeabi_dmul+0x370>
 80017ec:	2f00      	cmp	r7, #0
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dmul+0x116>
 80017f0:	e1a5      	b.n	8001b3e <__aeabi_dmul+0x462>
 80017f2:	0038      	movs	r0, r7
 80017f4:	f000 fec0 	bl	8002578 <__clzsi2>
 80017f8:	0003      	movs	r3, r0
 80017fa:	3b0b      	subs	r3, #11
 80017fc:	2b1c      	cmp	r3, #28
 80017fe:	dd00      	ble.n	8001802 <__aeabi_dmul+0x126>
 8001800:	e196      	b.n	8001b30 <__aeabi_dmul+0x454>
 8001802:	221d      	movs	r2, #29
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	465a      	mov	r2, fp
 8001808:	0001      	movs	r1, r0
 800180a:	40da      	lsrs	r2, r3
 800180c:	465e      	mov	r6, fp
 800180e:	3908      	subs	r1, #8
 8001810:	408f      	lsls	r7, r1
 8001812:	0013      	movs	r3, r2
 8001814:	408e      	lsls	r6, r1
 8001816:	433b      	orrs	r3, r7
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	4b9c      	ldr	r3, [pc, #624]	; (8001a8c <__aeabi_dmul+0x3b0>)
 800181c:	2700      	movs	r7, #0
 800181e:	1a1b      	subs	r3, r3, r0
 8001820:	4699      	mov	r9, r3
 8001822:	2300      	movs	r3, #0
 8001824:	469b      	mov	fp, r3
 8001826:	e77d      	b.n	8001724 <__aeabi_dmul+0x48>
 8001828:	4641      	mov	r1, r8
 800182a:	4653      	mov	r3, sl
 800182c:	430b      	orrs	r3, r1
 800182e:	4993      	ldr	r1, [pc, #588]	; (8001a7c <__aeabi_dmul+0x3a0>)
 8001830:	468c      	mov	ip, r1
 8001832:	44e1      	add	r9, ip
 8001834:	2b00      	cmp	r3, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dmul+0x15e>
 8001838:	e11a      	b.n	8001a70 <__aeabi_dmul+0x394>
 800183a:	2202      	movs	r2, #2
 800183c:	2002      	movs	r0, #2
 800183e:	4317      	orrs	r7, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e78c      	b.n	800175e <__aeabi_dmul+0x82>
 8001844:	4313      	orrs	r3, r2
 8001846:	d100      	bne.n	800184a <__aeabi_dmul+0x16e>
 8001848:	e10d      	b.n	8001a66 <__aeabi_dmul+0x38a>
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dmul+0x176>
 8001850:	e181      	b.n	8001b56 <__aeabi_dmul+0x47a>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fe90 	bl	8002578 <__clzsi2>
 8001858:	0002      	movs	r2, r0
 800185a:	3a0b      	subs	r2, #11
 800185c:	2a1c      	cmp	r2, #28
 800185e:	dd00      	ble.n	8001862 <__aeabi_dmul+0x186>
 8001860:	e172      	b.n	8001b48 <__aeabi_dmul+0x46c>
 8001862:	0001      	movs	r1, r0
 8001864:	4643      	mov	r3, r8
 8001866:	3908      	subs	r1, #8
 8001868:	408b      	lsls	r3, r1
 800186a:	4698      	mov	r8, r3
 800186c:	231d      	movs	r3, #29
 800186e:	1a9a      	subs	r2, r3, r2
 8001870:	4653      	mov	r3, sl
 8001872:	40d3      	lsrs	r3, r2
 8001874:	001a      	movs	r2, r3
 8001876:	4643      	mov	r3, r8
 8001878:	4313      	orrs	r3, r2
 800187a:	4652      	mov	r2, sl
 800187c:	408a      	lsls	r2, r1
 800187e:	4649      	mov	r1, r9
 8001880:	1a08      	subs	r0, r1, r0
 8001882:	4982      	ldr	r1, [pc, #520]	; (8001a8c <__aeabi_dmul+0x3b0>)
 8001884:	4689      	mov	r9, r1
 8001886:	4481      	add	r9, r0
 8001888:	2000      	movs	r0, #0
 800188a:	e768      	b.n	800175e <__aeabi_dmul+0x82>
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <__aeabi_dmul+0x3a0>)
 800188e:	2700      	movs	r7, #0
 8001890:	2600      	movs	r6, #0
 8001892:	e78e      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001894:	0c14      	lsrs	r4, r2, #16
 8001896:	0412      	lsls	r2, r2, #16
 8001898:	0c12      	lsrs	r2, r2, #16
 800189a:	0011      	movs	r1, r2
 800189c:	0c37      	lsrs	r7, r6, #16
 800189e:	0436      	lsls	r6, r6, #16
 80018a0:	0c35      	lsrs	r5, r6, #16
 80018a2:	4379      	muls	r1, r7
 80018a4:	0028      	movs	r0, r5
 80018a6:	468c      	mov	ip, r1
 80018a8:	002e      	movs	r6, r5
 80018aa:	4360      	muls	r0, r4
 80018ac:	4460      	add	r0, ip
 80018ae:	4683      	mov	fp, r0
 80018b0:	4356      	muls	r6, r2
 80018b2:	0021      	movs	r1, r4
 80018b4:	0c30      	lsrs	r0, r6, #16
 80018b6:	4680      	mov	r8, r0
 80018b8:	4658      	mov	r0, fp
 80018ba:	4379      	muls	r1, r7
 80018bc:	4440      	add	r0, r8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	4584      	cmp	ip, r0
 80018c2:	d906      	bls.n	80018d2 <__aeabi_dmul+0x1f6>
 80018c4:	4688      	mov	r8, r1
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0249      	lsls	r1, r1, #9
 80018ca:	468c      	mov	ip, r1
 80018cc:	44e0      	add	r8, ip
 80018ce:	4641      	mov	r1, r8
 80018d0:	9102      	str	r1, [sp, #8]
 80018d2:	0436      	lsls	r6, r6, #16
 80018d4:	0c01      	lsrs	r1, r0, #16
 80018d6:	0c36      	lsrs	r6, r6, #16
 80018d8:	0400      	lsls	r0, r0, #16
 80018da:	468b      	mov	fp, r1
 80018dc:	1981      	adds	r1, r0, r6
 80018de:	0c1e      	lsrs	r6, r3, #16
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	0c1b      	lsrs	r3, r3, #16
 80018e4:	9103      	str	r1, [sp, #12]
 80018e6:	0019      	movs	r1, r3
 80018e8:	4379      	muls	r1, r7
 80018ea:	468c      	mov	ip, r1
 80018ec:	0028      	movs	r0, r5
 80018ee:	4375      	muls	r5, r6
 80018f0:	4465      	add	r5, ip
 80018f2:	46a8      	mov	r8, r5
 80018f4:	4358      	muls	r0, r3
 80018f6:	0c05      	lsrs	r5, r0, #16
 80018f8:	4445      	add	r5, r8
 80018fa:	4377      	muls	r7, r6
 80018fc:	42a9      	cmp	r1, r5
 80018fe:	d903      	bls.n	8001908 <__aeabi_dmul+0x22c>
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	468c      	mov	ip, r1
 8001906:	4467      	add	r7, ip
 8001908:	0c29      	lsrs	r1, r5, #16
 800190a:	468c      	mov	ip, r1
 800190c:	0039      	movs	r1, r7
 800190e:	0400      	lsls	r0, r0, #16
 8001910:	0c00      	lsrs	r0, r0, #16
 8001912:	042d      	lsls	r5, r5, #16
 8001914:	182d      	adds	r5, r5, r0
 8001916:	4461      	add	r1, ip
 8001918:	44ab      	add	fp, r5
 800191a:	9105      	str	r1, [sp, #20]
 800191c:	4659      	mov	r1, fp
 800191e:	9104      	str	r1, [sp, #16]
 8001920:	9901      	ldr	r1, [sp, #4]
 8001922:	040f      	lsls	r7, r1, #16
 8001924:	0c3f      	lsrs	r7, r7, #16
 8001926:	0c08      	lsrs	r0, r1, #16
 8001928:	0039      	movs	r1, r7
 800192a:	4351      	muls	r1, r2
 800192c:	4342      	muls	r2, r0
 800192e:	4690      	mov	r8, r2
 8001930:	0002      	movs	r2, r0
 8001932:	468c      	mov	ip, r1
 8001934:	0c09      	lsrs	r1, r1, #16
 8001936:	468b      	mov	fp, r1
 8001938:	4362      	muls	r2, r4
 800193a:	437c      	muls	r4, r7
 800193c:	4444      	add	r4, r8
 800193e:	445c      	add	r4, fp
 8001940:	45a0      	cmp	r8, r4
 8001942:	d903      	bls.n	800194c <__aeabi_dmul+0x270>
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0249      	lsls	r1, r1, #9
 8001948:	4688      	mov	r8, r1
 800194a:	4442      	add	r2, r8
 800194c:	0c21      	lsrs	r1, r4, #16
 800194e:	4688      	mov	r8, r1
 8001950:	4661      	mov	r1, ip
 8001952:	0409      	lsls	r1, r1, #16
 8001954:	0c09      	lsrs	r1, r1, #16
 8001956:	468c      	mov	ip, r1
 8001958:	0039      	movs	r1, r7
 800195a:	4359      	muls	r1, r3
 800195c:	4343      	muls	r3, r0
 800195e:	4370      	muls	r0, r6
 8001960:	437e      	muls	r6, r7
 8001962:	0c0f      	lsrs	r7, r1, #16
 8001964:	18f6      	adds	r6, r6, r3
 8001966:	0424      	lsls	r4, r4, #16
 8001968:	19be      	adds	r6, r7, r6
 800196a:	4464      	add	r4, ip
 800196c:	4442      	add	r2, r8
 800196e:	468c      	mov	ip, r1
 8001970:	42b3      	cmp	r3, r6
 8001972:	d903      	bls.n	800197c <__aeabi_dmul+0x2a0>
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	4698      	mov	r8, r3
 800197a:	4440      	add	r0, r8
 800197c:	9b02      	ldr	r3, [sp, #8]
 800197e:	4661      	mov	r1, ip
 8001980:	4698      	mov	r8, r3
 8001982:	9b04      	ldr	r3, [sp, #16]
 8001984:	0437      	lsls	r7, r6, #16
 8001986:	4443      	add	r3, r8
 8001988:	469b      	mov	fp, r3
 800198a:	45ab      	cmp	fp, r5
 800198c:	41ad      	sbcs	r5, r5
 800198e:	426b      	negs	r3, r5
 8001990:	040d      	lsls	r5, r1, #16
 8001992:	9905      	ldr	r1, [sp, #20]
 8001994:	0c2d      	lsrs	r5, r5, #16
 8001996:	468c      	mov	ip, r1
 8001998:	197f      	adds	r7, r7, r5
 800199a:	4467      	add	r7, ip
 800199c:	18fd      	adds	r5, r7, r3
 800199e:	46a8      	mov	r8, r5
 80019a0:	465d      	mov	r5, fp
 80019a2:	192d      	adds	r5, r5, r4
 80019a4:	42a5      	cmp	r5, r4
 80019a6:	41a4      	sbcs	r4, r4
 80019a8:	4693      	mov	fp, r2
 80019aa:	4264      	negs	r4, r4
 80019ac:	46a4      	mov	ip, r4
 80019ae:	44c3      	add	fp, r8
 80019b0:	44dc      	add	ip, fp
 80019b2:	428f      	cmp	r7, r1
 80019b4:	41bf      	sbcs	r7, r7
 80019b6:	4598      	cmp	r8, r3
 80019b8:	419b      	sbcs	r3, r3
 80019ba:	4593      	cmp	fp, r2
 80019bc:	4192      	sbcs	r2, r2
 80019be:	45a4      	cmp	ip, r4
 80019c0:	41a4      	sbcs	r4, r4
 80019c2:	425b      	negs	r3, r3
 80019c4:	427f      	negs	r7, r7
 80019c6:	431f      	orrs	r7, r3
 80019c8:	0c36      	lsrs	r6, r6, #16
 80019ca:	4252      	negs	r2, r2
 80019cc:	4264      	negs	r4, r4
 80019ce:	19bf      	adds	r7, r7, r6
 80019d0:	4322      	orrs	r2, r4
 80019d2:	18bf      	adds	r7, r7, r2
 80019d4:	4662      	mov	r2, ip
 80019d6:	1838      	adds	r0, r7, r0
 80019d8:	0243      	lsls	r3, r0, #9
 80019da:	0dd2      	lsrs	r2, r2, #23
 80019dc:	9903      	ldr	r1, [sp, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	026a      	lsls	r2, r5, #9
 80019e2:	430a      	orrs	r2, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4661      	mov	r1, ip
 80019ea:	0ded      	lsrs	r5, r5, #23
 80019ec:	432a      	orrs	r2, r5
 80019ee:	024e      	lsls	r6, r1, #9
 80019f0:	4332      	orrs	r2, r6
 80019f2:	01d9      	lsls	r1, r3, #7
 80019f4:	d400      	bmi.n	80019f8 <__aeabi_dmul+0x31c>
 80019f6:	e0b3      	b.n	8001b60 <__aeabi_dmul+0x484>
 80019f8:	2601      	movs	r6, #1
 80019fa:	0850      	lsrs	r0, r2, #1
 80019fc:	4032      	ands	r2, r6
 80019fe:	4302      	orrs	r2, r0
 8001a00:	07de      	lsls	r6, r3, #31
 8001a02:	4332      	orrs	r2, r6
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	4c22      	ldr	r4, [pc, #136]	; (8001a90 <__aeabi_dmul+0x3b4>)
 8001a08:	4454      	add	r4, sl
 8001a0a:	2c00      	cmp	r4, #0
 8001a0c:	dd62      	ble.n	8001ad4 <__aeabi_dmul+0x3f8>
 8001a0e:	0751      	lsls	r1, r2, #29
 8001a10:	d009      	beq.n	8001a26 <__aeabi_dmul+0x34a>
 8001a12:	200f      	movs	r0, #15
 8001a14:	4010      	ands	r0, r2
 8001a16:	2804      	cmp	r0, #4
 8001a18:	d005      	beq.n	8001a26 <__aeabi_dmul+0x34a>
 8001a1a:	1d10      	adds	r0, r2, #4
 8001a1c:	4290      	cmp	r0, r2
 8001a1e:	4192      	sbcs	r2, r2
 8001a20:	4252      	negs	r2, r2
 8001a22:	189b      	adds	r3, r3, r2
 8001a24:	0002      	movs	r2, r0
 8001a26:	01d9      	lsls	r1, r3, #7
 8001a28:	d504      	bpl.n	8001a34 <__aeabi_dmul+0x358>
 8001a2a:	2480      	movs	r4, #128	; 0x80
 8001a2c:	4819      	ldr	r0, [pc, #100]	; (8001a94 <__aeabi_dmul+0x3b8>)
 8001a2e:	00e4      	lsls	r4, r4, #3
 8001a30:	4003      	ands	r3, r0
 8001a32:	4454      	add	r4, sl
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <__aeabi_dmul+0x3bc>)
 8001a36:	4284      	cmp	r4, r0
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_dmul+0x360>
 8001a3a:	e727      	b.n	800188c <__aeabi_dmul+0x1b0>
 8001a3c:	075e      	lsls	r6, r3, #29
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	08d2      	lsrs	r2, r2, #3
 8001a42:	0b1f      	lsrs	r7, r3, #12
 8001a44:	0563      	lsls	r3, r4, #21
 8001a46:	4316      	orrs	r6, r2
 8001a48:	0d5b      	lsrs	r3, r3, #21
 8001a4a:	e6b2      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	4699      	mov	r9, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	2704      	movs	r7, #4
 8001a54:	2600      	movs	r6, #0
 8001a56:	469b      	mov	fp, r3
 8001a58:	e664      	b.n	8001724 <__aeabi_dmul+0x48>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	9701      	str	r7, [sp, #4]
 8001a5e:	4681      	mov	r9, r0
 8001a60:	270c      	movs	r7, #12
 8001a62:	469b      	mov	fp, r3
 8001a64:	e65e      	b.n	8001724 <__aeabi_dmul+0x48>
 8001a66:	2201      	movs	r2, #1
 8001a68:	2001      	movs	r0, #1
 8001a6a:	4317      	orrs	r7, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	e676      	b.n	800175e <__aeabi_dmul+0x82>
 8001a70:	2303      	movs	r3, #3
 8001a72:	2003      	movs	r0, #3
 8001a74:	431f      	orrs	r7, r3
 8001a76:	4643      	mov	r3, r8
 8001a78:	e671      	b.n	800175e <__aeabi_dmul+0x82>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	fffffc01 	.word	0xfffffc01
 8001a84:	08009f98 	.word	0x08009f98
 8001a88:	800fffff 	.word	0x800fffff
 8001a8c:	fffffc0d 	.word	0xfffffc0d
 8001a90:	000003ff 	.word	0x000003ff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	000007fe 	.word	0x000007fe
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2780      	movs	r7, #128	; 0x80
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	033f      	lsls	r7, r7, #12
 8001aa4:	2600      	movs	r6, #0
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <__aeabi_dmul+0x4d8>)
 8001aa8:	e683      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001aaa:	9b01      	ldr	r3, [sp, #4]
 8001aac:	0032      	movs	r2, r6
 8001aae:	46a4      	mov	ip, r4
 8001ab0:	4658      	mov	r0, fp
 8001ab2:	e670      	b.n	8001796 <__aeabi_dmul+0xba>
 8001ab4:	46ac      	mov	ip, r5
 8001ab6:	e66e      	b.n	8001796 <__aeabi_dmul+0xba>
 8001ab8:	2780      	movs	r7, #128	; 0x80
 8001aba:	9901      	ldr	r1, [sp, #4]
 8001abc:	033f      	lsls	r7, r7, #12
 8001abe:	4239      	tst	r1, r7
 8001ac0:	d02d      	beq.n	8001b1e <__aeabi_dmul+0x442>
 8001ac2:	423b      	tst	r3, r7
 8001ac4:	d12b      	bne.n	8001b1e <__aeabi_dmul+0x442>
 8001ac6:	431f      	orrs	r7, r3
 8001ac8:	033f      	lsls	r7, r7, #12
 8001aca:	0b3f      	lsrs	r7, r7, #12
 8001acc:	9500      	str	r5, [sp, #0]
 8001ace:	0016      	movs	r6, r2
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <__aeabi_dmul+0x4d8>)
 8001ad2:	e66e      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	1b2d      	subs	r5, r5, r4
 8001ad8:	2d38      	cmp	r5, #56	; 0x38
 8001ada:	dd00      	ble.n	8001ade <__aeabi_dmul+0x402>
 8001adc:	e666      	b.n	80017ac <__aeabi_dmul+0xd0>
 8001ade:	2d1f      	cmp	r5, #31
 8001ae0:	dc40      	bgt.n	8001b64 <__aeabi_dmul+0x488>
 8001ae2:	4835      	ldr	r0, [pc, #212]	; (8001bb8 <__aeabi_dmul+0x4dc>)
 8001ae4:	001c      	movs	r4, r3
 8001ae6:	4450      	add	r0, sl
 8001ae8:	0016      	movs	r6, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	4084      	lsls	r4, r0
 8001aee:	40ee      	lsrs	r6, r5
 8001af0:	1e50      	subs	r0, r2, #1
 8001af2:	4182      	sbcs	r2, r0
 8001af4:	4334      	orrs	r4, r6
 8001af6:	4314      	orrs	r4, r2
 8001af8:	40eb      	lsrs	r3, r5
 8001afa:	0762      	lsls	r2, r4, #29
 8001afc:	d009      	beq.n	8001b12 <__aeabi_dmul+0x436>
 8001afe:	220f      	movs	r2, #15
 8001b00:	4022      	ands	r2, r4
 8001b02:	2a04      	cmp	r2, #4
 8001b04:	d005      	beq.n	8001b12 <__aeabi_dmul+0x436>
 8001b06:	0022      	movs	r2, r4
 8001b08:	1d14      	adds	r4, r2, #4
 8001b0a:	4294      	cmp	r4, r2
 8001b0c:	4180      	sbcs	r0, r0
 8001b0e:	4240      	negs	r0, r0
 8001b10:	181b      	adds	r3, r3, r0
 8001b12:	021a      	lsls	r2, r3, #8
 8001b14:	d53e      	bpl.n	8001b94 <__aeabi_dmul+0x4b8>
 8001b16:	2301      	movs	r3, #1
 8001b18:	2700      	movs	r7, #0
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	e649      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001b1e:	2780      	movs	r7, #128	; 0x80
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	033f      	lsls	r7, r7, #12
 8001b24:	431f      	orrs	r7, r3
 8001b26:	033f      	lsls	r7, r7, #12
 8001b28:	0b3f      	lsrs	r7, r7, #12
 8001b2a:	9400      	str	r4, [sp, #0]
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <__aeabi_dmul+0x4d8>)
 8001b2e:	e640      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001b30:	0003      	movs	r3, r0
 8001b32:	465a      	mov	r2, fp
 8001b34:	3b28      	subs	r3, #40	; 0x28
 8001b36:	409a      	lsls	r2, r3
 8001b38:	2600      	movs	r6, #0
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	e66d      	b.n	800181a <__aeabi_dmul+0x13e>
 8001b3e:	4658      	mov	r0, fp
 8001b40:	f000 fd1a 	bl	8002578 <__clzsi2>
 8001b44:	3020      	adds	r0, #32
 8001b46:	e657      	b.n	80017f8 <__aeabi_dmul+0x11c>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	3b28      	subs	r3, #40	; 0x28
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	e693      	b.n	800187e <__aeabi_dmul+0x1a2>
 8001b56:	4650      	mov	r0, sl
 8001b58:	f000 fd0e 	bl	8002578 <__clzsi2>
 8001b5c:	3020      	adds	r0, #32
 8001b5e:	e67b      	b.n	8001858 <__aeabi_dmul+0x17c>
 8001b60:	46ca      	mov	sl, r9
 8001b62:	e750      	b.n	8001a06 <__aeabi_dmul+0x32a>
 8001b64:	201f      	movs	r0, #31
 8001b66:	001e      	movs	r6, r3
 8001b68:	4240      	negs	r0, r0
 8001b6a:	1b04      	subs	r4, r0, r4
 8001b6c:	40e6      	lsrs	r6, r4
 8001b6e:	2d20      	cmp	r5, #32
 8001b70:	d003      	beq.n	8001b7a <__aeabi_dmul+0x49e>
 8001b72:	4c12      	ldr	r4, [pc, #72]	; (8001bbc <__aeabi_dmul+0x4e0>)
 8001b74:	4454      	add	r4, sl
 8001b76:	40a3      	lsls	r3, r4
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	1e50      	subs	r0, r2, #1
 8001b7c:	4182      	sbcs	r2, r0
 8001b7e:	4332      	orrs	r2, r6
 8001b80:	2607      	movs	r6, #7
 8001b82:	2700      	movs	r7, #0
 8001b84:	4016      	ands	r6, r2
 8001b86:	d009      	beq.n	8001b9c <__aeabi_dmul+0x4c0>
 8001b88:	200f      	movs	r0, #15
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	4010      	ands	r0, r2
 8001b8e:	0014      	movs	r4, r2
 8001b90:	2804      	cmp	r0, #4
 8001b92:	d1b9      	bne.n	8001b08 <__aeabi_dmul+0x42c>
 8001b94:	0022      	movs	r2, r4
 8001b96:	075e      	lsls	r6, r3, #29
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	0b1f      	lsrs	r7, r3, #12
 8001b9c:	08d2      	lsrs	r2, r2, #3
 8001b9e:	4316      	orrs	r6, r2
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e606      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001ba4:	2780      	movs	r7, #128	; 0x80
 8001ba6:	033f      	lsls	r7, r7, #12
 8001ba8:	431f      	orrs	r7, r3
 8001baa:	033f      	lsls	r7, r7, #12
 8001bac:	0b3f      	lsrs	r7, r7, #12
 8001bae:	0016      	movs	r6, r2
 8001bb0:	4b00      	ldr	r3, [pc, #0]	; (8001bb4 <__aeabi_dmul+0x4d8>)
 8001bb2:	e5fe      	b.n	80017b2 <__aeabi_dmul+0xd6>
 8001bb4:	000007ff 	.word	0x000007ff
 8001bb8:	0000041e 	.word	0x0000041e
 8001bbc:	0000043e 	.word	0x0000043e

08001bc0 <__aeabi_dsub>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	4657      	mov	r7, sl
 8001bc4:	464e      	mov	r6, r9
 8001bc6:	4645      	mov	r5, r8
 8001bc8:	46de      	mov	lr, fp
 8001bca:	000c      	movs	r4, r1
 8001bcc:	0309      	lsls	r1, r1, #12
 8001bce:	b5e0      	push	{r5, r6, r7, lr}
 8001bd0:	0a49      	lsrs	r1, r1, #9
 8001bd2:	0f46      	lsrs	r6, r0, #29
 8001bd4:	005f      	lsls	r7, r3, #1
 8001bd6:	4331      	orrs	r1, r6
 8001bd8:	031e      	lsls	r6, r3, #12
 8001bda:	0fdb      	lsrs	r3, r3, #31
 8001bdc:	0a76      	lsrs	r6, r6, #9
 8001bde:	469b      	mov	fp, r3
 8001be0:	0f53      	lsrs	r3, r2, #29
 8001be2:	4333      	orrs	r3, r6
 8001be4:	4ec8      	ldr	r6, [pc, #800]	; (8001f08 <__aeabi_dsub+0x348>)
 8001be6:	0065      	lsls	r5, r4, #1
 8001be8:	00c0      	lsls	r0, r0, #3
 8001bea:	0fe4      	lsrs	r4, r4, #31
 8001bec:	00d2      	lsls	r2, r2, #3
 8001bee:	0d6d      	lsrs	r5, r5, #21
 8001bf0:	46a2      	mov	sl, r4
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0d7f      	lsrs	r7, r7, #21
 8001bf6:	469c      	mov	ip, r3
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	42b7      	cmp	r7, r6
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x40>
 8001bfe:	e0b9      	b.n	8001d74 <__aeabi_dsub+0x1b4>
 8001c00:	465b      	mov	r3, fp
 8001c02:	2601      	movs	r6, #1
 8001c04:	4073      	eors	r3, r6
 8001c06:	469b      	mov	fp, r3
 8001c08:	1bee      	subs	r6, r5, r7
 8001c0a:	45a3      	cmp	fp, r4
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x50>
 8001c0e:	e083      	b.n	8001d18 <__aeabi_dsub+0x158>
 8001c10:	2e00      	cmp	r6, #0
 8001c12:	dd63      	ble.n	8001cdc <__aeabi_dsub+0x11c>
 8001c14:	2f00      	cmp	r7, #0
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dsub+0x5a>
 8001c18:	e0b1      	b.n	8001d7e <__aeabi_dsub+0x1be>
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x62>
 8001c20:	e123      	b.n	8001e6a <__aeabi_dsub+0x2aa>
 8001c22:	1e73      	subs	r3, r6, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x6a>
 8001c28:	e1ba      	b.n	8001fa0 <__aeabi_dsub+0x3e0>
 8001c2a:	1a86      	subs	r6, r0, r2
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	42b0      	cmp	r0, r6
 8001c30:	4180      	sbcs	r0, r0
 8001c32:	2501      	movs	r5, #1
 8001c34:	1ac9      	subs	r1, r1, r3
 8001c36:	4240      	negs	r0, r0
 8001c38:	1a09      	subs	r1, r1, r0
 8001c3a:	020b      	lsls	r3, r1, #8
 8001c3c:	d400      	bmi.n	8001c40 <__aeabi_dsub+0x80>
 8001c3e:	e147      	b.n	8001ed0 <__aeabi_dsub+0x310>
 8001c40:	0249      	lsls	r1, r1, #9
 8001c42:	0a4b      	lsrs	r3, r1, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4643      	mov	r3, r8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x8e>
 8001c4c:	e189      	b.n	8001f62 <__aeabi_dsub+0x3a2>
 8001c4e:	4640      	mov	r0, r8
 8001c50:	f000 fc92 	bl	8002578 <__clzsi2>
 8001c54:	0003      	movs	r3, r0
 8001c56:	3b08      	subs	r3, #8
 8001c58:	2b1f      	cmp	r3, #31
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dsub+0x9e>
 8001c5c:	e17c      	b.n	8001f58 <__aeabi_dsub+0x398>
 8001c5e:	2220      	movs	r2, #32
 8001c60:	0030      	movs	r0, r6
 8001c62:	1ad2      	subs	r2, r2, r3
 8001c64:	4641      	mov	r1, r8
 8001c66:	40d0      	lsrs	r0, r2
 8001c68:	4099      	lsls	r1, r3
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	409e      	lsls	r6, r3
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	429d      	cmp	r5, r3
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dsub+0xb6>
 8001c74:	e16a      	b.n	8001f4c <__aeabi_dsub+0x38c>
 8001c76:	1b5d      	subs	r5, r3, r5
 8001c78:	1c6b      	adds	r3, r5, #1
 8001c7a:	2b1f      	cmp	r3, #31
 8001c7c:	dd00      	ble.n	8001c80 <__aeabi_dsub+0xc0>
 8001c7e:	e194      	b.n	8001faa <__aeabi_dsub+0x3ea>
 8001c80:	2120      	movs	r1, #32
 8001c82:	0010      	movs	r0, r2
 8001c84:	0035      	movs	r5, r6
 8001c86:	1ac9      	subs	r1, r1, r3
 8001c88:	408e      	lsls	r6, r1
 8001c8a:	40da      	lsrs	r2, r3
 8001c8c:	4088      	lsls	r0, r1
 8001c8e:	40dd      	lsrs	r5, r3
 8001c90:	1e71      	subs	r1, r6, #1
 8001c92:	418e      	sbcs	r6, r1
 8001c94:	0011      	movs	r1, r2
 8001c96:	2207      	movs	r2, #7
 8001c98:	4328      	orrs	r0, r5
 8001c9a:	2500      	movs	r5, #0
 8001c9c:	4306      	orrs	r6, r0
 8001c9e:	4032      	ands	r2, r6
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d009      	beq.n	8001cb8 <__aeabi_dsub+0xf8>
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	4033      	ands	r3, r6
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d005      	beq.n	8001cb8 <__aeabi_dsub+0xf8>
 8001cac:	1d33      	adds	r3, r6, #4
 8001cae:	42b3      	cmp	r3, r6
 8001cb0:	41b6      	sbcs	r6, r6
 8001cb2:	4276      	negs	r6, r6
 8001cb4:	1989      	adds	r1, r1, r6
 8001cb6:	001e      	movs	r6, r3
 8001cb8:	020b      	lsls	r3, r1, #8
 8001cba:	d400      	bmi.n	8001cbe <__aeabi_dsub+0xfe>
 8001cbc:	e23d      	b.n	800213a <__aeabi_dsub+0x57a>
 8001cbe:	1c6a      	adds	r2, r5, #1
 8001cc0:	4b91      	ldr	r3, [pc, #580]	; (8001f08 <__aeabi_dsub+0x348>)
 8001cc2:	0555      	lsls	r5, r2, #21
 8001cc4:	0d6d      	lsrs	r5, r5, #21
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x10c>
 8001cca:	e119      	b.n	8001f00 <__aeabi_dsub+0x340>
 8001ccc:	4a8f      	ldr	r2, [pc, #572]	; (8001f0c <__aeabi_dsub+0x34c>)
 8001cce:	08f6      	lsrs	r6, r6, #3
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	0757      	lsls	r7, r2, #29
 8001cd4:	0252      	lsls	r2, r2, #9
 8001cd6:	4337      	orrs	r7, r6
 8001cd8:	0b12      	lsrs	r2, r2, #12
 8001cda:	e09b      	b.n	8001e14 <__aeabi_dsub+0x254>
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x122>
 8001ce0:	e0c5      	b.n	8001e6e <__aeabi_dsub+0x2ae>
 8001ce2:	1c6e      	adds	r6, r5, #1
 8001ce4:	0576      	lsls	r6, r6, #21
 8001ce6:	0d76      	lsrs	r6, r6, #21
 8001ce8:	2e01      	cmp	r6, #1
 8001cea:	dc00      	bgt.n	8001cee <__aeabi_dsub+0x12e>
 8001cec:	e148      	b.n	8001f80 <__aeabi_dsub+0x3c0>
 8001cee:	4667      	mov	r7, ip
 8001cf0:	1a86      	subs	r6, r0, r2
 8001cf2:	1bcb      	subs	r3, r1, r7
 8001cf4:	42b0      	cmp	r0, r6
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	427f      	negs	r7, r7
 8001cfa:	46b8      	mov	r8, r7
 8001cfc:	001f      	movs	r7, r3
 8001cfe:	4643      	mov	r3, r8
 8001d00:	1aff      	subs	r7, r7, r3
 8001d02:	003b      	movs	r3, r7
 8001d04:	46b8      	mov	r8, r7
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	d500      	bpl.n	8001d0c <__aeabi_dsub+0x14c>
 8001d0a:	e15f      	b.n	8001fcc <__aeabi_dsub+0x40c>
 8001d0c:	4337      	orrs	r7, r6
 8001d0e:	d19a      	bne.n	8001c46 <__aeabi_dsub+0x86>
 8001d10:	2200      	movs	r2, #0
 8001d12:	2400      	movs	r4, #0
 8001d14:	2500      	movs	r5, #0
 8001d16:	e079      	b.n	8001e0c <__aeabi_dsub+0x24c>
 8001d18:	2e00      	cmp	r6, #0
 8001d1a:	dc00      	bgt.n	8001d1e <__aeabi_dsub+0x15e>
 8001d1c:	e0fa      	b.n	8001f14 <__aeabi_dsub+0x354>
 8001d1e:	2f00      	cmp	r7, #0
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x164>
 8001d22:	e08d      	b.n	8001e40 <__aeabi_dsub+0x280>
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <__aeabi_dsub+0x348>)
 8001d26:	429d      	cmp	r5, r3
 8001d28:	d067      	beq.n	8001dfa <__aeabi_dsub+0x23a>
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	4667      	mov	r7, ip
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	431f      	orrs	r7, r3
 8001d32:	46bc      	mov	ip, r7
 8001d34:	2e38      	cmp	r6, #56	; 0x38
 8001d36:	dc00      	bgt.n	8001d3a <__aeabi_dsub+0x17a>
 8001d38:	e152      	b.n	8001fe0 <__aeabi_dsub+0x420>
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	1e5a      	subs	r2, r3, #1
 8001d40:	4193      	sbcs	r3, r2
 8001d42:	181e      	adds	r6, r3, r0
 8001d44:	4286      	cmp	r6, r0
 8001d46:	4180      	sbcs	r0, r0
 8001d48:	4240      	negs	r0, r0
 8001d4a:	1809      	adds	r1, r1, r0
 8001d4c:	020b      	lsls	r3, r1, #8
 8001d4e:	d400      	bmi.n	8001d52 <__aeabi_dsub+0x192>
 8001d50:	e0be      	b.n	8001ed0 <__aeabi_dsub+0x310>
 8001d52:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <__aeabi_dsub+0x348>)
 8001d54:	3501      	adds	r5, #1
 8001d56:	429d      	cmp	r5, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x19c>
 8001d5a:	e0d2      	b.n	8001f02 <__aeabi_dsub+0x342>
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <__aeabi_dsub+0x34c>)
 8001d5e:	0873      	lsrs	r3, r6, #1
 8001d60:	400a      	ands	r2, r1
 8001d62:	2101      	movs	r1, #1
 8001d64:	400e      	ands	r6, r1
 8001d66:	431e      	orrs	r6, r3
 8001d68:	0851      	lsrs	r1, r2, #1
 8001d6a:	07d3      	lsls	r3, r2, #31
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	4032      	ands	r2, r6
 8001d72:	e795      	b.n	8001ca0 <__aeabi_dsub+0xe0>
 8001d74:	001e      	movs	r6, r3
 8001d76:	4316      	orrs	r6, r2
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x1bc>
 8001d7a:	e745      	b.n	8001c08 <__aeabi_dsub+0x48>
 8001d7c:	e740      	b.n	8001c00 <__aeabi_dsub+0x40>
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <__aeabi_dsub+0x348>)
 8001d80:	429d      	cmp	r5, r3
 8001d82:	d03a      	beq.n	8001dfa <__aeabi_dsub+0x23a>
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	4667      	mov	r7, ip
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431f      	orrs	r7, r3
 8001d8c:	46bc      	mov	ip, r7
 8001d8e:	2e38      	cmp	r6, #56	; 0x38
 8001d90:	dd00      	ble.n	8001d94 <__aeabi_dsub+0x1d4>
 8001d92:	e0eb      	b.n	8001f6c <__aeabi_dsub+0x3ac>
 8001d94:	2e1f      	cmp	r6, #31
 8001d96:	dc00      	bgt.n	8001d9a <__aeabi_dsub+0x1da>
 8001d98:	e13a      	b.n	8002010 <__aeabi_dsub+0x450>
 8001d9a:	0033      	movs	r3, r6
 8001d9c:	4667      	mov	r7, ip
 8001d9e:	3b20      	subs	r3, #32
 8001da0:	40df      	lsrs	r7, r3
 8001da2:	003b      	movs	r3, r7
 8001da4:	2e20      	cmp	r6, #32
 8001da6:	d005      	beq.n	8001db4 <__aeabi_dsub+0x1f4>
 8001da8:	2740      	movs	r7, #64	; 0x40
 8001daa:	1bbf      	subs	r7, r7, r6
 8001dac:	4666      	mov	r6, ip
 8001dae:	40be      	lsls	r6, r7
 8001db0:	4332      	orrs	r2, r6
 8001db2:	4690      	mov	r8, r2
 8001db4:	4646      	mov	r6, r8
 8001db6:	1e72      	subs	r2, r6, #1
 8001db8:	4196      	sbcs	r6, r2
 8001dba:	4333      	orrs	r3, r6
 8001dbc:	e0da      	b.n	8001f74 <__aeabi_dsub+0x3b4>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x204>
 8001dc2:	e214      	b.n	80021ee <__aeabi_dsub+0x62e>
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x20c>
 8001dca:	e168      	b.n	800209e <__aeabi_dsub+0x4de>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	074e      	lsls	r6, r1, #29
 8001dd0:	08c0      	lsrs	r0, r0, #3
 8001dd2:	08c9      	lsrs	r1, r1, #3
 8001dd4:	031b      	lsls	r3, r3, #12
 8001dd6:	4306      	orrs	r6, r0
 8001dd8:	4219      	tst	r1, r3
 8001dda:	d008      	beq.n	8001dee <__aeabi_dsub+0x22e>
 8001ddc:	4660      	mov	r0, ip
 8001dde:	08c0      	lsrs	r0, r0, #3
 8001de0:	4218      	tst	r0, r3
 8001de2:	d104      	bne.n	8001dee <__aeabi_dsub+0x22e>
 8001de4:	4663      	mov	r3, ip
 8001de6:	0001      	movs	r1, r0
 8001de8:	08d2      	lsrs	r2, r2, #3
 8001dea:	075e      	lsls	r6, r3, #29
 8001dec:	4316      	orrs	r6, r2
 8001dee:	00f3      	lsls	r3, r6, #3
 8001df0:	4699      	mov	r9, r3
 8001df2:	00c9      	lsls	r1, r1, #3
 8001df4:	0f72      	lsrs	r2, r6, #29
 8001df6:	4d44      	ldr	r5, [pc, #272]	; (8001f08 <__aeabi_dsub+0x348>)
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	08de      	lsrs	r6, r3, #3
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <__aeabi_dsub+0x348>)
 8001e00:	074f      	lsls	r7, r1, #29
 8001e02:	4337      	orrs	r7, r6
 8001e04:	08ca      	lsrs	r2, r1, #3
 8001e06:	429d      	cmp	r5, r3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x24c>
 8001e0a:	e06e      	b.n	8001eea <__aeabi_dsub+0x32a>
 8001e0c:	0312      	lsls	r2, r2, #12
 8001e0e:	056d      	lsls	r5, r5, #21
 8001e10:	0b12      	lsrs	r2, r2, #12
 8001e12:	0d6d      	lsrs	r5, r5, #21
 8001e14:	2100      	movs	r1, #0
 8001e16:	0312      	lsls	r2, r2, #12
 8001e18:	0b13      	lsrs	r3, r2, #12
 8001e1a:	0d0a      	lsrs	r2, r1, #20
 8001e1c:	0512      	lsls	r2, r2, #20
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <__aeabi_dsub+0x350>)
 8001e22:	052d      	lsls	r5, r5, #20
 8001e24:	4013      	ands	r3, r2
 8001e26:	432b      	orrs	r3, r5
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	07e4      	lsls	r4, r4, #31
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	0038      	movs	r0, r7
 8001e32:	0019      	movs	r1, r3
 8001e34:	bc3c      	pop	{r2, r3, r4, r5}
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	46a2      	mov	sl, r4
 8001e3c:	46ab      	mov	fp, r5
 8001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e40:	4663      	mov	r3, ip
 8001e42:	4313      	orrs	r3, r2
 8001e44:	d011      	beq.n	8001e6a <__aeabi_dsub+0x2aa>
 8001e46:	1e73      	subs	r3, r6, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d000      	beq.n	8001e4e <__aeabi_dsub+0x28e>
 8001e4c:	e107      	b.n	800205e <__aeabi_dsub+0x49e>
 8001e4e:	1886      	adds	r6, r0, r2
 8001e50:	4286      	cmp	r6, r0
 8001e52:	4180      	sbcs	r0, r0
 8001e54:	4461      	add	r1, ip
 8001e56:	4240      	negs	r0, r0
 8001e58:	1809      	adds	r1, r1, r0
 8001e5a:	2501      	movs	r5, #1
 8001e5c:	020b      	lsls	r3, r1, #8
 8001e5e:	d537      	bpl.n	8001ed0 <__aeabi_dsub+0x310>
 8001e60:	2502      	movs	r5, #2
 8001e62:	e77b      	b.n	8001d5c <__aeabi_dsub+0x19c>
 8001e64:	003e      	movs	r6, r7
 8001e66:	4661      	mov	r1, ip
 8001e68:	4691      	mov	r9, r2
 8001e6a:	0035      	movs	r5, r6
 8001e6c:	e7c5      	b.n	8001dfa <__aeabi_dsub+0x23a>
 8001e6e:	465c      	mov	r4, fp
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	d000      	beq.n	8001e76 <__aeabi_dsub+0x2b6>
 8001e74:	e0e1      	b.n	800203a <__aeabi_dsub+0x47a>
 8001e76:	000b      	movs	r3, r1
 8001e78:	4303      	orrs	r3, r0
 8001e7a:	d0f3      	beq.n	8001e64 <__aeabi_dsub+0x2a4>
 8001e7c:	1c73      	adds	r3, r6, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2c2>
 8001e80:	e1ac      	b.n	80021dc <__aeabi_dsub+0x61c>
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <__aeabi_dsub+0x348>)
 8001e84:	429f      	cmp	r7, r3
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x2ca>
 8001e88:	e13a      	b.n	8002100 <__aeabi_dsub+0x540>
 8001e8a:	43f3      	mvns	r3, r6
 8001e8c:	2b38      	cmp	r3, #56	; 0x38
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_dsub+0x2d2>
 8001e90:	e16f      	b.n	8002172 <__aeabi_dsub+0x5b2>
 8001e92:	2b1f      	cmp	r3, #31
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dsub+0x2d8>
 8001e96:	e18c      	b.n	80021b2 <__aeabi_dsub+0x5f2>
 8001e98:	2520      	movs	r5, #32
 8001e9a:	000e      	movs	r6, r1
 8001e9c:	1aed      	subs	r5, r5, r3
 8001e9e:	40ae      	lsls	r6, r5
 8001ea0:	46b0      	mov	r8, r6
 8001ea2:	0006      	movs	r6, r0
 8001ea4:	46aa      	mov	sl, r5
 8001ea6:	40de      	lsrs	r6, r3
 8001ea8:	4645      	mov	r5, r8
 8001eaa:	4335      	orrs	r5, r6
 8001eac:	002e      	movs	r6, r5
 8001eae:	4655      	mov	r5, sl
 8001eb0:	40d9      	lsrs	r1, r3
 8001eb2:	40a8      	lsls	r0, r5
 8001eb4:	4663      	mov	r3, ip
 8001eb6:	1e45      	subs	r5, r0, #1
 8001eb8:	41a8      	sbcs	r0, r5
 8001eba:	1a5b      	subs	r3, r3, r1
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	4330      	orrs	r0, r6
 8001ec0:	1a16      	subs	r6, r2, r0
 8001ec2:	42b2      	cmp	r2, r6
 8001ec4:	4192      	sbcs	r2, r2
 8001ec6:	4663      	mov	r3, ip
 8001ec8:	4252      	negs	r2, r2
 8001eca:	1a99      	subs	r1, r3, r2
 8001ecc:	003d      	movs	r5, r7
 8001ece:	e6b4      	b.n	8001c3a <__aeabi_dsub+0x7a>
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4032      	ands	r2, r6
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d000      	beq.n	8001eda <__aeabi_dsub+0x31a>
 8001ed8:	e6e4      	b.n	8001ca4 <__aeabi_dsub+0xe4>
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <__aeabi_dsub+0x348>)
 8001edc:	08f6      	lsrs	r6, r6, #3
 8001ede:	074f      	lsls	r7, r1, #29
 8001ee0:	4337      	orrs	r7, r6
 8001ee2:	08ca      	lsrs	r2, r1, #3
 8001ee4:	429d      	cmp	r5, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x32a>
 8001ee8:	e790      	b.n	8001e0c <__aeabi_dsub+0x24c>
 8001eea:	003b      	movs	r3, r7
 8001eec:	4313      	orrs	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x332>
 8001ef0:	e1a6      	b.n	8002240 <__aeabi_dsub+0x680>
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	031b      	lsls	r3, r3, #12
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	0312      	lsls	r2, r2, #12
 8001efa:	0b12      	lsrs	r2, r2, #12
 8001efc:	4d02      	ldr	r5, [pc, #8]	; (8001f08 <__aeabi_dsub+0x348>)
 8001efe:	e789      	b.n	8001e14 <__aeabi_dsub+0x254>
 8001f00:	0015      	movs	r5, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	2700      	movs	r7, #0
 8001f06:	e785      	b.n	8001e14 <__aeabi_dsub+0x254>
 8001f08:	000007ff 	.word	0x000007ff
 8001f0c:	ff7fffff 	.word	0xff7fffff
 8001f10:	800fffff 	.word	0x800fffff
 8001f14:	2e00      	cmp	r6, #0
 8001f16:	d000      	beq.n	8001f1a <__aeabi_dsub+0x35a>
 8001f18:	e0c7      	b.n	80020aa <__aeabi_dsub+0x4ea>
 8001f1a:	1c6b      	adds	r3, r5, #1
 8001f1c:	055e      	lsls	r6, r3, #21
 8001f1e:	0d76      	lsrs	r6, r6, #21
 8001f20:	2e01      	cmp	r6, #1
 8001f22:	dc00      	bgt.n	8001f26 <__aeabi_dsub+0x366>
 8001f24:	e0f0      	b.n	8002108 <__aeabi_dsub+0x548>
 8001f26:	4dc8      	ldr	r5, [pc, #800]	; (8002248 <__aeabi_dsub+0x688>)
 8001f28:	42ab      	cmp	r3, r5
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x36e>
 8001f2c:	e0b9      	b.n	80020a2 <__aeabi_dsub+0x4e2>
 8001f2e:	1885      	adds	r5, r0, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	4285      	cmp	r5, r0
 8001f34:	4189      	sbcs	r1, r1
 8001f36:	4462      	add	r2, ip
 8001f38:	4249      	negs	r1, r1
 8001f3a:	1851      	adds	r1, r2, r1
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	07ce      	lsls	r6, r1, #31
 8001f40:	086d      	lsrs	r5, r5, #1
 8001f42:	432e      	orrs	r6, r5
 8001f44:	0849      	lsrs	r1, r1, #1
 8001f46:	4032      	ands	r2, r6
 8001f48:	001d      	movs	r5, r3
 8001f4a:	e6a9      	b.n	8001ca0 <__aeabi_dsub+0xe0>
 8001f4c:	49bf      	ldr	r1, [pc, #764]	; (800224c <__aeabi_dsub+0x68c>)
 8001f4e:	1aed      	subs	r5, r5, r3
 8001f50:	4011      	ands	r1, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	4032      	ands	r2, r6
 8001f56:	e6a3      	b.n	8001ca0 <__aeabi_dsub+0xe0>
 8001f58:	0032      	movs	r2, r6
 8001f5a:	3828      	subs	r0, #40	; 0x28
 8001f5c:	4082      	lsls	r2, r0
 8001f5e:	2600      	movs	r6, #0
 8001f60:	e686      	b.n	8001c70 <__aeabi_dsub+0xb0>
 8001f62:	0030      	movs	r0, r6
 8001f64:	f000 fb08 	bl	8002578 <__clzsi2>
 8001f68:	3020      	adds	r0, #32
 8001f6a:	e673      	b.n	8001c54 <__aeabi_dsub+0x94>
 8001f6c:	4663      	mov	r3, ip
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	1e5a      	subs	r2, r3, #1
 8001f72:	4193      	sbcs	r3, r2
 8001f74:	1ac6      	subs	r6, r0, r3
 8001f76:	42b0      	cmp	r0, r6
 8001f78:	4180      	sbcs	r0, r0
 8001f7a:	4240      	negs	r0, r0
 8001f7c:	1a09      	subs	r1, r1, r0
 8001f7e:	e65c      	b.n	8001c3a <__aeabi_dsub+0x7a>
 8001f80:	000e      	movs	r6, r1
 8001f82:	4667      	mov	r7, ip
 8001f84:	4306      	orrs	r6, r0
 8001f86:	4317      	orrs	r7, r2
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	d15e      	bne.n	800204a <__aeabi_dsub+0x48a>
 8001f8c:	2e00      	cmp	r6, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dsub+0x3d2>
 8001f90:	e0f3      	b.n	800217a <__aeabi_dsub+0x5ba>
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x3d8>
 8001f96:	e11e      	b.n	80021d6 <__aeabi_dsub+0x616>
 8001f98:	465c      	mov	r4, fp
 8001f9a:	4661      	mov	r1, ip
 8001f9c:	4691      	mov	r9, r2
 8001f9e:	e72c      	b.n	8001dfa <__aeabi_dsub+0x23a>
 8001fa0:	4fa9      	ldr	r7, [pc, #676]	; (8002248 <__aeabi_dsub+0x688>)
 8001fa2:	42be      	cmp	r6, r7
 8001fa4:	d07b      	beq.n	800209e <__aeabi_dsub+0x4de>
 8001fa6:	001e      	movs	r6, r3
 8001fa8:	e6f1      	b.n	8001d8e <__aeabi_dsub+0x1ce>
 8001faa:	0010      	movs	r0, r2
 8001fac:	3d1f      	subs	r5, #31
 8001fae:	40e8      	lsrs	r0, r5
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d003      	beq.n	8001fbc <__aeabi_dsub+0x3fc>
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	4316      	orrs	r6, r2
 8001fbc:	1e73      	subs	r3, r6, #1
 8001fbe:	419e      	sbcs	r6, r3
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4306      	orrs	r6, r0
 8001fc4:	4032      	ands	r2, r6
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2500      	movs	r5, #0
 8001fca:	e783      	b.n	8001ed4 <__aeabi_dsub+0x314>
 8001fcc:	1a16      	subs	r6, r2, r0
 8001fce:	4663      	mov	r3, ip
 8001fd0:	42b2      	cmp	r2, r6
 8001fd2:	4180      	sbcs	r0, r0
 8001fd4:	1a59      	subs	r1, r3, r1
 8001fd6:	4240      	negs	r0, r0
 8001fd8:	1a0b      	subs	r3, r1, r0
 8001fda:	4698      	mov	r8, r3
 8001fdc:	465c      	mov	r4, fp
 8001fde:	e632      	b.n	8001c46 <__aeabi_dsub+0x86>
 8001fe0:	2e1f      	cmp	r6, #31
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0x426>
 8001fe4:	e0ab      	b.n	800213e <__aeabi_dsub+0x57e>
 8001fe6:	2720      	movs	r7, #32
 8001fe8:	1bbb      	subs	r3, r7, r6
 8001fea:	469a      	mov	sl, r3
 8001fec:	4663      	mov	r3, ip
 8001fee:	4657      	mov	r7, sl
 8001ff0:	40bb      	lsls	r3, r7
 8001ff2:	4699      	mov	r9, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	464f      	mov	r7, r9
 8001ff8:	40f3      	lsrs	r3, r6
 8001ffa:	431f      	orrs	r7, r3
 8001ffc:	003b      	movs	r3, r7
 8001ffe:	4657      	mov	r7, sl
 8002000:	40ba      	lsls	r2, r7
 8002002:	1e57      	subs	r7, r2, #1
 8002004:	41ba      	sbcs	r2, r7
 8002006:	4313      	orrs	r3, r2
 8002008:	4662      	mov	r2, ip
 800200a:	40f2      	lsrs	r2, r6
 800200c:	1889      	adds	r1, r1, r2
 800200e:	e698      	b.n	8001d42 <__aeabi_dsub+0x182>
 8002010:	2720      	movs	r7, #32
 8002012:	1bbb      	subs	r3, r7, r6
 8002014:	469a      	mov	sl, r3
 8002016:	4663      	mov	r3, ip
 8002018:	4657      	mov	r7, sl
 800201a:	40bb      	lsls	r3, r7
 800201c:	4699      	mov	r9, r3
 800201e:	0013      	movs	r3, r2
 8002020:	464f      	mov	r7, r9
 8002022:	40f3      	lsrs	r3, r6
 8002024:	431f      	orrs	r7, r3
 8002026:	003b      	movs	r3, r7
 8002028:	4657      	mov	r7, sl
 800202a:	40ba      	lsls	r2, r7
 800202c:	1e57      	subs	r7, r2, #1
 800202e:	41ba      	sbcs	r2, r7
 8002030:	4313      	orrs	r3, r2
 8002032:	4662      	mov	r2, ip
 8002034:	40f2      	lsrs	r2, r6
 8002036:	1a89      	subs	r1, r1, r2
 8002038:	e79c      	b.n	8001f74 <__aeabi_dsub+0x3b4>
 800203a:	4b83      	ldr	r3, [pc, #524]	; (8002248 <__aeabi_dsub+0x688>)
 800203c:	429f      	cmp	r7, r3
 800203e:	d05f      	beq.n	8002100 <__aeabi_dsub+0x540>
 8002040:	2580      	movs	r5, #128	; 0x80
 8002042:	042d      	lsls	r5, r5, #16
 8002044:	4273      	negs	r3, r6
 8002046:	4329      	orrs	r1, r5
 8002048:	e720      	b.n	8001e8c <__aeabi_dsub+0x2cc>
 800204a:	2e00      	cmp	r6, #0
 800204c:	d10c      	bne.n	8002068 <__aeabi_dsub+0x4a8>
 800204e:	2f00      	cmp	r7, #0
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x494>
 8002052:	e0d0      	b.n	80021f6 <__aeabi_dsub+0x636>
 8002054:	465c      	mov	r4, fp
 8002056:	4661      	mov	r1, ip
 8002058:	4691      	mov	r9, r2
 800205a:	4d7b      	ldr	r5, [pc, #492]	; (8002248 <__aeabi_dsub+0x688>)
 800205c:	e6cd      	b.n	8001dfa <__aeabi_dsub+0x23a>
 800205e:	4f7a      	ldr	r7, [pc, #488]	; (8002248 <__aeabi_dsub+0x688>)
 8002060:	42be      	cmp	r6, r7
 8002062:	d01c      	beq.n	800209e <__aeabi_dsub+0x4de>
 8002064:	001e      	movs	r6, r3
 8002066:	e665      	b.n	8001d34 <__aeabi_dsub+0x174>
 8002068:	2f00      	cmp	r7, #0
 800206a:	d018      	beq.n	800209e <__aeabi_dsub+0x4de>
 800206c:	08c0      	lsrs	r0, r0, #3
 800206e:	074e      	lsls	r6, r1, #29
 8002070:	4306      	orrs	r6, r0
 8002072:	2080      	movs	r0, #128	; 0x80
 8002074:	08c9      	lsrs	r1, r1, #3
 8002076:	0300      	lsls	r0, r0, #12
 8002078:	4201      	tst	r1, r0
 800207a:	d008      	beq.n	800208e <__aeabi_dsub+0x4ce>
 800207c:	4663      	mov	r3, ip
 800207e:	08dc      	lsrs	r4, r3, #3
 8002080:	4204      	tst	r4, r0
 8002082:	d104      	bne.n	800208e <__aeabi_dsub+0x4ce>
 8002084:	0021      	movs	r1, r4
 8002086:	46da      	mov	sl, fp
 8002088:	08d2      	lsrs	r2, r2, #3
 800208a:	075e      	lsls	r6, r3, #29
 800208c:	4316      	orrs	r6, r2
 800208e:	00f3      	lsls	r3, r6, #3
 8002090:	4699      	mov	r9, r3
 8002092:	2401      	movs	r4, #1
 8002094:	4653      	mov	r3, sl
 8002096:	00c9      	lsls	r1, r1, #3
 8002098:	0f72      	lsrs	r2, r6, #29
 800209a:	4311      	orrs	r1, r2
 800209c:	401c      	ands	r4, r3
 800209e:	4d6a      	ldr	r5, [pc, #424]	; (8002248 <__aeabi_dsub+0x688>)
 80020a0:	e6ab      	b.n	8001dfa <__aeabi_dsub+0x23a>
 80020a2:	001d      	movs	r5, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	2700      	movs	r7, #0
 80020a8:	e6b4      	b.n	8001e14 <__aeabi_dsub+0x254>
 80020aa:	2d00      	cmp	r5, #0
 80020ac:	d159      	bne.n	8002162 <__aeabi_dsub+0x5a2>
 80020ae:	000b      	movs	r3, r1
 80020b0:	4303      	orrs	r3, r0
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x4f6>
 80020b4:	e6d6      	b.n	8001e64 <__aeabi_dsub+0x2a4>
 80020b6:	1c73      	adds	r3, r6, #1
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x4fc>
 80020ba:	e0b2      	b.n	8002222 <__aeabi_dsub+0x662>
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <__aeabi_dsub+0x688>)
 80020be:	429f      	cmp	r7, r3
 80020c0:	d01e      	beq.n	8002100 <__aeabi_dsub+0x540>
 80020c2:	43f3      	mvns	r3, r6
 80020c4:	2b38      	cmp	r3, #56	; 0x38
 80020c6:	dc6f      	bgt.n	80021a8 <__aeabi_dsub+0x5e8>
 80020c8:	2b1f      	cmp	r3, #31
 80020ca:	dd00      	ble.n	80020ce <__aeabi_dsub+0x50e>
 80020cc:	e097      	b.n	80021fe <__aeabi_dsub+0x63e>
 80020ce:	2520      	movs	r5, #32
 80020d0:	000e      	movs	r6, r1
 80020d2:	1aed      	subs	r5, r5, r3
 80020d4:	40ae      	lsls	r6, r5
 80020d6:	46b0      	mov	r8, r6
 80020d8:	0006      	movs	r6, r0
 80020da:	46aa      	mov	sl, r5
 80020dc:	40de      	lsrs	r6, r3
 80020de:	4645      	mov	r5, r8
 80020e0:	4335      	orrs	r5, r6
 80020e2:	002e      	movs	r6, r5
 80020e4:	4655      	mov	r5, sl
 80020e6:	40a8      	lsls	r0, r5
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	1e45      	subs	r5, r0, #1
 80020ec:	41a8      	sbcs	r0, r5
 80020ee:	448c      	add	ip, r1
 80020f0:	4306      	orrs	r6, r0
 80020f2:	18b6      	adds	r6, r6, r2
 80020f4:	4296      	cmp	r6, r2
 80020f6:	4192      	sbcs	r2, r2
 80020f8:	4251      	negs	r1, r2
 80020fa:	4461      	add	r1, ip
 80020fc:	003d      	movs	r5, r7
 80020fe:	e625      	b.n	8001d4c <__aeabi_dsub+0x18c>
 8002100:	003d      	movs	r5, r7
 8002102:	4661      	mov	r1, ip
 8002104:	4691      	mov	r9, r2
 8002106:	e678      	b.n	8001dfa <__aeabi_dsub+0x23a>
 8002108:	000b      	movs	r3, r1
 800210a:	4303      	orrs	r3, r0
 800210c:	2d00      	cmp	r5, #0
 800210e:	d000      	beq.n	8002112 <__aeabi_dsub+0x552>
 8002110:	e655      	b.n	8001dbe <__aeabi_dsub+0x1fe>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f5      	beq.n	8002102 <__aeabi_dsub+0x542>
 8002116:	4663      	mov	r3, ip
 8002118:	4313      	orrs	r3, r2
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x55e>
 800211c:	e66d      	b.n	8001dfa <__aeabi_dsub+0x23a>
 800211e:	1886      	adds	r6, r0, r2
 8002120:	4286      	cmp	r6, r0
 8002122:	4180      	sbcs	r0, r0
 8002124:	4461      	add	r1, ip
 8002126:	4240      	negs	r0, r0
 8002128:	1809      	adds	r1, r1, r0
 800212a:	2200      	movs	r2, #0
 800212c:	020b      	lsls	r3, r1, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x572>
 8002130:	e6d0      	b.n	8001ed4 <__aeabi_dsub+0x314>
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <__aeabi_dsub+0x68c>)
 8002134:	3501      	adds	r5, #1
 8002136:	4019      	ands	r1, r3
 8002138:	e5b2      	b.n	8001ca0 <__aeabi_dsub+0xe0>
 800213a:	46b1      	mov	r9, r6
 800213c:	e65d      	b.n	8001dfa <__aeabi_dsub+0x23a>
 800213e:	0033      	movs	r3, r6
 8002140:	4667      	mov	r7, ip
 8002142:	3b20      	subs	r3, #32
 8002144:	40df      	lsrs	r7, r3
 8002146:	003b      	movs	r3, r7
 8002148:	2e20      	cmp	r6, #32
 800214a:	d005      	beq.n	8002158 <__aeabi_dsub+0x598>
 800214c:	2740      	movs	r7, #64	; 0x40
 800214e:	1bbf      	subs	r7, r7, r6
 8002150:	4666      	mov	r6, ip
 8002152:	40be      	lsls	r6, r7
 8002154:	4332      	orrs	r2, r6
 8002156:	4690      	mov	r8, r2
 8002158:	4646      	mov	r6, r8
 800215a:	1e72      	subs	r2, r6, #1
 800215c:	4196      	sbcs	r6, r2
 800215e:	4333      	orrs	r3, r6
 8002160:	e5ef      	b.n	8001d42 <__aeabi_dsub+0x182>
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <__aeabi_dsub+0x688>)
 8002164:	429f      	cmp	r7, r3
 8002166:	d0cb      	beq.n	8002100 <__aeabi_dsub+0x540>
 8002168:	2580      	movs	r5, #128	; 0x80
 800216a:	042d      	lsls	r5, r5, #16
 800216c:	4273      	negs	r3, r6
 800216e:	4329      	orrs	r1, r5
 8002170:	e7a8      	b.n	80020c4 <__aeabi_dsub+0x504>
 8002172:	4308      	orrs	r0, r1
 8002174:	1e41      	subs	r1, r0, #1
 8002176:	4188      	sbcs	r0, r1
 8002178:	e6a2      	b.n	8001ec0 <__aeabi_dsub+0x300>
 800217a:	2f00      	cmp	r7, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x5c0>
 800217e:	e63c      	b.n	8001dfa <__aeabi_dsub+0x23a>
 8002180:	4663      	mov	r3, ip
 8002182:	1a86      	subs	r6, r0, r2
 8002184:	1acf      	subs	r7, r1, r3
 8002186:	42b0      	cmp	r0, r6
 8002188:	419b      	sbcs	r3, r3
 800218a:	425b      	negs	r3, r3
 800218c:	1afb      	subs	r3, r7, r3
 800218e:	4698      	mov	r8, r3
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	d54e      	bpl.n	8002232 <__aeabi_dsub+0x672>
 8002194:	1a16      	subs	r6, r2, r0
 8002196:	4663      	mov	r3, ip
 8002198:	42b2      	cmp	r2, r6
 800219a:	4192      	sbcs	r2, r2
 800219c:	1a59      	subs	r1, r3, r1
 800219e:	4252      	negs	r2, r2
 80021a0:	1a89      	subs	r1, r1, r2
 80021a2:	465c      	mov	r4, fp
 80021a4:	2200      	movs	r2, #0
 80021a6:	e57b      	b.n	8001ca0 <__aeabi_dsub+0xe0>
 80021a8:	4301      	orrs	r1, r0
 80021aa:	000e      	movs	r6, r1
 80021ac:	1e71      	subs	r1, r6, #1
 80021ae:	418e      	sbcs	r6, r1
 80021b0:	e79f      	b.n	80020f2 <__aeabi_dsub+0x532>
 80021b2:	001d      	movs	r5, r3
 80021b4:	000e      	movs	r6, r1
 80021b6:	3d20      	subs	r5, #32
 80021b8:	40ee      	lsrs	r6, r5
 80021ba:	46b0      	mov	r8, r6
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d004      	beq.n	80021ca <__aeabi_dsub+0x60a>
 80021c0:	2540      	movs	r5, #64	; 0x40
 80021c2:	1aeb      	subs	r3, r5, r3
 80021c4:	4099      	lsls	r1, r3
 80021c6:	4308      	orrs	r0, r1
 80021c8:	4681      	mov	r9, r0
 80021ca:	4648      	mov	r0, r9
 80021cc:	4643      	mov	r3, r8
 80021ce:	1e41      	subs	r1, r0, #1
 80021d0:	4188      	sbcs	r0, r1
 80021d2:	4318      	orrs	r0, r3
 80021d4:	e674      	b.n	8001ec0 <__aeabi_dsub+0x300>
 80021d6:	2200      	movs	r2, #0
 80021d8:	2400      	movs	r4, #0
 80021da:	e617      	b.n	8001e0c <__aeabi_dsub+0x24c>
 80021dc:	1a16      	subs	r6, r2, r0
 80021de:	4663      	mov	r3, ip
 80021e0:	42b2      	cmp	r2, r6
 80021e2:	4192      	sbcs	r2, r2
 80021e4:	1a59      	subs	r1, r3, r1
 80021e6:	4252      	negs	r2, r2
 80021e8:	1a89      	subs	r1, r1, r2
 80021ea:	003d      	movs	r5, r7
 80021ec:	e525      	b.n	8001c3a <__aeabi_dsub+0x7a>
 80021ee:	4661      	mov	r1, ip
 80021f0:	4691      	mov	r9, r2
 80021f2:	4d15      	ldr	r5, [pc, #84]	; (8002248 <__aeabi_dsub+0x688>)
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x23a>
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	2400      	movs	r4, #0
 80021fa:	0312      	lsls	r2, r2, #12
 80021fc:	e679      	b.n	8001ef2 <__aeabi_dsub+0x332>
 80021fe:	001d      	movs	r5, r3
 8002200:	000e      	movs	r6, r1
 8002202:	3d20      	subs	r5, #32
 8002204:	40ee      	lsrs	r6, r5
 8002206:	46b0      	mov	r8, r6
 8002208:	2b20      	cmp	r3, #32
 800220a:	d004      	beq.n	8002216 <__aeabi_dsub+0x656>
 800220c:	2540      	movs	r5, #64	; 0x40
 800220e:	1aeb      	subs	r3, r5, r3
 8002210:	4099      	lsls	r1, r3
 8002212:	4308      	orrs	r0, r1
 8002214:	4681      	mov	r9, r0
 8002216:	464e      	mov	r6, r9
 8002218:	4643      	mov	r3, r8
 800221a:	1e71      	subs	r1, r6, #1
 800221c:	418e      	sbcs	r6, r1
 800221e:	431e      	orrs	r6, r3
 8002220:	e767      	b.n	80020f2 <__aeabi_dsub+0x532>
 8002222:	1886      	adds	r6, r0, r2
 8002224:	4296      	cmp	r6, r2
 8002226:	419b      	sbcs	r3, r3
 8002228:	4461      	add	r1, ip
 800222a:	425b      	negs	r3, r3
 800222c:	18c9      	adds	r1, r1, r3
 800222e:	003d      	movs	r5, r7
 8002230:	e58c      	b.n	8001d4c <__aeabi_dsub+0x18c>
 8002232:	4647      	mov	r7, r8
 8002234:	4337      	orrs	r7, r6
 8002236:	d0ce      	beq.n	80021d6 <__aeabi_dsub+0x616>
 8002238:	2207      	movs	r2, #7
 800223a:	4641      	mov	r1, r8
 800223c:	4032      	ands	r2, r6
 800223e:	e649      	b.n	8001ed4 <__aeabi_dsub+0x314>
 8002240:	2700      	movs	r7, #0
 8002242:	003a      	movs	r2, r7
 8002244:	e5e6      	b.n	8001e14 <__aeabi_dsub+0x254>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	000007ff 	.word	0x000007ff
 800224c:	ff7fffff 	.word	0xff7fffff

08002250 <__aeabi_dcmpun>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	4e0c      	ldr	r6, [pc, #48]	; (8002284 <__aeabi_dcmpun+0x34>)
 8002254:	030d      	lsls	r5, r1, #12
 8002256:	031c      	lsls	r4, r3, #12
 8002258:	0049      	lsls	r1, r1, #1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	0b2d      	lsrs	r5, r5, #12
 800225e:	0d49      	lsrs	r1, r1, #21
 8002260:	0b24      	lsrs	r4, r4, #12
 8002262:	0d5b      	lsrs	r3, r3, #21
 8002264:	42b1      	cmp	r1, r6
 8002266:	d008      	beq.n	800227a <__aeabi_dcmpun+0x2a>
 8002268:	4906      	ldr	r1, [pc, #24]	; (8002284 <__aeabi_dcmpun+0x34>)
 800226a:	2000      	movs	r0, #0
 800226c:	428b      	cmp	r3, r1
 800226e:	d103      	bne.n	8002278 <__aeabi_dcmpun+0x28>
 8002270:	4314      	orrs	r4, r2
 8002272:	0020      	movs	r0, r4
 8002274:	1e44      	subs	r4, r0, #1
 8002276:	41a0      	sbcs	r0, r4
 8002278:	bd70      	pop	{r4, r5, r6, pc}
 800227a:	4305      	orrs	r5, r0
 800227c:	2001      	movs	r0, #1
 800227e:	2d00      	cmp	r5, #0
 8002280:	d1fa      	bne.n	8002278 <__aeabi_dcmpun+0x28>
 8002282:	e7f1      	b.n	8002268 <__aeabi_dcmpun+0x18>
 8002284:	000007ff 	.word	0x000007ff

08002288 <__aeabi_d2iz>:
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	4d14      	ldr	r5, [pc, #80]	; (80022dc <__aeabi_d2iz+0x54>)
 800228c:	030a      	lsls	r2, r1, #12
 800228e:	004b      	lsls	r3, r1, #1
 8002290:	0b12      	lsrs	r2, r2, #12
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	0fc9      	lsrs	r1, r1, #31
 8002296:	2400      	movs	r4, #0
 8002298:	42ab      	cmp	r3, r5
 800229a:	dd11      	ble.n	80022c0 <__aeabi_d2iz+0x38>
 800229c:	4c10      	ldr	r4, [pc, #64]	; (80022e0 <__aeabi_d2iz+0x58>)
 800229e:	42a3      	cmp	r3, r4
 80022a0:	dc10      	bgt.n	80022c4 <__aeabi_d2iz+0x3c>
 80022a2:	2480      	movs	r4, #128	; 0x80
 80022a4:	0364      	lsls	r4, r4, #13
 80022a6:	4322      	orrs	r2, r4
 80022a8:	4c0e      	ldr	r4, [pc, #56]	; (80022e4 <__aeabi_d2iz+0x5c>)
 80022aa:	1ae4      	subs	r4, r4, r3
 80022ac:	2c1f      	cmp	r4, #31
 80022ae:	dd0c      	ble.n	80022ca <__aeabi_d2iz+0x42>
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <__aeabi_d2iz+0x60>)
 80022b2:	1ac3      	subs	r3, r0, r3
 80022b4:	40da      	lsrs	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	425c      	negs	r4, r3
 80022ba:	2900      	cmp	r1, #0
 80022bc:	d100      	bne.n	80022c0 <__aeabi_d2iz+0x38>
 80022be:	001c      	movs	r4, r3
 80022c0:	0020      	movs	r0, r4
 80022c2:	bd30      	pop	{r4, r5, pc}
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <__aeabi_d2iz+0x64>)
 80022c6:	18cc      	adds	r4, r1, r3
 80022c8:	e7fa      	b.n	80022c0 <__aeabi_d2iz+0x38>
 80022ca:	4d09      	ldr	r5, [pc, #36]	; (80022f0 <__aeabi_d2iz+0x68>)
 80022cc:	40e0      	lsrs	r0, r4
 80022ce:	46ac      	mov	ip, r5
 80022d0:	4463      	add	r3, ip
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	4303      	orrs	r3, r0
 80022d8:	e7ee      	b.n	80022b8 <__aeabi_d2iz+0x30>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000003fe 	.word	0x000003fe
 80022e0:	0000041d 	.word	0x0000041d
 80022e4:	00000433 	.word	0x00000433
 80022e8:	00000413 	.word	0x00000413
 80022ec:	7fffffff 	.word	0x7fffffff
 80022f0:	fffffbed 	.word	0xfffffbed

080022f4 <__aeabi_i2d>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d02d      	beq.n	8002356 <__aeabi_i2d+0x62>
 80022fa:	17c3      	asrs	r3, r0, #31
 80022fc:	18c5      	adds	r5, r0, r3
 80022fe:	405d      	eors	r5, r3
 8002300:	0fc4      	lsrs	r4, r0, #31
 8002302:	0028      	movs	r0, r5
 8002304:	f000 f938 	bl	8002578 <__clzsi2>
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <__aeabi_i2d+0x6c>)
 800230a:	1a1b      	subs	r3, r3, r0
 800230c:	055b      	lsls	r3, r3, #21
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	280a      	cmp	r0, #10
 8002312:	dd15      	ble.n	8002340 <__aeabi_i2d+0x4c>
 8002314:	380b      	subs	r0, #11
 8002316:	4085      	lsls	r5, r0
 8002318:	2200      	movs	r2, #0
 800231a:	032d      	lsls	r5, r5, #12
 800231c:	0b2d      	lsrs	r5, r5, #12
 800231e:	2100      	movs	r1, #0
 8002320:	0010      	movs	r0, r2
 8002322:	032d      	lsls	r5, r5, #12
 8002324:	0d0a      	lsrs	r2, r1, #20
 8002326:	0b2d      	lsrs	r5, r5, #12
 8002328:	0512      	lsls	r2, r2, #20
 800232a:	432a      	orrs	r2, r5
 800232c:	4d0d      	ldr	r5, [pc, #52]	; (8002364 <__aeabi_i2d+0x70>)
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	402a      	ands	r2, r5
 8002332:	4313      	orrs	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	07e4      	lsls	r4, r4, #31
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	4323      	orrs	r3, r4
 800233c:	0019      	movs	r1, r3
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	0002      	movs	r2, r0
 8002342:	0029      	movs	r1, r5
 8002344:	3215      	adds	r2, #21
 8002346:	4091      	lsls	r1, r2
 8002348:	000a      	movs	r2, r1
 800234a:	210b      	movs	r1, #11
 800234c:	1a08      	subs	r0, r1, r0
 800234e:	40c5      	lsrs	r5, r0
 8002350:	032d      	lsls	r5, r5, #12
 8002352:	0b2d      	lsrs	r5, r5, #12
 8002354:	e7e3      	b.n	800231e <__aeabi_i2d+0x2a>
 8002356:	2400      	movs	r4, #0
 8002358:	2300      	movs	r3, #0
 800235a:	2500      	movs	r5, #0
 800235c:	2200      	movs	r2, #0
 800235e:	e7de      	b.n	800231e <__aeabi_i2d+0x2a>
 8002360:	0000041e 	.word	0x0000041e
 8002364:	800fffff 	.word	0x800fffff

08002368 <__aeabi_ui2d>:
 8002368:	b510      	push	{r4, lr}
 800236a:	1e04      	subs	r4, r0, #0
 800236c:	d025      	beq.n	80023ba <__aeabi_ui2d+0x52>
 800236e:	f000 f903 	bl	8002578 <__clzsi2>
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <__aeabi_ui2d+0x5c>)
 8002374:	1a1b      	subs	r3, r3, r0
 8002376:	055b      	lsls	r3, r3, #21
 8002378:	0d5b      	lsrs	r3, r3, #21
 800237a:	280a      	cmp	r0, #10
 800237c:	dd12      	ble.n	80023a4 <__aeabi_ui2d+0x3c>
 800237e:	380b      	subs	r0, #11
 8002380:	4084      	lsls	r4, r0
 8002382:	2200      	movs	r2, #0
 8002384:	0324      	lsls	r4, r4, #12
 8002386:	0b24      	lsrs	r4, r4, #12
 8002388:	2100      	movs	r1, #0
 800238a:	0010      	movs	r0, r2
 800238c:	0324      	lsls	r4, r4, #12
 800238e:	0d0a      	lsrs	r2, r1, #20
 8002390:	0b24      	lsrs	r4, r4, #12
 8002392:	0512      	lsls	r2, r2, #20
 8002394:	4322      	orrs	r2, r4
 8002396:	4c0c      	ldr	r4, [pc, #48]	; (80023c8 <__aeabi_ui2d+0x60>)
 8002398:	051b      	lsls	r3, r3, #20
 800239a:	4022      	ands	r2, r4
 800239c:	4313      	orrs	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	0859      	lsrs	r1, r3, #1
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	0002      	movs	r2, r0
 80023a6:	0021      	movs	r1, r4
 80023a8:	3215      	adds	r2, #21
 80023aa:	4091      	lsls	r1, r2
 80023ac:	000a      	movs	r2, r1
 80023ae:	210b      	movs	r1, #11
 80023b0:	1a08      	subs	r0, r1, r0
 80023b2:	40c4      	lsrs	r4, r0
 80023b4:	0324      	lsls	r4, r4, #12
 80023b6:	0b24      	lsrs	r4, r4, #12
 80023b8:	e7e6      	b.n	8002388 <__aeabi_ui2d+0x20>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2400      	movs	r4, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	e7e2      	b.n	8002388 <__aeabi_ui2d+0x20>
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	0000041e 	.word	0x0000041e
 80023c8:	800fffff 	.word	0x800fffff

080023cc <__aeabi_f2d>:
 80023cc:	0041      	lsls	r1, r0, #1
 80023ce:	0e09      	lsrs	r1, r1, #24
 80023d0:	1c4b      	adds	r3, r1, #1
 80023d2:	b570      	push	{r4, r5, r6, lr}
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	0246      	lsls	r6, r0, #9
 80023d8:	0a75      	lsrs	r5, r6, #9
 80023da:	0fc4      	lsrs	r4, r0, #31
 80023dc:	2b01      	cmp	r3, #1
 80023de:	dd14      	ble.n	800240a <__aeabi_f2d+0x3e>
 80023e0:	23e0      	movs	r3, #224	; 0xe0
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	076d      	lsls	r5, r5, #29
 80023e6:	0b36      	lsrs	r6, r6, #12
 80023e8:	18cb      	adds	r3, r1, r3
 80023ea:	2100      	movs	r1, #0
 80023ec:	0d0a      	lsrs	r2, r1, #20
 80023ee:	0028      	movs	r0, r5
 80023f0:	0512      	lsls	r2, r2, #20
 80023f2:	4d1c      	ldr	r5, [pc, #112]	; (8002464 <__aeabi_f2d+0x98>)
 80023f4:	4332      	orrs	r2, r6
 80023f6:	055b      	lsls	r3, r3, #21
 80023f8:	402a      	ands	r2, r5
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	4313      	orrs	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	07e4      	lsls	r4, r4, #31
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	4323      	orrs	r3, r4
 8002406:	0019      	movs	r1, r3
 8002408:	bd70      	pop	{r4, r5, r6, pc}
 800240a:	2900      	cmp	r1, #0
 800240c:	d114      	bne.n	8002438 <__aeabi_f2d+0x6c>
 800240e:	2d00      	cmp	r5, #0
 8002410:	d01e      	beq.n	8002450 <__aeabi_f2d+0x84>
 8002412:	0028      	movs	r0, r5
 8002414:	f000 f8b0 	bl	8002578 <__clzsi2>
 8002418:	280a      	cmp	r0, #10
 800241a:	dc1c      	bgt.n	8002456 <__aeabi_f2d+0x8a>
 800241c:	230b      	movs	r3, #11
 800241e:	002a      	movs	r2, r5
 8002420:	1a1b      	subs	r3, r3, r0
 8002422:	40da      	lsrs	r2, r3
 8002424:	0003      	movs	r3, r0
 8002426:	3315      	adds	r3, #21
 8002428:	409d      	lsls	r5, r3
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <__aeabi_f2d+0x9c>)
 800242c:	0312      	lsls	r2, r2, #12
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	0b16      	lsrs	r6, r2, #12
 8002434:	0d5b      	lsrs	r3, r3, #21
 8002436:	e7d8      	b.n	80023ea <__aeabi_f2d+0x1e>
 8002438:	2d00      	cmp	r5, #0
 800243a:	d006      	beq.n	800244a <__aeabi_f2d+0x7e>
 800243c:	0b32      	lsrs	r2, r6, #12
 800243e:	2680      	movs	r6, #128	; 0x80
 8002440:	0336      	lsls	r6, r6, #12
 8002442:	076d      	lsls	r5, r5, #29
 8002444:	4316      	orrs	r6, r2
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <__aeabi_f2d+0xa0>)
 8002448:	e7cf      	b.n	80023ea <__aeabi_f2d+0x1e>
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <__aeabi_f2d+0xa0>)
 800244c:	2600      	movs	r6, #0
 800244e:	e7cc      	b.n	80023ea <__aeabi_f2d+0x1e>
 8002450:	2300      	movs	r3, #0
 8002452:	2600      	movs	r6, #0
 8002454:	e7c9      	b.n	80023ea <__aeabi_f2d+0x1e>
 8002456:	0003      	movs	r3, r0
 8002458:	002a      	movs	r2, r5
 800245a:	3b0b      	subs	r3, #11
 800245c:	409a      	lsls	r2, r3
 800245e:	2500      	movs	r5, #0
 8002460:	e7e3      	b.n	800242a <__aeabi_f2d+0x5e>
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	800fffff 	.word	0x800fffff
 8002468:	00000389 	.word	0x00000389
 800246c:	000007ff 	.word	0x000007ff

08002470 <__aeabi_d2f>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	004c      	lsls	r4, r1, #1
 8002474:	0d64      	lsrs	r4, r4, #21
 8002476:	030b      	lsls	r3, r1, #12
 8002478:	1c62      	adds	r2, r4, #1
 800247a:	0a5b      	lsrs	r3, r3, #9
 800247c:	0f46      	lsrs	r6, r0, #29
 800247e:	0552      	lsls	r2, r2, #21
 8002480:	0fc9      	lsrs	r1, r1, #31
 8002482:	431e      	orrs	r6, r3
 8002484:	00c5      	lsls	r5, r0, #3
 8002486:	0d52      	lsrs	r2, r2, #21
 8002488:	2a01      	cmp	r2, #1
 800248a:	dd29      	ble.n	80024e0 <__aeabi_d2f+0x70>
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <__aeabi_d2f+0xfc>)
 800248e:	18e7      	adds	r7, r4, r3
 8002490:	2ffe      	cmp	r7, #254	; 0xfe
 8002492:	dc1c      	bgt.n	80024ce <__aeabi_d2f+0x5e>
 8002494:	2f00      	cmp	r7, #0
 8002496:	dd3b      	ble.n	8002510 <__aeabi_d2f+0xa0>
 8002498:	0180      	lsls	r0, r0, #6
 800249a:	1e43      	subs	r3, r0, #1
 800249c:	4198      	sbcs	r0, r3
 800249e:	2207      	movs	r2, #7
 80024a0:	00f3      	lsls	r3, r6, #3
 80024a2:	0f6d      	lsrs	r5, r5, #29
 80024a4:	4303      	orrs	r3, r0
 80024a6:	432b      	orrs	r3, r5
 80024a8:	401a      	ands	r2, r3
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d004      	beq.n	80024b8 <__aeabi_d2f+0x48>
 80024ae:	220f      	movs	r2, #15
 80024b0:	401a      	ands	r2, r3
 80024b2:	2a04      	cmp	r2, #4
 80024b4:	d000      	beq.n	80024b8 <__aeabi_d2f+0x48>
 80024b6:	3304      	adds	r3, #4
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	04d2      	lsls	r2, r2, #19
 80024bc:	401a      	ands	r2, r3
 80024be:	d024      	beq.n	800250a <__aeabi_d2f+0x9a>
 80024c0:	3701      	adds	r7, #1
 80024c2:	b2fa      	uxtb	r2, r7
 80024c4:	2fff      	cmp	r7, #255	; 0xff
 80024c6:	d002      	beq.n	80024ce <__aeabi_d2f+0x5e>
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	0a58      	lsrs	r0, r3, #9
 80024cc:	e001      	b.n	80024d2 <__aeabi_d2f+0x62>
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	2000      	movs	r0, #0
 80024d2:	0240      	lsls	r0, r0, #9
 80024d4:	05d2      	lsls	r2, r2, #23
 80024d6:	0a40      	lsrs	r0, r0, #9
 80024d8:	07c9      	lsls	r1, r1, #31
 80024da:	4310      	orrs	r0, r2
 80024dc:	4308      	orrs	r0, r1
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e0:	4335      	orrs	r5, r6
 80024e2:	2c00      	cmp	r4, #0
 80024e4:	d104      	bne.n	80024f0 <__aeabi_d2f+0x80>
 80024e6:	2d00      	cmp	r5, #0
 80024e8:	d10a      	bne.n	8002500 <__aeabi_d2f+0x90>
 80024ea:	2200      	movs	r2, #0
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7f0      	b.n	80024d2 <__aeabi_d2f+0x62>
 80024f0:	2d00      	cmp	r5, #0
 80024f2:	d0ec      	beq.n	80024ce <__aeabi_d2f+0x5e>
 80024f4:	2080      	movs	r0, #128	; 0x80
 80024f6:	03c0      	lsls	r0, r0, #15
 80024f8:	4330      	orrs	r0, r6
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	e7e9      	b.n	80024d2 <__aeabi_d2f+0x62>
 80024fe:	2400      	movs	r4, #0
 8002500:	2300      	movs	r3, #0
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	0a58      	lsrs	r0, r3, #9
 8002506:	b2e2      	uxtb	r2, r4
 8002508:	e7e3      	b.n	80024d2 <__aeabi_d2f+0x62>
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	003c      	movs	r4, r7
 800250e:	e7f8      	b.n	8002502 <__aeabi_d2f+0x92>
 8002510:	003b      	movs	r3, r7
 8002512:	3317      	adds	r3, #23
 8002514:	dbf3      	blt.n	80024fe <__aeabi_d2f+0x8e>
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	4333      	orrs	r3, r6
 800251c:	261e      	movs	r6, #30
 800251e:	1bf6      	subs	r6, r6, r7
 8002520:	2e1f      	cmp	r6, #31
 8002522:	dd14      	ble.n	800254e <__aeabi_d2f+0xde>
 8002524:	2202      	movs	r2, #2
 8002526:	4252      	negs	r2, r2
 8002528:	1bd7      	subs	r7, r2, r7
 800252a:	001a      	movs	r2, r3
 800252c:	40fa      	lsrs	r2, r7
 800252e:	0017      	movs	r7, r2
 8002530:	2e20      	cmp	r6, #32
 8002532:	d004      	beq.n	800253e <__aeabi_d2f+0xce>
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <__aeabi_d2f+0x100>)
 8002536:	4694      	mov	ip, r2
 8002538:	4464      	add	r4, ip
 800253a:	40a3      	lsls	r3, r4
 800253c:	431d      	orrs	r5, r3
 800253e:	002b      	movs	r3, r5
 8002540:	1e5d      	subs	r5, r3, #1
 8002542:	41ab      	sbcs	r3, r5
 8002544:	2207      	movs	r2, #7
 8002546:	433b      	orrs	r3, r7
 8002548:	401a      	ands	r2, r3
 800254a:	2700      	movs	r7, #0
 800254c:	e7ad      	b.n	80024aa <__aeabi_d2f+0x3a>
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <__aeabi_d2f+0x104>)
 8002550:	0028      	movs	r0, r5
 8002552:	18a2      	adds	r2, r4, r2
 8002554:	4095      	lsls	r5, r2
 8002556:	4093      	lsls	r3, r2
 8002558:	1e6c      	subs	r4, r5, #1
 800255a:	41a5      	sbcs	r5, r4
 800255c:	40f0      	lsrs	r0, r6
 800255e:	2207      	movs	r2, #7
 8002560:	432b      	orrs	r3, r5
 8002562:	4303      	orrs	r3, r0
 8002564:	401a      	ands	r2, r3
 8002566:	2700      	movs	r7, #0
 8002568:	e79f      	b.n	80024aa <__aeabi_d2f+0x3a>
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	fffffc80 	.word	0xfffffc80
 8002570:	fffffca2 	.word	0xfffffca2
 8002574:	fffffc82 	.word	0xfffffc82

08002578 <__clzsi2>:
 8002578:	211c      	movs	r1, #28
 800257a:	2301      	movs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	4298      	cmp	r0, r3
 8002580:	d301      	bcc.n	8002586 <__clzsi2+0xe>
 8002582:	0c00      	lsrs	r0, r0, #16
 8002584:	3910      	subs	r1, #16
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	4298      	cmp	r0, r3
 800258a:	d301      	bcc.n	8002590 <__clzsi2+0x18>
 800258c:	0a00      	lsrs	r0, r0, #8
 800258e:	3908      	subs	r1, #8
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	4298      	cmp	r0, r3
 8002594:	d301      	bcc.n	800259a <__clzsi2+0x22>
 8002596:	0900      	lsrs	r0, r0, #4
 8002598:	3904      	subs	r1, #4
 800259a:	a202      	add	r2, pc, #8	; (adr r2, 80025a4 <__clzsi2+0x2c>)
 800259c:	5c10      	ldrb	r0, [r2, r0]
 800259e:	1840      	adds	r0, r0, r1
 80025a0:	4770      	bx	lr
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	02020304 	.word	0x02020304
 80025a8:	01010101 	.word	0x01010101
	...

080025b4 <__clzdi2>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d103      	bne.n	80025c2 <__clzdi2+0xe>
 80025ba:	f7ff ffdd 	bl	8002578 <__clzsi2>
 80025be:	3020      	adds	r0, #32
 80025c0:	e002      	b.n	80025c8 <__clzdi2+0x14>
 80025c2:	1c08      	adds	r0, r1, #0
 80025c4:	f7ff ffd8 	bl	8002578 <__clzsi2>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)

080025cc <adxl_write>:
int16_t x,y,z;
float xg, yg, zg;
char x_char[3], y_char[3], z_char[3];

void adxl_write (uint8_t reg, uint8_t value)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	0002      	movs	r2, r0
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	1c0a      	adds	r2, r1, #0
 80025dc:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = reg;
 80025de:	210c      	movs	r1, #12
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
	data[1] = value;
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	1dba      	adds	r2, r7, #6
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit (ADXL345_I2C, adxl_address, (uint8_t *)data, 2, 100);
 80025f0:	187a      	adds	r2, r7, r1
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <adxl_write+0x3c>)
 80025f4:	2364      	movs	r3, #100	; 0x64
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2302      	movs	r3, #2
 80025fa:	21a6      	movs	r1, #166	; 0xa6
 80025fc:	f000 ffbe 	bl	800357c <HAL_I2C_Master_Transmit>
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000234 	.word	0x20000234

0800260c <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af04      	add	r7, sp, #16
 8002612:	0002      	movs	r2, r0
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read (ADXL345_I2C, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <adxl_read_values+0x30>)
 8002620:	2364      	movs	r3, #100	; 0x64
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2306      	movs	r3, #6
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <adxl_read_values+0x34>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	21a6      	movs	r1, #166	; 0xa6
 8002630:	f001 f8ac 	bl	800378c <HAL_I2C_Mem_Read>
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000234 	.word	0x20000234
 8002640:	20000224 	.word	0x20000224

08002644 <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af04      	add	r7, sp, #16
 800264a:	0002      	movs	r2, r0
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read (ADXL345_I2C, adxl_address, reg, 1, &chipid, 1, 100);
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	4807      	ldr	r0, [pc, #28]	; (8002674 <adxl_read_address+0x30>)
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	2301      	movs	r3, #1
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <adxl_read_address+0x34>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	21a6      	movs	r1, #166	; 0xa6
 8002668:	f001 f890 	bl	800378c <HAL_I2C_Mem_Read>
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000234 	.word	0x20000234
 8002678:	200001fc 	.word	0x200001fc

0800267c <adxl_init>:

void adxl_init (void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	adxl_read_address (0x00); // read the DEVID
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff ffdf 	bl	8002644 <adxl_read_address>

	adxl_write (0x31, 0x01);  // data_format range= +- 4g
 8002686:	2101      	movs	r1, #1
 8002688:	2031      	movs	r0, #49	; 0x31
 800268a:	f7ff ff9f 	bl	80025cc <adxl_write>
	adxl_write (0x2d, 0x00);  // reset all bits
 800268e:	2100      	movs	r1, #0
 8002690:	202d      	movs	r0, #45	; 0x2d
 8002692:	f7ff ff9b 	bl	80025cc <adxl_write>
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8002696:	2108      	movs	r1, #8
 8002698:	202d      	movs	r0, #45	; 0x2d
 800269a:	f7ff ff97 	bl	80025cc <adxl_write>

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <adxl_getval>:


void adxl_getval(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0

	adxl_read_values (0x32);
 80026a8:	2032      	movs	r0, #50	; 0x32
 80026aa:	f7ff ffaf 	bl	800260c <adxl_read_values>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <adxl_getval+0x54>)
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <adxl_getval+0x54>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <adxl_getval+0x58>)
 80026c2:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8)|data_rec[2]);
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <adxl_getval+0x54>)
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <adxl_getval+0x54>)
 80026ce:	789b      	ldrb	r3, [r3, #2]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <adxl_getval+0x5c>)
 80026d8:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8)|data_rec[4]);
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <adxl_getval+0x54>)
 80026dc:	795b      	ldrb	r3, [r3, #5]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <adxl_getval+0x54>)
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <adxl_getval+0x60>)
 80026ee:	801a      	strh	r2, [r3, #0]

}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000224 	.word	0x20000224
 80026fc:	20000210 	.word	0x20000210
 8002700:	2000021e 	.word	0x2000021e
 8002704:	2000021c 	.word	0x2000021c

08002708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270e:	240c      	movs	r4, #12
 8002710:	193b      	adds	r3, r7, r4
 8002712:	0018      	movs	r0, r3
 8002714:	2314      	movs	r3, #20
 8002716:	001a      	movs	r2, r3
 8002718:	2100      	movs	r1, #0
 800271a:	f003 f95f 	bl	80059dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002724:	2104      	movs	r1, #4
 8002726:	430a      	orrs	r2, r1
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <MX_GPIO_Init+0x9c>)
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <MX_GPIO_Init+0x9c>)
 800273c:	2120      	movs	r1, #32
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <MX_GPIO_Init+0x9c>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <MX_GPIO_Init+0x9c>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002766:	23a0      	movs	r3, #160	; 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	2200      	movs	r2, #0
 800276c:	2120      	movs	r1, #32
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fe50 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002774:	0021      	movs	r1, r4
 8002776:	187b      	adds	r3, r7, r1
 8002778:	2220      	movs	r2, #32
 800277a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	187b      	adds	r3, r7, r1
 800277e:	2201      	movs	r2, #1
 8002780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2202      	movs	r2, #2
 800278c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800278e:	187a      	adds	r2, r7, r1
 8002790:	23a0      	movs	r3, #160	; 0xa0
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fcd8 	bl	800314c <HAL_GPIO_Init>

}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b009      	add	sp, #36	; 0x24
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	40021000 	.word	0x40021000

080027a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <MX_I2C1_Init+0x74>)
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <MX_I2C1_Init+0x78>)
 80027b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <MX_I2C1_Init+0x74>)
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <MX_I2C1_Init+0x7c>)
 80027b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <MX_I2C1_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <MX_I2C1_Init+0x74>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_I2C1_Init+0x74>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_I2C1_Init+0x74>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_I2C1_Init+0x74>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_I2C1_Init+0x74>)
 80027d8:	2200      	movs	r2, #0
 80027da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_I2C1_Init+0x74>)
 80027de:	2200      	movs	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_I2C1_Init+0x74>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fe33 	bl	8003450 <HAL_I2C_Init>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d001      	beq.n	80027f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027ee:	f000 f97b 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MX_I2C1_Init+0x74>)
 80027f4:	2100      	movs	r1, #0
 80027f6:	0018      	movs	r0, r3
 80027f8:	f001 fad6 	bl	8003da8 <HAL_I2CEx_ConfigAnalogFilter>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d001      	beq.n	8002804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002800:	f000 f972 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <MX_I2C1_Init+0x74>)
 8002806:	2100      	movs	r1, #0
 8002808:	0018      	movs	r0, r3
 800280a:	f001 fb19 	bl	8003e40 <HAL_I2CEx_ConfigDigitalFilter>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 f969 	bl	8002ae8 <Error_Handler>
  }

}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000234 	.word	0x20000234
 8002820:	40005400 	.word	0x40005400
 8002824:	10707dbc 	.word	0x10707dbc

08002828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	2314      	movs	r3, #20
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	0018      	movs	r0, r3
 8002836:	2314      	movs	r3, #20
 8002838:	001a      	movs	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f003 f8ce 	bl	80059dc <memset>
  if(i2cHandle->Instance==I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_I2C_MspInit+0x90>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d131      	bne.n	80028ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_I2C_MspInit+0x94>)
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_I2C_MspInit+0x94>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_I2C_MspInit+0x94>)
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	2114      	movs	r1, #20
 8002864:	187b      	adds	r3, r7, r1
 8002866:	22c0      	movs	r2, #192	; 0xc0
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2212      	movs	r2, #18
 8002870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2201      	movs	r2, #1
 8002876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2206      	movs	r2, #6
 8002882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	187a      	adds	r2, r7, r1
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f000 fc5d 	bl	800314c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_I2C_MspInit+0x94>)
 8002894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_I2C_MspInit+0x94>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0389      	lsls	r1, r1, #14
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_I2C_MspInit+0x94>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	039b      	lsls	r3, r3, #14
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b00a      	add	sp, #40	; 0x28
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	40005400 	.word	0x40005400
 80028bc:	40021000 	.word	0x40021000

080028c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028c6:	f000 facf 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ca:	f000 f895 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ce:	f7ff ff1b 	bl	8002708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028d2:	f000 f9f3 	bl	8002cbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80028d6:	f7ff ff67 	bl	80027a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  adxl_init();
 80028da:	f7ff fecf 	bl	800267c <adxl_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adxl_getval();
 80028de:	f7ff fee1 	bl	80026a4 <adxl_getval>

  xg = x * 0.0078;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <main+0x110>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	5e9b      	ldrsh	r3, [r3, r2]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fd03 	bl	80022f4 <__aeabi_i2d>
 80028ee:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <main+0x114>)
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <main+0x118>)
 80028f2:	f7fe fef3 	bl	80016dc <__aeabi_dmul>
 80028f6:	0003      	movs	r3, r0
 80028f8:	000c      	movs	r4, r1
 80028fa:	0018      	movs	r0, r3
 80028fc:	0021      	movs	r1, r4
 80028fe:	f7ff fdb7 	bl	8002470 <__aeabi_d2f>
 8002902:	1c02      	adds	r2, r0, #0
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <main+0x11c>)
 8002906:	601a      	str	r2, [r3, #0]
  yg = y * 0.0078;
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <main+0x120>)
 800290a:	2200      	movs	r2, #0
 800290c:	5e9b      	ldrsh	r3, [r3, r2]
 800290e:	0018      	movs	r0, r3
 8002910:	f7ff fcf0 	bl	80022f4 <__aeabi_i2d>
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <main+0x114>)
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <main+0x118>)
 8002918:	f7fe fee0 	bl	80016dc <__aeabi_dmul>
 800291c:	0003      	movs	r3, r0
 800291e:	000c      	movs	r4, r1
 8002920:	0018      	movs	r0, r3
 8002922:	0021      	movs	r1, r4
 8002924:	f7ff fda4 	bl	8002470 <__aeabi_d2f>
 8002928:	1c02      	adds	r2, r0, #0
 800292a:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <main+0x124>)
 800292c:	601a      	str	r2, [r3, #0]
  zg = z * 0.0078;
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <main+0x128>)
 8002930:	2200      	movs	r2, #0
 8002932:	5e9b      	ldrsh	r3, [r3, r2]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fcdd 	bl	80022f4 <__aeabi_i2d>
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <main+0x114>)
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <main+0x118>)
 800293e:	f7fe fecd 	bl	80016dc <__aeabi_dmul>
 8002942:	0003      	movs	r3, r0
 8002944:	000c      	movs	r4, r1
 8002946:	0018      	movs	r0, r3
 8002948:	0021      	movs	r1, r4
 800294a:	f7ff fd91 	bl	8002470 <__aeabi_d2f>
 800294e:	1c02      	adds	r2, r0, #0
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <main+0x12c>)
 8002952:	601a      	str	r2, [r3, #0]
  printf( "X:%0.4f,   Y:%0.4f,   Z:%0.4f\r\n", xg,yg,zg);
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <main+0x11c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c18      	adds	r0, r3, #0
 800295a:	f7ff fd37 	bl	80023cc <__aeabi_f2d>
 800295e:	6038      	str	r0, [r7, #0]
 8002960:	6079      	str	r1, [r7, #4]
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <main+0x124>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1c18      	adds	r0, r3, #0
 8002968:	f7ff fd30 	bl	80023cc <__aeabi_f2d>
 800296c:	0004      	movs	r4, r0
 800296e:	000d      	movs	r5, r1
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <main+0x12c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	1c18      	adds	r0, r3, #0
 8002976:	f7ff fd29 	bl	80023cc <__aeabi_f2d>
 800297a:	0002      	movs	r2, r0
 800297c:	000b      	movs	r3, r1
 800297e:	491c      	ldr	r1, [pc, #112]	; (80029f0 <main+0x130>)
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	9303      	str	r3, [sp, #12]
 8002984:	9400      	str	r4, [sp, #0]
 8002986:	9501      	str	r5, [sp, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0008      	movs	r0, r1
 800298e:	f003 fe89 	bl	80066a4 <iprintf>
if(xg>i)
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <main+0x11c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <main+0x134>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c19      	adds	r1, r3, #0
 800299c:	1c10      	adds	r0, r2, #0
 800299e:	f7fd fd9d 	bl	80004dc <__aeabi_fcmpgt>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d007      	beq.n	80029b6 <main+0xf6>

	 {HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80029a6:	23a0      	movs	r3, #160	; 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	2201      	movs	r2, #1
 80029ac:	2120      	movs	r1, #32
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fd30 	bl	8003414 <HAL_GPIO_WritePin>
 80029b4:	e006      	b.n	80029c4 <main+0x104>

	 }
else


{ HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80029b6:	23a0      	movs	r3, #160	; 0xa0
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	2200      	movs	r2, #0
 80029bc:	2120      	movs	r1, #32
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 fd28 	bl	8003414 <HAL_GPIO_WritePin>
}
  HAL_Delay (2000);
 80029c4:	23fa      	movs	r3, #250	; 0xfa
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fad3 	bl	8002f74 <HAL_Delay>
	  adxl_getval();
 80029ce:	e786      	b.n	80028de <main+0x1e>
 80029d0:	20000210 	.word	0x20000210
 80029d4:	8e8a71de 	.word	0x8e8a71de
 80029d8:	3f7ff2e4 	.word	0x3f7ff2e4
 80029dc:	2000022c 	.word	0x2000022c
 80029e0:	2000021e 	.word	0x2000021e
 80029e4:	20000220 	.word	0x20000220
 80029e8:	2000021c 	.word	0x2000021c
 80029ec:	20000218 	.word	0x20000218
 80029f0:	08009f28 	.word	0x08009f28
 80029f4:	20000000 	.word	0x20000000

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b0a1      	sub	sp, #132	; 0x84
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	2448      	movs	r4, #72	; 0x48
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	0018      	movs	r0, r3
 8002a04:	2338      	movs	r3, #56	; 0x38
 8002a06:	001a      	movs	r2, r3
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f002 ffe7 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0e:	2338      	movs	r3, #56	; 0x38
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	0018      	movs	r0, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	001a      	movs	r2, r3
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f002 ffdf 	bl	80059dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	0018      	movs	r0, r3
 8002a22:	2334      	movs	r3, #52	; 0x34
 8002a24:	001a      	movs	r2, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	f002 ffd8 	bl	80059dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	0018      	movs	r0, r3
 8002a32:	f001 fa51 	bl	8003ed8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2202      	movs	r2, #2
 8002a3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a44:	0021      	movs	r1, r4
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2202      	movs	r2, #2
 8002a56:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2208      	movs	r2, #8
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0292      	lsls	r2, r2, #10
 8002a70:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	0492      	lsls	r2, r2, #18
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	0592      	lsls	r2, r2, #22
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f001 fa73 	bl	8003f70 <HAL_RCC_OscConfig>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a8e:	f000 f82b 	bl	8002ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	2138      	movs	r1, #56	; 0x38
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2207      	movs	r2, #7
 8002a98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2102      	movs	r1, #2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f001 fd7d 	bl	80045b0 <HAL_RCC_ClockConfig>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002aba:	f000 f815 	bl	8002ae8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2222      	movs	r2, #34	; 0x22
 8002ac2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f001 ff16 	bl	8004904 <HAL_RCCEx_PeriphCLKConfig>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002adc:	f000 f804 	bl	8002ae8 <Error_Handler>
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b021      	add	sp, #132	; 0x84
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aee:	e7fe      	b.n	8002aee <Error_Handler+0x6>

08002af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_MspInit+0x4c>)
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_MspInit+0x4c>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2201      	movs	r2, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0549      	lsls	r1, r1, #21
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	4013      	ands	r3, r2
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fa42 	bl	8002fb8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f000 f9ea 	bl	8002f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e00a      	b.n	8002b96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b80:	e000      	b.n	8002b84 <_read+0x16>
 8002b82:	bf00      	nop
 8002b84:	0001      	movs	r1, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	b2ca      	uxtb	r2, r1
 8002b8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3301      	adds	r3, #1
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dbf0      	blt.n	8002b80 <_read+0x12>
	}

return len;
 8002b9e:	687b      	ldr	r3, [r7, #4]
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b006      	add	sp, #24
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e009      	b.n	8002bce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	60ba      	str	r2, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f912 	bl	8002dec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dbf1      	blt.n	8002bba <_write+0x12>
	}
	return len;
 8002bd6:	687b      	ldr	r3, [r7, #4]
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b006      	add	sp, #24
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_close>:

int _close(int file)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	return -1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	425b      	negs	r3, r3
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0192      	lsls	r2, r2, #6
 8002c04:	605a      	str	r2, [r3, #4]
	return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_isatty>:

int _isatty(int file)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
	return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	18d3      	adds	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f002 fe8e 	bl	8005988 <__errno>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	425b      	negs	r3, r3
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	18d2      	adds	r2, r2, r3
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <_sbrk+0x64>)
 8002c88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b006      	add	sp, #24
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20009000 	.word	0x20009000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	20000200 	.word	0x20000200
 8002ca0:	20000318 	.word	0x20000318

08002ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <SystemInit+0x14>)
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	0512      	lsls	r2, r2, #20
 8002cae:	609a      	str	r2, [r3, #8]
#endif
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <MX_USART2_UART_Init+0x98>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cc8:	22e1      	movs	r2, #225	; 0xe1
 8002cca:	0252      	lsls	r2, r2, #9
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f001 ffb4 	bl	8004c74 <HAL_UART_Init>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d10:	f7ff feea 	bl	8002ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f002 fd49 	bl	80057b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d22:	f7ff fee1 	bl	8002ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 fd80 	bl	8005830 <HAL_UARTEx_SetRxFifoThreshold>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d34:	f7ff fed8 	bl	8002ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <MX_USART2_UART_Init+0x94>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 fcfe 	bl	800573c <HAL_UARTEx_DisableFifoMode>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d44:	f7ff fed0 	bl	8002ae8 <Error_Handler>
  }

}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	20000280 	.word	0x20000280
 8002d54:	40004400 	.word	0x40004400

08002d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	2314      	movs	r3, #20
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	0018      	movs	r0, r3
 8002d66:	2314      	movs	r3, #20
 8002d68:	001a      	movs	r2, r3
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	f002 fe36 	bl	80059dc <memset>
  if(uartHandle->Instance==USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_UART_MspInit+0x8c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d130      	bne.n	8002ddc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002d80:	2180      	movs	r1, #128	; 0x80
 8002d82:	0289      	lsls	r1, r1, #10
 8002d84:	430a      	orrs	r2, r1
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_UART_MspInit+0x90>)
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002dae:	2114      	movs	r1, #20
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	220c      	movs	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2202      	movs	r2, #2
 8002dba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2201      	movs	r2, #1
 8002dcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	187a      	adds	r2, r7, r1
 8002dd0:	23a0      	movs	r3, #160	; 0xa0
 8002dd2:	05db      	lsls	r3, r3, #23
 8002dd4:	0011      	movs	r1, r2
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f9b8 	bl	800314c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b00a      	add	sp, #40	; 0x28
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40004400 	.word	0x40004400
 8002de8:	40021000 	.word	0x40021000

08002dec <__io_putchar>:
#define  PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <__io_putchar+0x20>)
 8002df6:	1d39      	adds	r1, r7, #4
 8002df8:	4805      	ldr	r0, [pc, #20]	; (8002e10 <__io_putchar+0x24>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f001 ff90 	bl	8004d20 <HAL_UART_Transmit>
return ch;
 8002e00:	687b      	ldr	r3, [r7, #4]
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	0000ffff 	.word	0x0000ffff
 8002e10:	20000280 	.word	0x20000280

08002e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e18:	f7ff ff44 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e1e:	490d      	ldr	r1, [pc, #52]	; (8002e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <LoopForever+0xe>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e34:	4c0a      	ldr	r4, [pc, #40]	; (8002e60 <LoopForever+0x16>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e42:	f002 fda7 	bl	8005994 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e46:	f7ff fd3b 	bl	80028c0 <main>

08002e4a <LoopForever>:

LoopForever:
  b LoopForever
 8002e4a:	e7fe      	b.n	8002e4a <LoopForever>
  ldr   r0, =_estack
 8002e4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e58:	0800a380 	.word	0x0800a380
  ldr r2, =_sbss
 8002e5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002e60:	20000318 	.word	0x20000318

08002e64 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <ADC1_COMP_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_Init+0x3c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_Init+0x3c>)
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	0049      	lsls	r1, r1, #1
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f810 	bl	8002ea8 <HAL_InitTick>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e001      	b.n	8002e98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff fe2c 	bl	8002af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	781b      	ldrb	r3, [r3, #0]
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_InitTick+0x88>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02b      	beq.n	8002f18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_InitTick+0x8c>)
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_InitTick+0x88>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	23fa      	movs	r3, #250	; 0xfa
 8002ecc:	0098      	lsls	r0, r3, #2
 8002ece:	f7fd f92b 	bl	8000128 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7fd f926 	bl	8000128 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f927 	bl	8003132 <HAL_SYSTICK_Config>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d112      	bne.n	8002f0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d80a      	bhi.n	8002f04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f906 	bl	8003108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_InitTick+0x90>)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00d      	b.n	8002f20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e008      	b.n	8002f20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e003      	b.n	8002f20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b005      	add	sp, #20
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	20000004 	.word	0x20000004
 8002f38:	20000008 	.word	0x20000008

08002f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_IncTick+0x1c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	001a      	movs	r2, r3
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x20>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	18d2      	adds	r2, r2, r3
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_IncTick+0x20>)
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	20000310 	.word	0x20000310

08002f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  return uwTick;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_GetTick+0x10>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000310 	.word	0x20000310

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_Delay+0x40>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	001a      	movs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	f7ff ffe0 	bl	8002f60 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	fffff9ff 	.word	0xfffff9ff

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	0002      	movs	r2, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	1dfb      	adds	r3, r7, #7
 8002ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d828      	bhi.n	800304c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <__NVIC_SetPriority+0xd4>)
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b25b      	sxtb	r3, r3
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	33c0      	adds	r3, #192	; 0xc0
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	589b      	ldr	r3, [r3, r2]
 800300a:	1dfa      	adds	r2, r7, #7
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	0011      	movs	r1, r2
 8003010:	2203      	movs	r2, #3
 8003012:	400a      	ands	r2, r1
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	21ff      	movs	r1, #255	; 0xff
 8003018:	4091      	lsls	r1, r2
 800301a:	000a      	movs	r2, r1
 800301c:	43d2      	mvns	r2, r2
 800301e:	401a      	ands	r2, r3
 8003020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	22ff      	movs	r2, #255	; 0xff
 8003028:	401a      	ands	r2, r3
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	0018      	movs	r0, r3
 8003030:	2303      	movs	r3, #3
 8003032:	4003      	ands	r3, r0
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003038:	481f      	ldr	r0, [pc, #124]	; (80030b8 <__NVIC_SetPriority+0xd4>)
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b25b      	sxtb	r3, r3
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	430a      	orrs	r2, r1
 8003044:	33c0      	adds	r3, #192	; 0xc0
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800304a:	e031      	b.n	80030b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <__NVIC_SetPriority+0xd8>)
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	0019      	movs	r1, r3
 8003054:	230f      	movs	r3, #15
 8003056:	400b      	ands	r3, r1
 8003058:	3b08      	subs	r3, #8
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3306      	adds	r3, #6
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	3304      	adds	r3, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1dfa      	adds	r2, r7, #7
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	0011      	movs	r1, r2
 800306c:	2203      	movs	r2, #3
 800306e:	400a      	ands	r2, r1
 8003070:	00d2      	lsls	r2, r2, #3
 8003072:	21ff      	movs	r1, #255	; 0xff
 8003074:	4091      	lsls	r1, r2
 8003076:	000a      	movs	r2, r1
 8003078:	43d2      	mvns	r2, r2
 800307a:	401a      	ands	r2, r3
 800307c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	401a      	ands	r2, r3
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	0018      	movs	r0, r3
 800308c:	2303      	movs	r3, #3
 800308e:	4003      	ands	r3, r0
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003094:	4809      	ldr	r0, [pc, #36]	; (80030bc <__NVIC_SetPriority+0xd8>)
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	001c      	movs	r4, r3
 800309c:	230f      	movs	r3, #15
 800309e:	4023      	ands	r3, r4
 80030a0:	3b08      	subs	r3, #8
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	430a      	orrs	r2, r1
 80030a6:	3306      	adds	r3, #6
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	18c3      	adds	r3, r0, r3
 80030ac:	3304      	adds	r3, #4
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b003      	add	sp, #12
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <SysTick_Config+0x40>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e010      	b.n	80030f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <SysTick_Config+0x44>)
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	3a01      	subs	r2, #1
 80030dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	2301      	movs	r3, #1
 80030e0:	425b      	negs	r3, r3
 80030e2:	2103      	movs	r1, #3
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff ff7d 	bl	8002fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <SysTick_Config+0x44>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <SysTick_Config+0x44>)
 80030f2:	2207      	movs	r2, #7
 80030f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	00ffffff 	.word	0x00ffffff
 8003104:	e000e010 	.word	0xe000e010

08003108 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	210f      	movs	r1, #15
 8003114:	187b      	adds	r3, r7, r1
 8003116:	1c02      	adds	r2, r0, #0
 8003118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	187b      	adds	r3, r7, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b25b      	sxtb	r3, r3
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff ff5d 	bl	8002fe4 <__NVIC_SetPriority>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff ffbf 	bl	80030c0 <SysTick_Config>
 8003142:	0003      	movs	r3, r0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	e147      	b.n	80033ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4091      	lsls	r1, r2
 8003166:	000a      	movs	r2, r1
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d100      	bne.n	8003174 <HAL_GPIO_Init+0x28>
 8003172:	e138      	b.n	80033e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d00b      	beq.n	8003194 <HAL_GPIO_Init+0x48>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d007      	beq.n	8003194 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003188:	2b11      	cmp	r3, #17
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b12      	cmp	r3, #18
 8003192:	d130      	bne.n	80031f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	409a      	lsls	r2, r3
 80031a2:	0013      	movs	r3, r2
 80031a4:	43da      	mvns	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	409a      	lsls	r2, r3
 80031b6:	0013      	movs	r3, r2
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ca:	2201      	movs	r2, #1
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	2201      	movs	r2, #1
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	409a      	lsls	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	43da      	mvns	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0xea>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b12      	cmp	r3, #18
 8003234:	d123      	bne.n	800327e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	58d3      	ldr	r3, [r2, r3]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2207      	movs	r2, #7
 8003248:	4013      	ands	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	43da      	mvns	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2107      	movs	r1, #7
 8003262:	400b      	ands	r3, r1
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	409a      	lsls	r2, r3
 800328c:	0013      	movs	r3, r2
 800328e:	43da      	mvns	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	401a      	ands	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	055b      	lsls	r3, r3, #21
 80032ba:	4013      	ands	r3, r2
 80032bc:	d100      	bne.n	80032c0 <HAL_GPIO_Init+0x174>
 80032be:	e092      	b.n	80033e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80032c0:	4a50      	ldr	r2, [pc, #320]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3318      	adds	r3, #24
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2203      	movs	r2, #3
 80032d2:	4013      	ands	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	220f      	movs	r2, #15
 80032d8:	409a      	lsls	r2, r3
 80032da:	0013      	movs	r3, r2
 80032dc:	43da      	mvns	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0x1ca>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a45      	ldr	r2, [pc, #276]	; (8003408 <HAL_GPIO_Init+0x2bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_GPIO_Init+0x1c6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a44      	ldr	r2, [pc, #272]	; (800340c <HAL_GPIO_Init+0x2c0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <HAL_GPIO_Init+0x1c2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a43      	ldr	r2, [pc, #268]	; (8003410 <HAL_GPIO_Init+0x2c4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_GPIO_Init+0x1be>
 8003306:	2303      	movs	r3, #3
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x1cc>
 800330a:	2305      	movs	r3, #5
 800330c:	e004      	b.n	8003318 <HAL_GPIO_Init+0x1cc>
 800330e:	2302      	movs	r3, #2
 8003310:	e002      	b.n	8003318 <HAL_GPIO_Init+0x1cc>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_GPIO_Init+0x1cc>
 8003316:	2300      	movs	r3, #0
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	2103      	movs	r1, #3
 800331c:	400a      	ands	r2, r1
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	4093      	lsls	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003328:	4936      	ldr	r1, [pc, #216]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3318      	adds	r3, #24
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003336:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	58d3      	ldr	r3, [r2, r3]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43da      	mvns	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	025b      	lsls	r3, r3, #9
 8003350:	4013      	ands	r3, r2
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335c:	4929      	ldr	r1, [pc, #164]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 8003366:	2384      	movs	r3, #132	; 0x84
 8003368:	58d3      	ldr	r3, [r2, r3]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	4013      	ands	r3, r2
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800338a:	491e      	ldr	r1, [pc, #120]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 800338c:	2284      	movs	r2, #132	; 0x84
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43da      	mvns	r2, r3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	035b      	lsls	r3, r3, #13
 80033aa:	4013      	ands	r3, r2
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	039b      	lsls	r3, r3, #14
 80033d4:	4013      	ands	r3, r2
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_GPIO_Init+0x2b8>)
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	40da      	lsrs	r2, r3
 80033f4:	1e13      	subs	r3, r2, #0
 80033f6:	d000      	beq.n	80033fa <HAL_GPIO_Init+0x2ae>
 80033f8:	e6b0      	b.n	800315c <HAL_GPIO_Init+0x10>
  }
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b006      	add	sp, #24
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	40021800 	.word	0x40021800
 8003408:	50000400 	.word	0x50000400
 800340c:	50000800 	.word	0x50000800
 8003410:	50000c00 	.word	0x50000c00

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	0008      	movs	r0, r1
 800341e:	0011      	movs	r1, r2
 8003420:	1cbb      	adds	r3, r7, #2
 8003422:	1c02      	adds	r2, r0, #0
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	1c7b      	adds	r3, r7, #1
 8003428:	1c0a      	adds	r2, r1, #0
 800342a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800342c:	1c7b      	adds	r3, r7, #1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003434:	1cbb      	adds	r3, r7, #2
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800343c:	e003      	b.n	8003446 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343e:	1cbb      	adds	r3, r7, #2
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e082      	b.n	8003568 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2241      	movs	r2, #65	; 0x41
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2240      	movs	r2, #64	; 0x40
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff f9d5 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2241      	movs	r2, #65	; 0x41
 8003482:	2124      	movs	r1, #36	; 0x24
 8003484:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	438a      	bics	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4934      	ldr	r1, [pc, #208]	; (8003570 <HAL_I2C_Init+0x120>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4931      	ldr	r1, [pc, #196]	; (8003574 <HAL_I2C_Init+0x124>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0209      	lsls	r1, r1, #8
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e007      	b.n	80034de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2184      	movs	r1, #132	; 0x84
 80034d8:	0209      	lsls	r1, r1, #8
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d104      	bne.n	80034f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	491f      	ldr	r1, [pc, #124]	; (8003578 <HAL_I2C_Init+0x128>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	491a      	ldr	r1, [pc, #104]	; (8003574 <HAL_I2C_Init+0x124>)
 800350c:	400a      	ands	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	431a      	orrs	r2, r3
 800351a:	0011      	movs	r1, r2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69d9      	ldr	r1, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2241      	movs	r2, #65	; 0x41
 8003554:	2120      	movs	r1, #32
 8003556:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2242      	movs	r2, #66	; 0x42
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	f0ffffff 	.word	0xf0ffffff
 8003574:	ffff7fff 	.word	0xffff7fff
 8003578:	02008000 	.word	0x02008000

0800357c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	0008      	movs	r0, r1
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	0019      	movs	r1, r3
 800358a:	230a      	movs	r3, #10
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	1c02      	adds	r2, r0, #0
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	2308      	movs	r3, #8
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	1c0a      	adds	r2, r1, #0
 8003598:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2241      	movs	r2, #65	; 0x41
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d000      	beq.n	80035a8 <HAL_I2C_Master_Transmit+0x2c>
 80035a6:	e0e7      	b.n	8003778 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	5c9b      	ldrb	r3, [r3, r2]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Master_Transmit+0x3a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0e1      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035be:	f7ff fccf 	bl	8002f60 <HAL_GetTick>
 80035c2:	0003      	movs	r3, r0
 80035c4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	0219      	lsls	r1, r3, #8
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2319      	movs	r3, #25
 80035d2:	2201      	movs	r2, #1
 80035d4:	f000 fa92 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0cc      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2241      	movs	r2, #65	; 0x41
 80035e4:	2121      	movs	r1, #33	; 0x21
 80035e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2242      	movs	r2, #66	; 0x42
 80035ec:	2110      	movs	r1, #16
 80035ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2208      	movs	r2, #8
 8003600:	18ba      	adds	r2, r7, r2
 8003602:	8812      	ldrh	r2, [r2, #0]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2bff      	cmp	r3, #255	; 0xff
 8003614:	d911      	bls.n	800363a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	045c      	lsls	r4, r3, #17
 8003626:	230a      	movs	r3, #10
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	8819      	ldrh	r1, [r3, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	4b55      	ldr	r3, [pc, #340]	; (8003784 <HAL_I2C_Master_Transmit+0x208>)
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	0023      	movs	r3, r4
 8003634:	f000 fb82 	bl	8003d3c <I2C_TransferConfig>
 8003638:	e075      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	b2da      	uxtb	r2, r3
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	049c      	lsls	r4, r3, #18
 800364e:	230a      	movs	r3, #10
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	8819      	ldrh	r1, [r3, #0]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_I2C_Master_Transmit+0x208>)
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	0023      	movs	r3, r4
 800365c:	f000 fb6e 	bl	8003d3c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003660:	e061      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	0018      	movs	r0, r3
 800366a:	f000 fa86 	bl	8003b7a <I2C_WaitOnTXISFlagUntilTimeout>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e081      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03a      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x1aa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d136      	bne.n	8003726 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	0013      	movs	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	f000 fa19 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e053      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2bff      	cmp	r3, #255	; 0xff
 80036da:	d911      	bls.n	8003700 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	045c      	lsls	r4, r3, #17
 80036ec:	230a      	movs	r3, #10
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	8819      	ldrh	r1, [r3, #0]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	2300      	movs	r3, #0
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	0023      	movs	r3, r4
 80036fa:	f000 fb1f 	bl	8003d3c <I2C_TransferConfig>
 80036fe:	e012      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	049c      	lsls	r4, r3, #18
 8003714:	230a      	movs	r3, #10
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	0023      	movs	r3, r4
 8003722:	f000 fb0b 	bl	8003d3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d198      	bne.n	8003662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 fa5e 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e01a      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2220      	movs	r2, #32
 800374a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	490c      	ldr	r1, [pc, #48]	; (8003788 <HAL_I2C_Master_Transmit+0x20c>)
 8003758:	400a      	ands	r2, r1
 800375a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	2120      	movs	r1, #32
 8003762:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2242      	movs	r2, #66	; 0x42
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b007      	add	sp, #28
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	80002000 	.word	0x80002000
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	000c      	movs	r4, r1
 8003796:	0010      	movs	r0, r2
 8003798:	0019      	movs	r1, r3
 800379a:	230a      	movs	r3, #10
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	1c22      	adds	r2, r4, #0
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	2308      	movs	r3, #8
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	1c02      	adds	r2, r0, #0
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	1c0a      	adds	r2, r1, #0
 80037ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2241      	movs	r2, #65	; 0x41
 80037b4:	5c9b      	ldrb	r3, [r3, r2]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d000      	beq.n	80037be <HAL_I2C_Mem_Read+0x32>
 80037bc:	e110      	b.n	80039e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_I2C_Mem_Read+0x42>
 80037c4:	232c      	movs	r3, #44	; 0x2c
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e103      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2240      	movs	r2, #64	; 0x40
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_I2C_Mem_Read+0x5c>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0fc      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2240      	movs	r2, #64	; 0x40
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037f0:	f7ff fbb6 	bl	8002f60 <HAL_GetTick>
 80037f4:	0003      	movs	r3, r0
 80037f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	0219      	lsls	r1, r3, #8
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2319      	movs	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	f000 f979 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2241      	movs	r2, #65	; 0x41
 8003816:	2122      	movs	r1, #34	; 0x22
 8003818:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2242      	movs	r2, #66	; 0x42
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	222c      	movs	r2, #44	; 0x2c
 8003832:	18ba      	adds	r2, r7, r2
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800383e:	1dbb      	adds	r3, r7, #6
 8003840:	881c      	ldrh	r4, [r3, #0]
 8003842:	2308      	movs	r3, #8
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	881a      	ldrh	r2, [r3, #0]
 8003848:	230a      	movs	r3, #10
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	8819      	ldrh	r1, [r3, #0]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	0023      	movs	r3, r4
 800385a:	f000 f8cb 	bl	80039f4 <I2C_RequestMemoryRead>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d005      	beq.n	800386e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0b9      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2bff      	cmp	r3, #255	; 0xff
 8003876:	d911      	bls.n	800389c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	045c      	lsls	r4, r3, #17
 8003888:	230a      	movs	r3, #10
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	8819      	ldrh	r1, [r3, #0]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_I2C_Mem_Read+0x260>)
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	0023      	movs	r3, r4
 8003896:	f000 fa51 	bl	8003d3c <I2C_TransferConfig>
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	049c      	lsls	r4, r3, #18
 80038b0:	230a      	movs	r3, #10
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	8819      	ldrh	r1, [r3, #0]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	4b4c      	ldr	r3, [pc, #304]	; (80039ec <HAL_I2C_Mem_Read+0x260>)
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	0023      	movs	r3, r4
 80038be:	f000 fa3d 	bl	8003d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	0013      	movs	r3, r2
 80038cc:	2200      	movs	r2, #0
 80038ce:	2104      	movs	r1, #4
 80038d0:	f000 f914 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e082      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03a      	beq.n	800398e <HAL_I2C_Mem_Read+0x202>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d136      	bne.n	800398e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	0013      	movs	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	f000 f8e5 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e053      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2bff      	cmp	r3, #255	; 0xff
 8003942:	d911      	bls.n	8003968 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	045c      	lsls	r4, r3, #17
 8003954:	230a      	movs	r3, #10
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	8819      	ldrh	r1, [r3, #0]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	2300      	movs	r3, #0
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	0023      	movs	r3, r4
 8003962:	f000 f9eb 	bl	8003d3c <I2C_TransferConfig>
 8003966:	e012      	b.n	800398e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	049c      	lsls	r4, r3, #18
 800397c:	230a      	movs	r3, #10
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	8819      	ldrh	r1, [r3, #0]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	2300      	movs	r3, #0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	0023      	movs	r3, r4
 800398a:	f000 f9d7 	bl	8003d3c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d194      	bne.n	80038c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f92a 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01a      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2220      	movs	r2, #32
 80039b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	490c      	ldr	r1, [pc, #48]	; (80039f0 <HAL_I2C_Mem_Read+0x264>)
 80039c0:	400a      	ands	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2241      	movs	r2, #65	; 0x41
 80039c8:	2120      	movs	r1, #32
 80039ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2242      	movs	r2, #66	; 0x42
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b007      	add	sp, #28
 80039e8:	bd90      	pop	{r4, r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	80002400 	.word	0x80002400
 80039f0:	fe00e800 	.word	0xfe00e800

080039f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	000c      	movs	r4, r1
 80039fe:	0010      	movs	r0, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	250a      	movs	r5, #10
 8003a04:	197b      	adds	r3, r7, r5
 8003a06:	1c22      	adds	r2, r4, #0
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	1c02      	adds	r2, r0, #0
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	1dbb      	adds	r3, r7, #6
 8003a14:	1c0a      	adds	r2, r1, #0
 8003a16:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a18:	1dbb      	adds	r3, r7, #6
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	8819      	ldrh	r1, [r3, #0]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <I2C_RequestMemoryRead+0xc0>)
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f000 f987 	bl	8003d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 f8a0 	bl	8003b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a3a:	1e03      	subs	r3, r0, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e033      	b.n	8003aaa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
 8003a58:	e019      	b.n	8003a8e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f881 	bl	8003b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e014      	b.n	8003aaa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a80:	2308      	movs	r3, #8
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	0013      	movs	r3, r2
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2140      	movs	r1, #64	; 0x40
 8003a9c:	f000 f82e 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	80002000 	.word	0x80002000

08003ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d103      	bne.n	8003ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d007      	beq.n	8003af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2101      	movs	r1, #1
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
  }
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0c:	e021      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	d01e      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7ff fa24 	bl	8002f60 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	2220      	movs	r2, #32
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2241      	movs	r2, #65	; 0x41
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2242      	movs	r2, #66	; 0x42
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00f      	b.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	425a      	negs	r2, r3
 8003b62:	4153      	adcs	r3, r2
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	001a      	movs	r2, r3
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d0ce      	beq.n	8003b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b86:	e02b      	b.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f86e 	bl	8003c70 <I2C_IsAcknowledgeFailed>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e029      	b.n	8003bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	d01e      	beq.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7ff f9dd 	bl	8002f60 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2241      	movs	r2, #65	; 0x41
 8003bc8:	2120      	movs	r1, #32
 8003bca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2242      	movs	r2, #66	; 0x42
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d1cc      	bne.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c04:	e028      	b.n	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 f82f 	bl	8003c70 <I2C_IsAcknowledgeFailed>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e026      	b.n	8003c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7ff f9a1 	bl	8002f60 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	2220      	movs	r2, #32
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2241      	movs	r2, #65	; 0x41
 8003c40:	2120      	movs	r1, #32
 8003c42:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2242      	movs	r2, #66	; 0x42
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	2100      	movs	r1, #0
 8003c52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d1cf      	bne.n	8003c06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2210      	movs	r2, #16
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d151      	bne.n	8003d2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8a:	e021      	b.n	8003cd0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	d01e      	beq.n	8003cd0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7ff f965 	bl	8002f60 <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_IsAcknowledgeFailed+0x38>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d113      	bne.n	8003cd0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	2220      	movs	r2, #32
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2241      	movs	r2, #65	; 0x41
 8003cb8:	2120      	movs	r1, #32
 8003cba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2242      	movs	r2, #66	; 0x42
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02f      	b.n	8003d30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d1d6      	bne.n	8003c8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2220      	movs	r2, #32
 8003cec:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff fee1 	bl	8003ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	490d      	ldr	r1, [pc, #52]	; (8003d38 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2241      	movs	r2, #65	; 0x41
 8003d16:	2120      	movs	r1, #32
 8003d18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2242      	movs	r2, #66	; 0x42
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2240      	movs	r2, #64	; 0x40
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	fe00e800 	.word	0xfe00e800

08003d3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	0008      	movs	r0, r1
 8003d46:	0011      	movs	r1, r2
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	240a      	movs	r4, #10
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	1c02      	adds	r2, r0, #0
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	2009      	movs	r0, #9
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	1c0a      	adds	r2, r1, #0
 8003d58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	0d51      	lsrs	r1, r2, #21
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	00d2      	lsls	r2, r2, #3
 8003d68:	400a      	ands	r2, r1
 8003d6a:	490e      	ldr	r1, [pc, #56]	; (8003da4 <I2C_TransferConfig+0x68>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	43d2      	mvns	r2, r2
 8003d70:	401a      	ands	r2, r3
 8003d72:	0011      	movs	r1, r2
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	059b      	lsls	r3, r3, #22
 8003d7a:	0d9a      	lsrs	r2, r3, #22
 8003d7c:	183b      	adds	r3, r7, r0
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	0418      	lsls	r0, r3, #16
 8003d82:	23ff      	movs	r3, #255	; 0xff
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	4003      	ands	r3, r0
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b005      	add	sp, #20
 8003da0:	bd90      	pop	{r4, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	03ff63ff 	.word	0x03ff63ff

08003da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2241      	movs	r2, #65	; 0x41
 8003db6:	5c9b      	ldrb	r3, [r3, r2]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d138      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e032      	b.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2241      	movs	r2, #65	; 0x41
 8003dd8:	2124      	movs	r1, #36	; 0x24
 8003dda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2101      	movs	r1, #1
 8003de8:	438a      	bics	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4911      	ldr	r1, [pc, #68]	; (8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2241      	movs	r2, #65	; 0x41
 8003e20:	2120      	movs	r1, #32
 8003e22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	ffffefff 	.word	0xffffefff

08003e40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2241      	movs	r2, #65	; 0x41
 8003e4e:	5c9b      	ldrb	r3, [r3, r2]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d139      	bne.n	8003eca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e033      	b.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2241      	movs	r2, #65	; 0x41
 8003e70:	2124      	movs	r1, #36	; 0x24
 8003e72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	438a      	bics	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2241      	movs	r2, #65	; 0x41
 8003eba:	2120      	movs	r1, #32
 8003ebc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2240      	movs	r2, #64	; 0x40
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
  }
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	fffff0ff 	.word	0xfffff0ff

08003ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d11f      	bne.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	0013      	movs	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4912      	ldr	r1, [pc, #72]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fc f90c 	bl	8000128 <__udivsi3>
 8003f10:	0003      	movs	r3, r0
 8003f12:	3301      	adds	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f16:	e008      	b.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e001      	b.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e009      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	401a      	ands	r2, r3
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d0ed      	beq.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	fffff9ff 	.word	0xfffff9ff
 8003f50:	20000004 	.word	0x20000004
 8003f54:	000f4240 	.word	0x000f4240

08003f58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	23e0      	movs	r3, #224	; 0xe0
 8003f62:	01db      	lsls	r3, r3, #7
 8003f64:	4013      	ands	r3, r2
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000

08003f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e304      	b.n	800458c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2201      	movs	r2, #1
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <HAL_RCC_OscConfig+0x1e>
 8003f8c:	e07c      	b.n	8004088 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8e:	4bc3      	ldr	r3, [pc, #780]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2238      	movs	r2, #56	; 0x38
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f98:	4bc0      	ldr	r3, [pc, #768]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d102      	bne.n	8003fae <HAL_RCC_OscConfig+0x3e>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x44>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d10b      	bne.n	8003fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	4bb9      	ldr	r3, [pc, #740]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d062      	beq.n	8004086 <HAL_RCC_OscConfig+0x116>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d15e      	bne.n	8004086 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e2df      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	025b      	lsls	r3, r3, #9
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x78>
 8003fd8:	4bb0      	ldr	r3, [pc, #704]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4baf      	ldr	r3, [pc, #700]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	0249      	lsls	r1, r1, #9
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e020      	b.n	800402a <HAL_RCC_OscConfig+0xba>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	23a0      	movs	r3, #160	; 0xa0
 8003fee:	02db      	lsls	r3, r3, #11
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10e      	bne.n	8004012 <HAL_RCC_OscConfig+0xa2>
 8003ff4:	4ba9      	ldr	r3, [pc, #676]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4ba8      	ldr	r3, [pc, #672]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	02c9      	lsls	r1, r1, #11
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4ba6      	ldr	r3, [pc, #664]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4ba5      	ldr	r3, [pc, #660]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0249      	lsls	r1, r1, #9
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e00b      	b.n	800402a <HAL_RCC_OscConfig+0xba>
 8004012:	4ba2      	ldr	r3, [pc, #648]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4ba1      	ldr	r3, [pc, #644]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004018:	49a1      	ldr	r1, [pc, #644]	; (80042a0 <HAL_RCC_OscConfig+0x330>)
 800401a:	400a      	ands	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	4b9f      	ldr	r3, [pc, #636]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b9e      	ldr	r3, [pc, #632]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004024:	499f      	ldr	r1, [pc, #636]	; (80042a4 <HAL_RCC_OscConfig+0x334>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d014      	beq.n	800405c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fe ff95 	bl	8002f60 <HAL_GetTick>
 8004036:	0003      	movs	r3, r0
 8004038:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe ff90 	bl	8002f60 <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e29e      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	4b93      	ldr	r3, [pc, #588]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	029b      	lsls	r3, r3, #10
 8004056:	4013      	ands	r3, r2
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0xcc>
 800405a:	e015      	b.n	8004088 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe ff80 	bl	8002f60 <HAL_GetTick>
 8004060:	0003      	movs	r3, r0
 8004062:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004066:	f7fe ff7b 	bl	8002f60 <HAL_GetTick>
 800406a:	0002      	movs	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e289      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004078:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	029b      	lsls	r3, r3, #10
 8004080:	4013      	ands	r3, r2
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0xf6>
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d100      	bne.n	8004094 <HAL_RCC_OscConfig+0x124>
 8004092:	e099      	b.n	80041c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004094:	4b81      	ldr	r3, [pc, #516]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2238      	movs	r2, #56	; 0x38
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409e:	4b7f      	ldr	r3, [pc, #508]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2203      	movs	r2, #3
 80040a4:	4013      	ands	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0x144>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d002      	beq.n	80040ba <HAL_RCC_OscConfig+0x14a>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d135      	bne.n	8004126 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ba:	4b78      	ldr	r3, [pc, #480]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4013      	ands	r3, r2
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x162>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e25c      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b72      	ldr	r3, [pc, #456]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x338>)
 80040d8:	4013      	ands	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	021a      	lsls	r2, r3, #8
 80040e2:	4b6e      	ldr	r3, [pc, #440]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d112      	bne.n	8004114 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040ee:	4b6b      	ldr	r3, [pc, #428]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	0019      	movs	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	4b67      	ldr	r3, [pc, #412]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004102:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	2207      	movs	r2, #7
 800410a:	4013      	ands	r3, r2
 800410c:	4a68      	ldr	r2, [pc, #416]	; (80042b0 <HAL_RCC_OscConfig+0x340>)
 800410e:	40da      	lsrs	r2, r3
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <HAL_RCC_OscConfig+0x344>)
 8004112:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_OscConfig+0x348>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0018      	movs	r0, r3
 800411a:	f7fe fec5 	bl	8002ea8 <HAL_InitTick>
 800411e:	1e03      	subs	r3, r0, #0
 8004120:	d051      	beq.n	80041c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e232      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d030      	beq.n	8004190 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800412e:	4b5b      	ldr	r3, [pc, #364]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5e      	ldr	r2, [pc, #376]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	4b57      	ldr	r3, [pc, #348]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b55      	ldr	r3, [pc, #340]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	0049      	lsls	r1, r1, #1
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe ff06 	bl	8002f60 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe ff01 	bl	8002f60 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e20f      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416c:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4013      	ands	r3, r2
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b48      	ldr	r3, [pc, #288]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <HAL_RCC_OscConfig+0x338>)
 800417e:	4013      	ands	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	4b44      	ldr	r3, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	e01b      	b.n	80041c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004190:	4b42      	ldr	r3, [pc, #264]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004196:	4949      	ldr	r1, [pc, #292]	; (80042bc <HAL_RCC_OscConfig+0x34c>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fee0 	bl	8002f60 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a6:	f7fe fedb 	bl	8002f60 <HAL_GetTick>
 80041aa:	0002      	movs	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e1e9      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b8:	4b38      	ldr	r3, [pc, #224]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4013      	ands	r3, r2
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x236>
 80041c4:	e000      	b.n	80041c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	4013      	ands	r3, r2
 80041d0:	d047      	beq.n	8004262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041d2:	4b32      	ldr	r3, [pc, #200]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2238      	movs	r2, #56	; 0x38
 80041d8:	4013      	ands	r3, r2
 80041da:	2b18      	cmp	r3, #24
 80041dc:	d10a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041de:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d03c      	beq.n	8004262 <HAL_RCC_OscConfig+0x2f2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d138      	bne.n	8004262 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e1cb      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d019      	beq.n	8004230 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041fc:	4b27      	ldr	r3, [pc, #156]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 80041fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004200:	4b26      	ldr	r3, [pc, #152]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004202:	2101      	movs	r1, #1
 8004204:	430a      	orrs	r2, r1
 8004206:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe feaa 	bl	8002f60 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004212:	f7fe fea5 	bl	8002f60 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1b3      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d0f1      	beq.n	8004212 <HAL_RCC_OscConfig+0x2a2>
 800422e:	e018      	b.n	8004262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004236:	2101      	movs	r1, #1
 8004238:	438a      	bics	r2, r1
 800423a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe fe90 	bl	8002f60 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7fe fe8b 	bl	8002f60 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e199      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	d1f1      	bne.n	8004246 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2204      	movs	r2, #4
 8004268:	4013      	ands	r3, r2
 800426a:	d100      	bne.n	800426e <HAL_RCC_OscConfig+0x2fe>
 800426c:	e0c6      	b.n	80043fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	231f      	movs	r3, #31
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2238      	movs	r2, #56	; 0x38
 800427c:	4013      	ands	r3, r2
 800427e:	2b20      	cmp	r3, #32
 8004280:	d11e      	bne.n	80042c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_RCC_OscConfig+0x32c>)
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	2202      	movs	r2, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d100      	bne.n	800428e <HAL_RCC_OscConfig+0x31e>
 800428c:	e0b6      	b.n	80043fc <HAL_RCC_OscConfig+0x48c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d000      	beq.n	8004298 <HAL_RCC_OscConfig+0x328>
 8004296:	e0b1      	b.n	80043fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e177      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
 800429c:	40021000 	.word	0x40021000
 80042a0:	fffeffff 	.word	0xfffeffff
 80042a4:	fffbffff 	.word	0xfffbffff
 80042a8:	ffff80ff 	.word	0xffff80ff
 80042ac:	ffffc7ff 	.word	0xffffc7ff
 80042b0:	00f42400 	.word	0x00f42400
 80042b4:	20000004 	.word	0x20000004
 80042b8:	20000008 	.word	0x20000008
 80042bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042c0:	4bb4      	ldr	r3, [pc, #720]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80042c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	055b      	lsls	r3, r3, #21
 80042c8:	4013      	ands	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_OscConfig+0x360>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x362>
 80042d0:	2300      	movs	r3, #0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	4baf      	ldr	r3, [pc, #700]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80042d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042da:	4bae      	ldr	r3, [pc, #696]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0549      	lsls	r1, r1, #21
 80042e0:	430a      	orrs	r2, r1
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80042e4:	4bab      	ldr	r3, [pc, #684]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80042e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	055b      	lsls	r3, r3, #21
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042f2:	231f      	movs	r3, #31
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fa:	4ba7      	ldr	r3, [pc, #668]	; (8004598 <HAL_RCC_OscConfig+0x628>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4013      	ands	r3, r2
 8004304:	d11a      	bne.n	800433c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004306:	4ba4      	ldr	r3, [pc, #656]	; (8004598 <HAL_RCC_OscConfig+0x628>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4ba3      	ldr	r3, [pc, #652]	; (8004598 <HAL_RCC_OscConfig+0x628>)
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	0049      	lsls	r1, r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004314:	f7fe fe24 	bl	8002f60 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fe fe1f 	bl	8002f60 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e12d      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004330:	4b99      	ldr	r3, [pc, #612]	; (8004598 <HAL_RCC_OscConfig+0x628>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x3e2>
 8004344:	4b93      	ldr	r3, [pc, #588]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004348:	4b92      	ldr	r3, [pc, #584]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800434a:	2101      	movs	r1, #1
 800434c:	430a      	orrs	r2, r1
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004350:	e01c      	b.n	800438c <HAL_RCC_OscConfig+0x41c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x404>
 800435a:	4b8e      	ldr	r3, [pc, #568]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800435c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004360:	2104      	movs	r1, #4
 8004362:	430a      	orrs	r2, r1
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
 8004366:	4b8b      	ldr	r3, [pc, #556]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800436a:	4b8a      	ldr	r3, [pc, #552]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800436c:	2101      	movs	r1, #1
 800436e:	430a      	orrs	r2, r1
 8004370:	65da      	str	r2, [r3, #92]	; 0x5c
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0x41c>
 8004374:	4b87      	ldr	r3, [pc, #540]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004378:	4b86      	ldr	r3, [pc, #536]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800437a:	2101      	movs	r1, #1
 800437c:	438a      	bics	r2, r1
 800437e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004380:	4b84      	ldr	r3, [pc, #528]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004384:	4b83      	ldr	r3, [pc, #524]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004386:	2104      	movs	r1, #4
 8004388:	438a      	bics	r2, r1
 800438a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d014      	beq.n	80043be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fe fde4 	bl	8002f60 <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439c:	e009      	b.n	80043b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fe fddf 	bl	8002f60 <HAL_GetTick>
 80043a2:	0002      	movs	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	4a7c      	ldr	r2, [pc, #496]	; (800459c <HAL_RCC_OscConfig+0x62c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0ec      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b2:	4b78      	ldr	r3, [pc, #480]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x42e>
 80043bc:	e013      	b.n	80043e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe fdcf 	bl	8002f60 <HAL_GetTick>
 80043c2:	0003      	movs	r3, r0
 80043c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c6:	e009      	b.n	80043dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fe fdca 	bl	8002f60 <HAL_GetTick>
 80043cc:	0002      	movs	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	4a72      	ldr	r2, [pc, #456]	; (800459c <HAL_RCC_OscConfig+0x62c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0d7      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043dc:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2202      	movs	r2, #2
 80043e2:	4013      	ands	r3, r2
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043e6:	231f      	movs	r3, #31
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80043f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f4:	4b67      	ldr	r3, [pc, #412]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80043f6:	496a      	ldr	r1, [pc, #424]	; (80045a0 <HAL_RCC_OscConfig+0x630>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d100      	bne.n	8004406 <HAL_RCC_OscConfig+0x496>
 8004404:	e0c1      	b.n	800458a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004406:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2238      	movs	r2, #56	; 0x38
 800440c:	4013      	ands	r3, r2
 800440e:	2b10      	cmp	r3, #16
 8004410:	d100      	bne.n	8004414 <HAL_RCC_OscConfig+0x4a4>
 8004412:	e081      	b.n	8004518 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d156      	bne.n	80044ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441c:	4b5d      	ldr	r3, [pc, #372]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004422:	4960      	ldr	r1, [pc, #384]	; (80045a4 <HAL_RCC_OscConfig+0x634>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe fd9a 	bl	8002f60 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fe fd95 	bl	8002f60 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0a3      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	049b      	lsls	r3, r3, #18
 800444c:	4013      	ands	r3, r2
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004450:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a54      	ldr	r2, [pc, #336]	; (80045a8 <HAL_RCC_OscConfig+0x638>)
 8004456:	4013      	ands	r3, r2
 8004458:	0019      	movs	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	431a      	orrs	r2, r3
 800447e:	4b45      	ldr	r3, [pc, #276]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b43      	ldr	r3, [pc, #268]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0449      	lsls	r1, r1, #17
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004492:	4b40      	ldr	r3, [pc, #256]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0549      	lsls	r1, r1, #21
 800449c:	430a      	orrs	r2, r1
 800449e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe fd5e 	bl	8002f60 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044aa:	f7fe fd59 	bl	8002f60 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e067      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044bc:	4b35      	ldr	r3, [pc, #212]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	049b      	lsls	r3, r3, #18
 80044c4:	4013      	ands	r3, r2
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x53a>
 80044c8:	e05f      	b.n	800458a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044d0:	4934      	ldr	r1, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x634>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044dc:	2103      	movs	r1, #3
 80044de:	438a      	bics	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80044e2:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 80044e8:	4930      	ldr	r1, [pc, #192]	; (80045ac <HAL_RCC_OscConfig+0x63c>)
 80044ea:	400a      	ands	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fe fd37 	bl	8002f60 <HAL_GetTick>
 80044f2:	0003      	movs	r3, r0
 80044f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fe fd32 	bl	8002f60 <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e040      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450a:	4b22      	ldr	r3, [pc, #136]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	049b      	lsls	r3, r3, #18
 8004512:	4013      	ands	r3, r2
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x588>
 8004516:	e038      	b.n	800458a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e033      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x624>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2203      	movs	r2, #3
 800452e:	401a      	ands	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	429a      	cmp	r2, r3
 8004536:	d126      	bne.n	8004586 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2270      	movs	r2, #112	; 0x70
 800453c:	401a      	ands	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11f      	bne.n	8004586 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	23fe      	movs	r3, #254	; 0xfe
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	401a      	ands	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d116      	bne.n	8004586 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	23f8      	movs	r3, #248	; 0xf8
 800455c:	039b      	lsls	r3, r3, #14
 800455e:	401a      	ands	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d10e      	bne.n	8004586 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	23e0      	movs	r3, #224	; 0xe0
 800456c:	051b      	lsls	r3, r3, #20
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	0f5b      	lsrs	r3, r3, #29
 800457c:	075a      	lsls	r2, r3, #29
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b008      	add	sp, #32
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	00001388 	.word	0x00001388
 80045a0:	efffffff 	.word	0xefffffff
 80045a4:	feffffff 	.word	0xfeffffff
 80045a8:	11c1808c 	.word	0x11c1808c
 80045ac:	eefeffff 	.word	0xeefeffff

080045b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0e9      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2207      	movs	r2, #7
 80045ca:	4013      	ands	r3, r2
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d91e      	bls.n	8004610 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2207      	movs	r2, #7
 80045d8:	4393      	bics	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045e4:	f7fe fcbc 	bl	8002f60 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ec:	e009      	b.n	8004602 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ee:	f7fe fcb7 	bl	8002f60 <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <HAL_RCC_ClockConfig+0x1f4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0ca      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004602:	4b67      	ldr	r3, [pc, #412]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2207      	movs	r2, #7
 8004608:	4013      	ands	r3, r2
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d1ee      	bne.n	80045ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2202      	movs	r2, #2
 8004616:	4013      	ands	r3, r2
 8004618:	d015      	beq.n	8004646 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	d006      	beq.n	8004632 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004624:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b5f      	ldr	r3, [pc, #380]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 800462a:	21e0      	movs	r1, #224	; 0xe0
 800462c:	01c9      	lsls	r1, r1, #7
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004632:	4b5d      	ldr	r3, [pc, #372]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <HAL_RCC_ClockConfig+0x1fc>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b59      	ldr	r3, [pc, #356]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2201      	movs	r2, #1
 800464c:	4013      	ands	r3, r2
 800464e:	d057      	beq.n	8004700 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	4013      	ands	r3, r2
 8004662:	d12b      	bne.n	80046bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e097      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d107      	bne.n	8004680 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004670:	4b4d      	ldr	r3, [pc, #308]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	049b      	lsls	r3, r3, #18
 8004678:	4013      	ands	r3, r2
 800467a:	d11f      	bne.n	80046bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e08b      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004688:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4013      	ands	r3, r2
 8004692:	d113      	bne.n	80046bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e07f      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d106      	bne.n	80046ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a0:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	2202      	movs	r2, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d108      	bne.n	80046bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e074      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e06d      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046bc:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2207      	movs	r2, #7
 80046c2:	4393      	bics	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fe fc46 	bl	8002f60 <HAL_GetTick>
 80046d4:	0003      	movs	r3, r0
 80046d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d8:	e009      	b.n	80046ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046da:	f7fe fc41 	bl	8002f60 <HAL_GetTick>
 80046de:	0002      	movs	r2, r0
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <HAL_RCC_ClockConfig+0x1f4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e054      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2238      	movs	r2, #56	; 0x38
 80046f4:	401a      	ands	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1ec      	bne.n	80046da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2207      	movs	r2, #7
 8004706:	4013      	ands	r3, r2
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d21e      	bcs.n	800474c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2207      	movs	r2, #7
 8004714:	4393      	bics	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004720:	f7fe fc1e 	bl	8002f60 <HAL_GetTick>
 8004724:	0003      	movs	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004728:	e009      	b.n	800473e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472a:	f7fe fc19 	bl	8002f60 <HAL_GetTick>
 800472e:	0002      	movs	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e02c      	b.n	8004798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2207      	movs	r2, #7
 8004744:	4013      	ands	r3, r2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2204      	movs	r2, #4
 8004752:	4013      	ands	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_RCC_ClockConfig+0x200>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800476a:	f000 f829 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800476e:	0001      	movs	r1, r0
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	220f      	movs	r2, #15
 8004778:	401a      	ands	r2, r3
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_RCC_ClockConfig+0x204>)
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	58d3      	ldr	r3, [r2, r3]
 8004780:	221f      	movs	r2, #31
 8004782:	4013      	ands	r3, r2
 8004784:	000a      	movs	r2, r1
 8004786:	40da      	lsrs	r2, r3
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x208>)
 800478a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_ClockConfig+0x20c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0018      	movs	r0, r3
 8004792:	f7fe fb89 	bl	8002ea8 <HAL_InitTick>
 8004796:	0003      	movs	r3, r0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40022000 	.word	0x40022000
 80047a4:	00001388 	.word	0x00001388
 80047a8:	40021000 	.word	0x40021000
 80047ac:	fffff0ff 	.word	0xfffff0ff
 80047b0:	ffff8fff 	.word	0xffff8fff
 80047b4:	08009fd8 	.word	0x08009fd8
 80047b8:	20000004 	.word	0x20000004
 80047bc:	20000008 	.word	0x20000008

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047c6:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2238      	movs	r2, #56	; 0x38
 80047cc:	4013      	ands	r3, r2
 80047ce:	d10f      	bne.n	80047f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80047d0:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0adb      	lsrs	r3, r3, #11
 80047d6:	2207      	movs	r2, #7
 80047d8:	4013      	ands	r3, r2
 80047da:	2201      	movs	r2, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	0013      	movs	r3, r2
 80047e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	4835      	ldr	r0, [pc, #212]	; (80048bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80047e6:	f7fb fc9f 	bl	8000128 <__udivsi3>
 80047ea:	0003      	movs	r3, r0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e05d      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2238      	movs	r2, #56	; 0x38
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d102      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	e054      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004802:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2238      	movs	r2, #56	; 0x38
 8004808:	4013      	ands	r3, r2
 800480a:	2b10      	cmp	r3, #16
 800480c:	d138      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	2207      	movs	r2, #7
 8004820:	4013      	ands	r3, r2
 8004822:	3301      	adds	r3, #1
 8004824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4824      	ldr	r0, [pc, #144]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004830:	f7fb fc7a 	bl	8000128 <__udivsi3>
 8004834:	0003      	movs	r3, r0
 8004836:	0019      	movs	r1, r3
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	227f      	movs	r2, #127	; 0x7f
 8004840:	4013      	ands	r3, r2
 8004842:	434b      	muls	r3, r1
 8004844:	617b      	str	r3, [r7, #20]
        break;
 8004846:	e00d      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	481c      	ldr	r0, [pc, #112]	; (80048bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800484c:	f7fb fc6c 	bl	8000128 <__udivsi3>
 8004850:	0003      	movs	r3, r0
 8004852:	0019      	movs	r1, r3
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	227f      	movs	r2, #127	; 0x7f
 800485c:	4013      	ands	r3, r2
 800485e:	434b      	muls	r3, r1
 8004860:	617b      	str	r3, [r7, #20]
        break;
 8004862:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	0f5b      	lsrs	r3, r3, #29
 800486a:	2207      	movs	r2, #7
 800486c:	4013      	ands	r3, r2
 800486e:	3301      	adds	r3, #1
 8004870:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	6978      	ldr	r0, [r7, #20]
 8004876:	f7fb fc57 	bl	8000128 <__udivsi3>
 800487a:	0003      	movs	r3, r0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e015      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2238      	movs	r2, #56	; 0x38
 8004886:	4013      	ands	r3, r2
 8004888:	2b20      	cmp	r3, #32
 800488a:	d103      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2238      	movs	r2, #56	; 0x38
 800489a:	4013      	ands	r3, r2
 800489c:	2b18      	cmp	r3, #24
 800489e:	d103      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80048a0:	23fa      	movs	r3, #250	; 0xfa
 80048a2:	01db      	lsls	r3, r3, #7
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e001      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048ac:	693b      	ldr	r3, [r7, #16]
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b006      	add	sp, #24
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40021000 	.word	0x40021000
 80048bc:	00f42400 	.word	0x00f42400
 80048c0:	007a1200 	.word	0x007a1200

080048c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c8:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	20000004 	.word	0x20000004

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80048dc:	f7ff fff2 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80048e0:	0004      	movs	r4, r0
 80048e2:	f7ff fb39 	bl	8003f58 <LL_RCC_GetAPB1Prescaler>
 80048e6:	0003      	movs	r3, r0
 80048e8:	0b1a      	lsrs	r2, r3, #12
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	58d3      	ldr	r3, [r2, r3]
 80048f0:	221f      	movs	r2, #31
 80048f2:	4013      	ands	r3, r2
 80048f4:	40dc      	lsrs	r4, r3
 80048f6:	0023      	movs	r3, r4
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bdb0      	pop	{r4, r5, r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	0800a018 	.word	0x0800a018

08004904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800490c:	2313      	movs	r3, #19
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004914:	2312      	movs	r3, #18
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	4013      	ands	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004928:	e0a4      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492a:	2311      	movs	r3, #17
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004932:	4bc3      	ldr	r3, [pc, #780]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	055b      	lsls	r3, r3, #21
 800493a:	4013      	ands	r3, r2
 800493c:	d111      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4bc0      	ldr	r3, [pc, #768]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004942:	4bbf      	ldr	r3, [pc, #764]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	0549      	lsls	r1, r1, #21
 8004948:	430a      	orrs	r2, r1
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c
 800494c:	4bbc      	ldr	r3, [pc, #752]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800494e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	055b      	lsls	r3, r3, #21
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2311      	movs	r3, #17
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004962:	4bb8      	ldr	r3, [pc, #736]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4bb7      	ldr	r3, [pc, #732]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	0049      	lsls	r1, r1, #1
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004970:	f7fe faf6 	bl	8002f60 <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004978:	e00b      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fe faf1 	bl	8002f60 <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d904      	bls.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004988:	2313      	movs	r3, #19
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2203      	movs	r2, #3
 800498e:	701a      	strb	r2, [r3, #0]
        break;
 8004990:	e005      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004992:	4bac      	ldr	r3, [pc, #688]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4013      	ands	r3, r2
 800499c:	d0ed      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800499e:	2313      	movs	r3, #19
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d154      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a8:	4ba5      	ldr	r3, [pc, #660]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ac:	23c0      	movs	r3, #192	; 0xc0
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d019      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xea>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d014      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c4:	4b9e      	ldr	r3, [pc, #632]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	4a9f      	ldr	r2, [pc, #636]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ce:	4b9c      	ldr	r3, [pc, #624]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049d2:	4b9b      	ldr	r3, [pc, #620]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0249      	lsls	r1, r1, #9
 80049d8:	430a      	orrs	r2, r1
 80049da:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049dc:	4b98      	ldr	r3, [pc, #608]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049e0:	4b97      	ldr	r3, [pc, #604]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049e2:	499a      	ldr	r1, [pc, #616]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049e8:	4b95      	ldr	r3, [pc, #596]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2201      	movs	r2, #1
 80049f2:	4013      	ands	r3, r2
 80049f4:	d016      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe fab3 	bl	8002f60 <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	e00c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe faae 	bl	8002f60 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	4a91      	ldr	r2, [pc, #580]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d904      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004a10:	2313      	movs	r3, #19
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2203      	movs	r2, #3
 8004a16:	701a      	strb	r2, [r3, #0]
            break;
 8004a18:	e004      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	4b89      	ldr	r3, [pc, #548]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	d0ed      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8004a24:	2313      	movs	r3, #19
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a2e:	4b84      	ldr	r3, [pc, #528]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	4a85      	ldr	r2, [pc, #532]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	4b80      	ldr	r3, [pc, #512]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a44:	2312      	movs	r3, #18
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	2213      	movs	r2, #19
 8004a4a:	18ba      	adds	r2, r7, r2
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e005      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	2312      	movs	r3, #18
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2213      	movs	r2, #19
 8004a58:	18ba      	adds	r2, r7, r2
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a5e:	2311      	movs	r3, #17
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6c:	4b74      	ldr	r3, [pc, #464]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a6e:	4979      	ldr	r1, [pc, #484]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a7e:	4b70      	ldr	r3, [pc, #448]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	2203      	movs	r2, #3
 8004a84:	4393      	bics	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2202      	movs	r2, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a9c:	4b68      	ldr	r3, [pc, #416]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	220c      	movs	r2, #12
 8004aa2:	4393      	bics	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b65      	ldr	r3, [pc, #404]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	4a66      	ldr	r2, [pc, #408]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aca:	430a      	orrs	r2, r1
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ada:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	4a5f      	ldr	r2, [pc, #380]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	4b55      	ldr	r3, [pc, #340]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4013      	ands	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004afa:	4b51      	ldr	r3, [pc, #324]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	4b4d      	ldr	r3, [pc, #308]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2220      	movs	r2, #32
 8004b14:	4013      	ands	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b18:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	4a51      	ldr	r2, [pc, #324]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	0019      	movs	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	4b46      	ldr	r3, [pc, #280]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	4013      	ands	r3, r2
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	0899      	lsrs	r1, r3, #2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b46:	430a      	orrs	r2, r1
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	05db      	lsls	r3, r3, #23
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d106      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b56:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	0249      	lsls	r1, r1, #9
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b70:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	2240      	movs	r2, #64	; 0x40
 8004b76:	4393      	bics	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	039b      	lsls	r3, r3, #14
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d016      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	4a34      	ldr	r2, [pc, #208]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b9e:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	03db      	lsls	r3, r3, #15
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bb0:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	0449      	lsls	r1, r1, #17
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	03db      	lsls	r3, r3, #15
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d016      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	045b      	lsls	r3, r3, #17
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	0449      	lsls	r1, r1, #17
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4013      	ands	r3, r2
 8004c02:	d016      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c14:	430a      	orrs	r2, r1
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d106      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	0249      	lsls	r1, r1, #9
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c32:	2312      	movs	r3, #18
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40007000 	.word	0x40007000
 8004c48:	fffffcff 	.word	0xfffffcff
 8004c4c:	fffeffff 	.word	0xfffeffff
 8004c50:	00001388 	.word	0x00001388
 8004c54:	efffffff 	.word	0xefffffff
 8004c58:	fffff3ff 	.word	0xfffff3ff
 8004c5c:	fff3ffff 	.word	0xfff3ffff
 8004c60:	ffcfffff 	.word	0xffcfffff
 8004c64:	ffffcfff 	.word	0xffffcfff
 8004c68:	ffbfffff 	.word	0xffbfffff
 8004c6c:	feffffff 	.word	0xfeffffff
 8004c70:	ffff3fff 	.word	0xffff3fff

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e046      	b.n	8004d14 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2284      	movs	r2, #132	; 0x84
 8004c8a:	589b      	ldr	r3, [r3, r2]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fe f85c 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2284      	movs	r2, #132	; 0x84
 8004ca4:	2124      	movs	r1, #36	; 0x24
 8004ca6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f000 f8dc 	bl	8004e78 <UART_SetConfig>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e024      	b.n	8004d14 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 fbaf 	bl	8005438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	490d      	ldr	r1, [pc, #52]	; (8004d1c <HAL_UART_Init+0xa8>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	212a      	movs	r1, #42	; 0x2a
 8004cf6:	438a      	bics	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	430a      	orrs	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 fc47 	bl	80055a0 <UART_CheckIdleState>
 8004d12:	0003      	movs	r3, r0
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	ffffb7ff 	.word	0xffffb7ff

08004d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2284      	movs	r2, #132	; 0x84
 8004d34:	589b      	ldr	r3, [r3, r2]
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d000      	beq.n	8004d3c <HAL_UART_Transmit+0x1c>
 8004d3a:	e097      	b.n	8004e6c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_UART_Transmit+0x2a>
 8004d42:	1dbb      	adds	r3, r7, #6
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e08f      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	015b      	lsls	r3, r3, #5
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d109      	bne.n	8004d6e <HAL_UART_Transmit+0x4e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	d001      	beq.n	8004d6e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07f      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	5c9b      	ldrb	r3, [r3, r2]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Transmit+0x5c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e078      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	2101      	movs	r1, #1
 8004d82:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	228c      	movs	r2, #140	; 0x8c
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2284      	movs	r2, #132	; 0x84
 8004d90:	2121      	movs	r1, #33	; 0x21
 8004d92:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d94:	f7fe f8e4 	bl	8002f60 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1dba      	adds	r2, r7, #6
 8004da0:	2154      	movs	r1, #84	; 0x54
 8004da2:	8812      	ldrh	r2, [r2, #0]
 8004da4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1dba      	adds	r2, r7, #6
 8004daa:	2156      	movs	r1, #86	; 0x56
 8004dac:	8812      	ldrh	r2, [r2, #0]
 8004dae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d108      	bne.n	8004dce <HAL_UART_Transmit+0xae>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e003      	b.n	8004dd6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004dde:	e02c      	b.n	8004e3a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	0013      	movs	r3, r2
 8004dea:	2200      	movs	r2, #0
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	f000 fc23 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e039      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	001a      	movs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	05d2      	lsls	r2, r2, #23
 8004e0c:	0dd2      	lsrs	r2, r2, #23
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	3302      	adds	r3, #2
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e007      	b.n	8004e28 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2256      	movs	r2, #86	; 0x56
 8004e2c:	5a9b      	ldrh	r3, [r3, r2]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b299      	uxth	r1, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2256      	movs	r2, #86	; 0x56
 8004e38:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2256      	movs	r2, #86	; 0x56
 8004e3e:	5a9b      	ldrh	r3, [r3, r2]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1cc      	bne.n	8004de0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	0013      	movs	r3, r2
 8004e50:	2200      	movs	r2, #0
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	f000 fbf0 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2284      	movs	r2, #132	; 0x84
 8004e64:	2120      	movs	r1, #32
 8004e66:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b008      	add	sp, #32
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b091      	sub	sp, #68	; 0x44
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e80:	231a      	movs	r3, #26
 8004e82:	2220      	movs	r2, #32
 8004e84:	4694      	mov	ip, r2
 8004e86:	44bc      	add	ip, r7
 8004e88:	4463      	add	r3, ip
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eac:	4313      	orrs	r3, r2
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4ab8      	ldr	r2, [pc, #736]	; (8005198 <UART_SetConfig+0x320>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4ab3      	ldr	r2, [pc, #716]	; (800519c <UART_SetConfig+0x324>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	68d9      	ldr	r1, [r3, #12]
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	0003      	movs	r3, r0
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4aad      	ldr	r2, [pc, #692]	; (80051a0 <UART_SetConfig+0x328>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4aa8      	ldr	r2, [pc, #672]	; (80051a4 <UART_SetConfig+0x32c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	220f      	movs	r2, #15
 8004f18:	4393      	bics	r3, r2
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	0003      	movs	r3, r0
 8004f26:	430b      	orrs	r3, r1
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a9e      	ldr	r2, [pc, #632]	; (80051a8 <UART_SetConfig+0x330>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d134      	bne.n	8004f9e <UART_SetConfig+0x126>
 8004f34:	4b9d      	ldr	r3, [pc, #628]	; (80051ac <UART_SetConfig+0x334>)
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	2203      	movs	r2, #3
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d015      	beq.n	8004f6c <UART_SetConfig+0xf4>
 8004f40:	d304      	bcc.n	8004f4c <UART_SetConfig+0xd4>
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d00a      	beq.n	8004f5c <UART_SetConfig+0xe4>
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d018      	beq.n	8004f7c <UART_SetConfig+0x104>
 8004f4a:	e01f      	b.n	8004f8c <UART_SetConfig+0x114>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4694      	mov	ip, r2
 8004f52:	44bc      	add	ip, r7
 8004f54:	4463      	add	r3, ip
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e0c5      	b.n	80050e8 <UART_SetConfig+0x270>
 8004f5c:	231b      	movs	r3, #27
 8004f5e:	2220      	movs	r2, #32
 8004f60:	4694      	mov	ip, r2
 8004f62:	44bc      	add	ip, r7
 8004f64:	4463      	add	r3, ip
 8004f66:	2202      	movs	r2, #2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e0bd      	b.n	80050e8 <UART_SetConfig+0x270>
 8004f6c:	231b      	movs	r3, #27
 8004f6e:	2220      	movs	r2, #32
 8004f70:	4694      	mov	ip, r2
 8004f72:	44bc      	add	ip, r7
 8004f74:	4463      	add	r3, ip
 8004f76:	2204      	movs	r2, #4
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e0b5      	b.n	80050e8 <UART_SetConfig+0x270>
 8004f7c:	231b      	movs	r3, #27
 8004f7e:	2220      	movs	r2, #32
 8004f80:	4694      	mov	ip, r2
 8004f82:	44bc      	add	ip, r7
 8004f84:	4463      	add	r3, ip
 8004f86:	2208      	movs	r2, #8
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e0ad      	b.n	80050e8 <UART_SetConfig+0x270>
 8004f8c:	231b      	movs	r3, #27
 8004f8e:	2220      	movs	r2, #32
 8004f90:	4694      	mov	ip, r2
 8004f92:	44bc      	add	ip, r7
 8004f94:	4463      	add	r3, ip
 8004f96:	2210      	movs	r2, #16
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	e0a4      	b.n	80050e8 <UART_SetConfig+0x270>
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <UART_SetConfig+0x338>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d137      	bne.n	8005018 <UART_SetConfig+0x1a0>
 8004fa8:	4b80      	ldr	r3, [pc, #512]	; (80051ac <UART_SetConfig+0x334>)
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	220c      	movs	r2, #12
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d018      	beq.n	8004fe6 <UART_SetConfig+0x16e>
 8004fb4:	d802      	bhi.n	8004fbc <UART_SetConfig+0x144>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <UART_SetConfig+0x14e>
 8004fba:	e024      	b.n	8005006 <UART_SetConfig+0x18e>
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d00a      	beq.n	8004fd6 <UART_SetConfig+0x15e>
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d018      	beq.n	8004ff6 <UART_SetConfig+0x17e>
 8004fc4:	e01f      	b.n	8005006 <UART_SetConfig+0x18e>
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	2220      	movs	r2, #32
 8004fca:	4694      	mov	ip, r2
 8004fcc:	44bc      	add	ip, r7
 8004fce:	4463      	add	r3, ip
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e088      	b.n	80050e8 <UART_SetConfig+0x270>
 8004fd6:	231b      	movs	r3, #27
 8004fd8:	2220      	movs	r2, #32
 8004fda:	4694      	mov	ip, r2
 8004fdc:	44bc      	add	ip, r7
 8004fde:	4463      	add	r3, ip
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	e080      	b.n	80050e8 <UART_SetConfig+0x270>
 8004fe6:	231b      	movs	r3, #27
 8004fe8:	2220      	movs	r2, #32
 8004fea:	4694      	mov	ip, r2
 8004fec:	44bc      	add	ip, r7
 8004fee:	4463      	add	r3, ip
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e078      	b.n	80050e8 <UART_SetConfig+0x270>
 8004ff6:	231b      	movs	r3, #27
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	4694      	mov	ip, r2
 8004ffc:	44bc      	add	ip, r7
 8004ffe:	4463      	add	r3, ip
 8005000:	2208      	movs	r2, #8
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e070      	b.n	80050e8 <UART_SetConfig+0x270>
 8005006:	231b      	movs	r3, #27
 8005008:	2220      	movs	r2, #32
 800500a:	4694      	mov	ip, r2
 800500c:	44bc      	add	ip, r7
 800500e:	4463      	add	r3, ip
 8005010:	2210      	movs	r2, #16
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	e067      	b.n	80050e8 <UART_SetConfig+0x270>
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a65      	ldr	r2, [pc, #404]	; (80051b4 <UART_SetConfig+0x33c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d107      	bne.n	8005032 <UART_SetConfig+0x1ba>
 8005022:	231b      	movs	r3, #27
 8005024:	2220      	movs	r2, #32
 8005026:	4694      	mov	ip, r2
 8005028:	44bc      	add	ip, r7
 800502a:	4463      	add	r3, ip
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e05a      	b.n	80050e8 <UART_SetConfig+0x270>
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a60      	ldr	r2, [pc, #384]	; (80051b8 <UART_SetConfig+0x340>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d107      	bne.n	800504c <UART_SetConfig+0x1d4>
 800503c:	231b      	movs	r3, #27
 800503e:	2220      	movs	r2, #32
 8005040:	4694      	mov	ip, r2
 8005042:	44bc      	add	ip, r7
 8005044:	4463      	add	r3, ip
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e04d      	b.n	80050e8 <UART_SetConfig+0x270>
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a53      	ldr	r2, [pc, #332]	; (80051a0 <UART_SetConfig+0x328>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d141      	bne.n	80050da <UART_SetConfig+0x262>
 8005056:	4b55      	ldr	r3, [pc, #340]	; (80051ac <UART_SetConfig+0x334>)
 8005058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505a:	23c0      	movs	r3, #192	; 0xc0
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4013      	ands	r3, r2
 8005060:	2280      	movs	r2, #128	; 0x80
 8005062:	00d2      	lsls	r2, r2, #3
 8005064:	4293      	cmp	r3, r2
 8005066:	d01f      	beq.n	80050a8 <UART_SetConfig+0x230>
 8005068:	2280      	movs	r2, #128	; 0x80
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	4293      	cmp	r3, r2
 800506e:	d802      	bhi.n	8005076 <UART_SetConfig+0x1fe>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <UART_SetConfig+0x210>
 8005074:	e028      	b.n	80050c8 <UART_SetConfig+0x250>
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	0112      	lsls	r2, r2, #4
 800507a:	4293      	cmp	r3, r2
 800507c:	d00c      	beq.n	8005098 <UART_SetConfig+0x220>
 800507e:	22c0      	movs	r2, #192	; 0xc0
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <UART_SetConfig+0x240>
 8005086:	e01f      	b.n	80050c8 <UART_SetConfig+0x250>
 8005088:	231b      	movs	r3, #27
 800508a:	2220      	movs	r2, #32
 800508c:	4694      	mov	ip, r2
 800508e:	44bc      	add	ip, r7
 8005090:	4463      	add	r3, ip
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e027      	b.n	80050e8 <UART_SetConfig+0x270>
 8005098:	231b      	movs	r3, #27
 800509a:	2220      	movs	r2, #32
 800509c:	4694      	mov	ip, r2
 800509e:	44bc      	add	ip, r7
 80050a0:	4463      	add	r3, ip
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e01f      	b.n	80050e8 <UART_SetConfig+0x270>
 80050a8:	231b      	movs	r3, #27
 80050aa:	2220      	movs	r2, #32
 80050ac:	4694      	mov	ip, r2
 80050ae:	44bc      	add	ip, r7
 80050b0:	4463      	add	r3, ip
 80050b2:	2204      	movs	r2, #4
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e017      	b.n	80050e8 <UART_SetConfig+0x270>
 80050b8:	231b      	movs	r3, #27
 80050ba:	2220      	movs	r2, #32
 80050bc:	4694      	mov	ip, r2
 80050be:	44bc      	add	ip, r7
 80050c0:	4463      	add	r3, ip
 80050c2:	2208      	movs	r2, #8
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e00f      	b.n	80050e8 <UART_SetConfig+0x270>
 80050c8:	231b      	movs	r3, #27
 80050ca:	2220      	movs	r2, #32
 80050cc:	4694      	mov	ip, r2
 80050ce:	44bc      	add	ip, r7
 80050d0:	4463      	add	r3, ip
 80050d2:	2210      	movs	r2, #16
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	e006      	b.n	80050e8 <UART_SetConfig+0x270>
 80050da:	231b      	movs	r3, #27
 80050dc:	2220      	movs	r2, #32
 80050de:	4694      	mov	ip, r2
 80050e0:	44bc      	add	ip, r7
 80050e2:	4463      	add	r3, ip
 80050e4:	2210      	movs	r2, #16
 80050e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <UART_SetConfig+0x328>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d000      	beq.n	80050f4 <UART_SetConfig+0x27c>
 80050f2:	e0aa      	b.n	800524a <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050f4:	231b      	movs	r3, #27
 80050f6:	2220      	movs	r2, #32
 80050f8:	4694      	mov	ip, r2
 80050fa:	44bc      	add	ip, r7
 80050fc:	4463      	add	r3, ip
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d00d      	beq.n	8005120 <UART_SetConfig+0x2a8>
 8005104:	dc02      	bgt.n	800510c <UART_SetConfig+0x294>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <UART_SetConfig+0x29e>
 800510a:	e015      	b.n	8005138 <UART_SetConfig+0x2c0>
 800510c:	2b04      	cmp	r3, #4
 800510e:	d00a      	beq.n	8005126 <UART_SetConfig+0x2ae>
 8005110:	2b08      	cmp	r3, #8
 8005112:	d00d      	beq.n	8005130 <UART_SetConfig+0x2b8>
 8005114:	e010      	b.n	8005138 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005116:	f7ff fbdf 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 800511a:	0003      	movs	r3, r0
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800511e:	e015      	b.n	800514c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <UART_SetConfig+0x344>)
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005124:	e012      	b.n	800514c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7ff fb4b 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800512a:	0003      	movs	r3, r0
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800512e:	e00d      	b.n	800514c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005136:	e009      	b.n	800514c <UART_SetConfig+0x2d4>
      default:
        pclk = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800513c:	231a      	movs	r3, #26
 800513e:	2220      	movs	r2, #32
 8005140:	4694      	mov	ip, r2
 8005142:	44bc      	add	ip, r7
 8005144:	4463      	add	r3, ip
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
        break;
 800514a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800514c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d100      	bne.n	8005154 <UART_SetConfig+0x2dc>
 8005152:	e14f      	b.n	80053f4 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <UART_SetConfig+0x348>)
 800515a:	0052      	lsls	r2, r2, #1
 800515c:	5ad3      	ldrh	r3, [r2, r3]
 800515e:	0019      	movs	r1, r3
 8005160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005162:	f7fa ffe1 	bl	8000128 <__udivsi3>
 8005166:	0003      	movs	r3, r0
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	0013      	movs	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	189b      	adds	r3, r3, r2
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	429a      	cmp	r2, r3
 8005178:	d305      	bcc.n	8005186 <UART_SetConfig+0x30e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	429a      	cmp	r2, r3
 8005184:	d91e      	bls.n	80051c4 <UART_SetConfig+0x34c>
      {
        ret = HAL_ERROR;
 8005186:	231a      	movs	r3, #26
 8005188:	2220      	movs	r2, #32
 800518a:	4694      	mov	ip, r2
 800518c:	44bc      	add	ip, r7
 800518e:	4463      	add	r3, ip
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e12e      	b.n	80053f4 <UART_SetConfig+0x57c>
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	cfff69f3 	.word	0xcfff69f3
 800519c:	ffffcfff 	.word	0xffffcfff
 80051a0:	40008000 	.word	0x40008000
 80051a4:	11fff4ff 	.word	0x11fff4ff
 80051a8:	40013800 	.word	0x40013800
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40004400 	.word	0x40004400
 80051b4:	40004800 	.word	0x40004800
 80051b8:	40004c00 	.word	0x40004c00
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	0800a038 	.word	0x0800a038
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d0:	4b94      	ldr	r3, [pc, #592]	; (8005424 <UART_SetConfig+0x5ac>)
 80051d2:	0052      	lsls	r2, r2, #1
 80051d4:	5ad3      	ldrh	r3, [r2, r3]
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	69b8      	ldr	r0, [r7, #24]
 80051e2:	69f9      	ldr	r1, [r7, #28]
 80051e4:	f7fb f98e 	bl	8000504 <__aeabi_uldivmod>
 80051e8:	0003      	movs	r3, r0
 80051ea:	000c      	movs	r4, r1
 80051ec:	0e1a      	lsrs	r2, r3, #24
 80051ee:	0226      	lsls	r6, r4, #8
 80051f0:	4316      	orrs	r6, r2
 80051f2:	021d      	lsls	r5, r3, #8
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68b8      	ldr	r0, [r7, #8]
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	1940      	adds	r0, r0, r5
 8005206:	4171      	adcs	r1, r6
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f7fb f975 	bl	8000504 <__aeabi_uldivmod>
 800521a:	0003      	movs	r3, r0
 800521c:	000c      	movs	r4, r1
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	4a81      	ldr	r2, [pc, #516]	; (8005428 <UART_SetConfig+0x5b0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d908      	bls.n	800523a <UART_SetConfig+0x3c2>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	4a80      	ldr	r2, [pc, #512]	; (800542c <UART_SetConfig+0x5b4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d804      	bhi.n	800523a <UART_SetConfig+0x3c2>
        {
          huart->Instance->BRR = usartdiv;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e0dc      	b.n	80053f4 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 800523a:	231a      	movs	r3, #26
 800523c:	2220      	movs	r2, #32
 800523e:	4694      	mov	ip, r2
 8005240:	44bc      	add	ip, r7
 8005242:	4463      	add	r3, ip
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e0d4      	b.n	80053f4 <UART_SetConfig+0x57c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	429a      	cmp	r2, r3
 8005254:	d000      	beq.n	8005258 <UART_SetConfig+0x3e0>
 8005256:	e073      	b.n	8005340 <UART_SetConfig+0x4c8>
  {
    switch (clocksource)
 8005258:	231b      	movs	r3, #27
 800525a:	2220      	movs	r2, #32
 800525c:	4694      	mov	ip, r2
 800525e:	44bc      	add	ip, r7
 8005260:	4463      	add	r3, ip
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d00d      	beq.n	8005284 <UART_SetConfig+0x40c>
 8005268:	dc02      	bgt.n	8005270 <UART_SetConfig+0x3f8>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <UART_SetConfig+0x402>
 800526e:	e015      	b.n	800529c <UART_SetConfig+0x424>
 8005270:	2b04      	cmp	r3, #4
 8005272:	d00a      	beq.n	800528a <UART_SetConfig+0x412>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d00d      	beq.n	8005294 <UART_SetConfig+0x41c>
 8005278:	e010      	b.n	800529c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800527a:	f7ff fb2d 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 800527e:	0003      	movs	r3, r0
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005282:	e015      	b.n	80052b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b6a      	ldr	r3, [pc, #424]	; (8005430 <UART_SetConfig+0x5b8>)
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005288:	e012      	b.n	80052b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7ff fa99 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800528e:	0003      	movs	r3, r0
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005292:	e00d      	b.n	80052b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800529a:	e009      	b.n	80052b0 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052a0:	231a      	movs	r3, #26
 80052a2:	2220      	movs	r2, #32
 80052a4:	4694      	mov	ip, r2
 80052a6:	44bc      	add	ip, r7
 80052a8:	4463      	add	r3, ip
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
        break;
 80052ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d100      	bne.n	80052b8 <UART_SetConfig+0x440>
 80052b6:	e09d      	b.n	80053f4 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052bc:	4b59      	ldr	r3, [pc, #356]	; (8005424 <UART_SetConfig+0x5ac>)
 80052be:	0052      	lsls	r2, r2, #1
 80052c0:	5ad3      	ldrh	r3, [r2, r3]
 80052c2:	0019      	movs	r1, r3
 80052c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052c6:	f7fa ff2f 	bl	8000128 <__udivsi3>
 80052ca:	0003      	movs	r3, r0
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	18d2      	adds	r2, r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	0019      	movs	r1, r3
 80052dc:	0010      	movs	r0, r2
 80052de:	f7fa ff23 	bl	8000128 <__udivsi3>
 80052e2:	0003      	movs	r3, r0
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d920      	bls.n	8005330 <UART_SetConfig+0x4b8>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	4a50      	ldr	r2, [pc, #320]	; (8005434 <UART_SetConfig+0x5bc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d81c      	bhi.n	8005330 <UART_SetConfig+0x4b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	200e      	movs	r0, #14
 80052fc:	2420      	movs	r4, #32
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	181b      	adds	r3, r3, r0
 8005302:	210f      	movs	r1, #15
 8005304:	438a      	bics	r2, r1
 8005306:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	b29b      	uxth	r3, r3
 800530e:	2207      	movs	r2, #7
 8005310:	4013      	ands	r3, r2
 8005312:	b299      	uxth	r1, r3
 8005314:	193b      	adds	r3, r7, r4
 8005316:	181b      	adds	r3, r3, r0
 8005318:	193a      	adds	r2, r7, r4
 800531a:	1812      	adds	r2, r2, r0
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	193a      	adds	r2, r7, r4
 8005328:	1812      	adds	r2, r2, r0
 800532a:	8812      	ldrh	r2, [r2, #0]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e061      	b.n	80053f4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	231a      	movs	r3, #26
 8005332:	2220      	movs	r2, #32
 8005334:	4694      	mov	ip, r2
 8005336:	44bc      	add	ip, r7
 8005338:	4463      	add	r3, ip
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e059      	b.n	80053f4 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005340:	231b      	movs	r3, #27
 8005342:	2220      	movs	r2, #32
 8005344:	4694      	mov	ip, r2
 8005346:	44bc      	add	ip, r7
 8005348:	4463      	add	r3, ip
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d00d      	beq.n	800536c <UART_SetConfig+0x4f4>
 8005350:	dc02      	bgt.n	8005358 <UART_SetConfig+0x4e0>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <UART_SetConfig+0x4ea>
 8005356:	e015      	b.n	8005384 <UART_SetConfig+0x50c>
 8005358:	2b04      	cmp	r3, #4
 800535a:	d00a      	beq.n	8005372 <UART_SetConfig+0x4fa>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d00d      	beq.n	800537c <UART_SetConfig+0x504>
 8005360:	e010      	b.n	8005384 <UART_SetConfig+0x50c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005362:	f7ff fab9 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8005366:	0003      	movs	r3, r0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800536a:	e015      	b.n	8005398 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <UART_SetConfig+0x5b8>)
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005370:	e012      	b.n	8005398 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7ff fa25 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8005376:	0003      	movs	r3, r0
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537a:	e00d      	b.n	8005398 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005382:	e009      	b.n	8005398 <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005388:	231a      	movs	r3, #26
 800538a:	2220      	movs	r2, #32
 800538c:	4694      	mov	ip, r2
 800538e:	44bc      	add	ip, r7
 8005390:	4463      	add	r3, ip
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
        break;
 8005396:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <UART_SetConfig+0x5ac>)
 80053a4:	0052      	lsls	r2, r2, #1
 80053a6:	5ad3      	ldrh	r3, [r2, r3]
 80053a8:	0019      	movs	r1, r3
 80053aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053ac:	f7fa febc 	bl	8000128 <__udivsi3>
 80053b0:	0003      	movs	r3, r0
 80053b2:	001a      	movs	r2, r3
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	18d2      	adds	r2, r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	0019      	movs	r1, r3
 80053c2:	0010      	movs	r0, r2
 80053c4:	f7fa feb0 	bl	8000128 <__udivsi3>
 80053c8:	0003      	movs	r3, r0
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d908      	bls.n	80053e6 <UART_SetConfig+0x56e>
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	4a17      	ldr	r2, [pc, #92]	; (8005434 <UART_SetConfig+0x5bc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d804      	bhi.n	80053e6 <UART_SetConfig+0x56e>
      {
        huart->Instance->BRR = usartdiv;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	e006      	b.n	80053f4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e6:	231a      	movs	r3, #26
 80053e8:	2220      	movs	r2, #32
 80053ea:	4694      	mov	ip, r2
 80053ec:	44bc      	add	ip, r7
 80053ee:	4463      	add	r3, ip
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	226a      	movs	r2, #106	; 0x6a
 80053f8:	2101      	movs	r1, #1
 80053fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	2268      	movs	r2, #104	; 0x68
 8005400:	2101      	movs	r1, #1
 8005402:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2200      	movs	r2, #0
 8005408:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2200      	movs	r2, #0
 800540e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005410:	231a      	movs	r3, #26
 8005412:	2220      	movs	r2, #32
 8005414:	4694      	mov	ip, r2
 8005416:	44bc      	add	ip, r7
 8005418:	4463      	add	r3, ip
 800541a:	781b      	ldrb	r3, [r3, #0]
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b011      	add	sp, #68	; 0x44
 8005422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005424:	0800a038 	.word	0x0800a038
 8005428:	000002ff 	.word	0x000002ff
 800542c:	000fffff 	.word	0x000fffff
 8005430:	00f42400 	.word	0x00f42400
 8005434:	0000ffff 	.word	0x0000ffff

08005438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2201      	movs	r2, #1
 8005446:	4013      	ands	r3, r2
 8005448:	d00b      	beq.n	8005462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a4a      	ldr	r2, [pc, #296]	; (800557c <UART_AdvFeatureConfig+0x144>)
 8005452:	4013      	ands	r3, r2
 8005454:	0019      	movs	r1, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	2202      	movs	r2, #2
 8005468:	4013      	ands	r3, r2
 800546a:	d00b      	beq.n	8005484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4a43      	ldr	r2, [pc, #268]	; (8005580 <UART_AdvFeatureConfig+0x148>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	2204      	movs	r2, #4
 800548a:	4013      	ands	r3, r2
 800548c:	d00b      	beq.n	80054a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a3b      	ldr	r2, [pc, #236]	; (8005584 <UART_AdvFeatureConfig+0x14c>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	2208      	movs	r2, #8
 80054ac:	4013      	ands	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4a34      	ldr	r2, [pc, #208]	; (8005588 <UART_AdvFeatureConfig+0x150>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	2210      	movs	r2, #16
 80054ce:	4013      	ands	r3, r2
 80054d0:	d00b      	beq.n	80054ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <UART_AdvFeatureConfig+0x154>)
 80054da:	4013      	ands	r3, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	2220      	movs	r2, #32
 80054f0:	4013      	ands	r3, r2
 80054f2:	d00b      	beq.n	800550c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4a25      	ldr	r2, [pc, #148]	; (8005590 <UART_AdvFeatureConfig+0x158>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	0019      	movs	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	4013      	ands	r3, r2
 8005514:	d01d      	beq.n	8005552 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <UART_AdvFeatureConfig+0x15c>)
 800551e:	4013      	ands	r3, r2
 8005520:	0019      	movs	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	035b      	lsls	r3, r3, #13
 8005536:	429a      	cmp	r2, r3
 8005538:	d10b      	bne.n	8005552 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <UART_AdvFeatureConfig+0x160>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	4013      	ands	r3, r2
 800555a:	d00b      	beq.n	8005574 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <UART_AdvFeatureConfig+0x164>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }
}
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	46bd      	mov	sp, r7
 8005578:	b002      	add	sp, #8
 800557a:	bd80      	pop	{r7, pc}
 800557c:	fffdffff 	.word	0xfffdffff
 8005580:	fffeffff 	.word	0xfffeffff
 8005584:	fffbffff 	.word	0xfffbffff
 8005588:	ffff7fff 	.word	0xffff7fff
 800558c:	ffffefff 	.word	0xffffefff
 8005590:	ffffdfff 	.word	0xffffdfff
 8005594:	ffefffff 	.word	0xffefffff
 8005598:	ff9fffff 	.word	0xff9fffff
 800559c:	fff7ffff 	.word	0xfff7ffff

080055a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	228c      	movs	r2, #140	; 0x8c
 80055ac:	2100      	movs	r1, #0
 80055ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055b0:	f7fd fcd6 	bl	8002f60 <HAL_GetTick>
 80055b4:	0003      	movs	r3, r0
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2208      	movs	r2, #8
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d10d      	bne.n	80055e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	0399      	lsls	r1, r3, #14
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4b19      	ldr	r3, [pc, #100]	; (8005634 <UART_CheckIdleState+0x94>)
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	0013      	movs	r3, r2
 80055d4:	2200      	movs	r2, #0
 80055d6:	f000 f82f 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 80055da:	1e03      	subs	r3, r0, #0
 80055dc:	d001      	beq.n	80055e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e024      	b.n	800562c <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2204      	movs	r2, #4
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d10d      	bne.n	800560c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	03d9      	lsls	r1, r3, #15
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <UART_CheckIdleState+0x94>)
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	0013      	movs	r3, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	f000 f81a 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d001      	beq.n	800560c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2284      	movs	r2, #132	; 0x84
 8005610:	2120      	movs	r1, #32
 8005612:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2288      	movs	r2, #136	; 0x88
 8005618:	2120      	movs	r1, #32
 800561a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	b004      	add	sp, #16
 8005632:	bd80      	pop	{r7, pc}
 8005634:	01ffffff 	.word	0x01ffffff

08005638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005648:	e062      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	3301      	adds	r3, #1
 800564e:	d05f      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fd fc86 	bl	8002f60 <HAL_GetTick>
 8005654:	0002      	movs	r2, r0
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11d      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4931      	ldr	r1, [pc, #196]	; (8005738 <UART_WaitOnFlagUntilTimeout+0x100>)
 8005672:	400a      	ands	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2101      	movs	r1, #1
 8005682:	438a      	bics	r2, r1
 8005684:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2284      	movs	r2, #132	; 0x84
 800568a:	2120      	movs	r1, #32
 800568c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2288      	movs	r2, #136	; 0x88
 8005692:	2120      	movs	r1, #32
 8005694:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e046      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2204      	movs	r2, #4
 80056aa:	4013      	ands	r3, r2
 80056ac:	d030      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	401a      	ands	r2, r3
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	429a      	cmp	r2, r3
 80056c0:	d126      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	0112      	lsls	r2, r2, #4
 80056ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4918      	ldr	r1, [pc, #96]	; (8005738 <UART_WaitOnFlagUntilTimeout+0x100>)
 80056d8:	400a      	ands	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2101      	movs	r1, #1
 80056e8:	438a      	bics	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2284      	movs	r2, #132	; 0x84
 80056f0:	2120      	movs	r1, #32
 80056f2:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2288      	movs	r2, #136	; 0x88
 80056f8:	2120      	movs	r1, #32
 80056fa:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	228c      	movs	r2, #140	; 0x8c
 8005700:	2120      	movs	r1, #32
 8005702:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	2100      	movs	r1, #0
 800570a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e00f      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	425a      	negs	r2, r3
 8005720:	4153      	adcs	r3, r2
 8005722:	b2db      	uxtb	r3, r3
 8005724:	001a      	movs	r2, r3
 8005726:	1dfb      	adds	r3, r7, #7
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d08d      	beq.n	800564a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b004      	add	sp, #16
 8005736:	bd80      	pop	{r7, pc}
 8005738:	fffffe5f 	.word	0xfffffe5f

0800573c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	5c9b      	ldrb	r3, [r3, r2]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UARTEx_DisableFifoMode+0x16>
 800574e:	2302      	movs	r3, #2
 8005750:	e027      	b.n	80057a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2284      	movs	r2, #132	; 0x84
 800575e:	2124      	movs	r1, #36	; 0x24
 8005760:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2284      	movs	r2, #132	; 0x84
 8005794:	2120      	movs	r1, #32
 8005796:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	2100      	movs	r1, #0
 800579e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	dfffffff 	.word	0xdfffffff

080057b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	5c9b      	ldrb	r3, [r3, r2]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e02e      	b.n	8005826 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	2101      	movs	r1, #1
 80057ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2284      	movs	r2, #132	; 0x84
 80057d4:	2124      	movs	r1, #36	; 0x24
 80057d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2101      	movs	r1, #1
 80057ec:	438a      	bics	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	08d9      	lsrs	r1, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0018      	movs	r0, r3
 8005808:	f000 f854 	bl	80058b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2284      	movs	r2, #132	; 0x84
 8005818:	2120      	movs	r1, #32
 800581a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2280      	movs	r2, #128	; 0x80
 8005820:	2100      	movs	r1, #0
 8005822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b004      	add	sp, #16
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e02f      	b.n	80058a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2284      	movs	r2, #132	; 0x84
 8005854:	2124      	movs	r1, #36	; 0x24
 8005856:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2101      	movs	r1, #1
 800586c:	438a      	bics	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4a0e      	ldr	r2, [pc, #56]	; (80058b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005878:	4013      	ands	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0018      	movs	r0, r3
 800588a:	f000 f813 	bl	80058b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2284      	movs	r2, #132	; 0x84
 800589a:	2120      	movs	r1, #32
 800589c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b004      	add	sp, #16
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	f1ffffff 	.word	0xf1ffffff

080058b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80058bc:	2314      	movs	r3, #20
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <UARTEx_SetNbDataToProcess+0xcc>)
 80058c2:	ca03      	ldmia	r2!, {r0, r1}
 80058c4:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80058c6:	230c      	movs	r3, #12
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <UARTEx_SetNbDataToProcess+0xd0>)
 80058cc:	ca03      	ldmia	r2!, {r0, r1}
 80058ce:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d108      	bne.n	80058ea <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	226a      	movs	r2, #106	; 0x6a
 80058dc:	2101      	movs	r1, #1
 80058de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2268      	movs	r2, #104	; 0x68
 80058e4:	2101      	movs	r1, #1
 80058e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058e8:	e046      	b.n	8005978 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058ea:	261f      	movs	r6, #31
 80058ec:	19bb      	adds	r3, r7, r6
 80058ee:	2208      	movs	r2, #8
 80058f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058f2:	201e      	movs	r0, #30
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	2208      	movs	r2, #8
 80058f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	0e5b      	lsrs	r3, r3, #25
 8005902:	b2da      	uxtb	r2, r3
 8005904:	241d      	movs	r4, #29
 8005906:	193b      	adds	r3, r7, r4
 8005908:	2107      	movs	r1, #7
 800590a:	400a      	ands	r2, r1
 800590c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0f5b      	lsrs	r3, r3, #29
 8005916:	b2da      	uxtb	r2, r3
 8005918:	251c      	movs	r5, #28
 800591a:	197b      	adds	r3, r7, r5
 800591c:	2107      	movs	r1, #7
 800591e:	400a      	ands	r2, r1
 8005920:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005922:	183b      	adds	r3, r7, r0
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	197a      	adds	r2, r7, r5
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	2114      	movs	r1, #20
 800592c:	1879      	adds	r1, r7, r1
 800592e:	5c8a      	ldrb	r2, [r1, r2]
 8005930:	435a      	muls	r2, r3
 8005932:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005934:	197b      	adds	r3, r7, r5
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	250c      	movs	r5, #12
 800593a:	197a      	adds	r2, r7, r5
 800593c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800593e:	0019      	movs	r1, r3
 8005940:	f7fa fc7c 	bl	800023c <__divsi3>
 8005944:	0003      	movs	r3, r0
 8005946:	b299      	uxth	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	226a      	movs	r2, #106	; 0x6a
 800594c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800594e:	19bb      	adds	r3, r7, r6
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	193a      	adds	r2, r7, r4
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	2114      	movs	r1, #20
 8005958:	1879      	adds	r1, r7, r1
 800595a:	5c8a      	ldrb	r2, [r1, r2]
 800595c:	435a      	muls	r2, r3
 800595e:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005960:	193b      	adds	r3, r7, r4
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	197a      	adds	r2, r7, r5
 8005966:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005968:	0019      	movs	r1, r3
 800596a:	f7fa fc67 	bl	800023c <__divsi3>
 800596e:	0003      	movs	r3, r0
 8005970:	b299      	uxth	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2268      	movs	r2, #104	; 0x68
 8005976:	5299      	strh	r1, [r3, r2]
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	b009      	add	sp, #36	; 0x24
 800597e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005980:	08009f48 	.word	0x08009f48
 8005984:	08009f50 	.word	0x08009f50

08005988 <__errno>:
 8005988:	4b01      	ldr	r3, [pc, #4]	; (8005990 <__errno+0x8>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	4770      	bx	lr
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	20000010 	.word	0x20000010

08005994 <__libc_init_array>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	2600      	movs	r6, #0
 8005998:	4d0c      	ldr	r5, [pc, #48]	; (80059cc <__libc_init_array+0x38>)
 800599a:	4c0d      	ldr	r4, [pc, #52]	; (80059d0 <__libc_init_array+0x3c>)
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	42a6      	cmp	r6, r4
 80059a2:	d109      	bne.n	80059b8 <__libc_init_array+0x24>
 80059a4:	2600      	movs	r6, #0
 80059a6:	f004 fab3 	bl	8009f10 <_init>
 80059aa:	4d0a      	ldr	r5, [pc, #40]	; (80059d4 <__libc_init_array+0x40>)
 80059ac:	4c0a      	ldr	r4, [pc, #40]	; (80059d8 <__libc_init_array+0x44>)
 80059ae:	1b64      	subs	r4, r4, r5
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	42a6      	cmp	r6, r4
 80059b4:	d105      	bne.n	80059c2 <__libc_init_array+0x2e>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	00b3      	lsls	r3, r6, #2
 80059ba:	58eb      	ldr	r3, [r5, r3]
 80059bc:	4798      	blx	r3
 80059be:	3601      	adds	r6, #1
 80059c0:	e7ee      	b.n	80059a0 <__libc_init_array+0xc>
 80059c2:	00b3      	lsls	r3, r6, #2
 80059c4:	58eb      	ldr	r3, [r5, r3]
 80059c6:	4798      	blx	r3
 80059c8:	3601      	adds	r6, #1
 80059ca:	e7f2      	b.n	80059b2 <__libc_init_array+0x1e>
 80059cc:	0800a378 	.word	0x0800a378
 80059d0:	0800a378 	.word	0x0800a378
 80059d4:	0800a378 	.word	0x0800a378
 80059d8:	0800a37c 	.word	0x0800a37c

080059dc <memset>:
 80059dc:	0003      	movs	r3, r0
 80059de:	1812      	adds	r2, r2, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	7019      	strb	r1, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <__cvt>:
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b08b      	sub	sp, #44	; 0x2c
 80059f0:	0014      	movs	r4, r2
 80059f2:	1e1d      	subs	r5, r3, #0
 80059f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80059f6:	da53      	bge.n	8005aa0 <__cvt+0xb4>
 80059f8:	2480      	movs	r4, #128	; 0x80
 80059fa:	0624      	lsls	r4, r4, #24
 80059fc:	191b      	adds	r3, r3, r4
 80059fe:	001d      	movs	r5, r3
 8005a00:	0014      	movs	r4, r2
 8005a02:	232d      	movs	r3, #45	; 0x2d
 8005a04:	700b      	strb	r3, [r1, #0]
 8005a06:	2320      	movs	r3, #32
 8005a08:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	439e      	bics	r6, r3
 8005a0e:	2e46      	cmp	r6, #70	; 0x46
 8005a10:	d007      	beq.n	8005a22 <__cvt+0x36>
 8005a12:	0033      	movs	r3, r6
 8005a14:	3b45      	subs	r3, #69	; 0x45
 8005a16:	4259      	negs	r1, r3
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005a1c:	3a01      	subs	r2, #1
 8005a1e:	18cb      	adds	r3, r1, r3
 8005a20:	9310      	str	r3, [sp, #64]	; 0x40
 8005a22:	ab09      	add	r3, sp, #36	; 0x24
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	ab08      	add	r3, sp, #32
 8005a28:	9303      	str	r3, [sp, #12]
 8005a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a2c:	9200      	str	r2, [sp, #0]
 8005a2e:	9302      	str	r3, [sp, #8]
 8005a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a32:	0022      	movs	r2, r4
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	002b      	movs	r3, r5
 8005a38:	f001 fdd8 	bl	80075ec <_dtoa_r>
 8005a3c:	0007      	movs	r7, r0
 8005a3e:	2e47      	cmp	r6, #71	; 0x47
 8005a40:	d102      	bne.n	8005a48 <__cvt+0x5c>
 8005a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a44:	07db      	lsls	r3, r3, #31
 8005a46:	d524      	bpl.n	8005a92 <__cvt+0xa6>
 8005a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	9307      	str	r3, [sp, #28]
 8005a4e:	2e46      	cmp	r6, #70	; 0x46
 8005a50:	d114      	bne.n	8005a7c <__cvt+0x90>
 8005a52:	783b      	ldrb	r3, [r7, #0]
 8005a54:	2b30      	cmp	r3, #48	; 0x30
 8005a56:	d10c      	bne.n	8005a72 <__cvt+0x86>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	0020      	movs	r0, r4
 8005a5e:	0029      	movs	r1, r5
 8005a60:	f7fa fce8 	bl	8000434 <__aeabi_dcmpeq>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d104      	bne.n	8005a72 <__cvt+0x86>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a74:	9a07      	ldr	r2, [sp, #28]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	0020      	movs	r0, r4
 8005a82:	0029      	movs	r1, r5
 8005a84:	f7fa fcd6 	bl	8000434 <__aeabi_dcmpeq>
 8005a88:	2230      	movs	r2, #48	; 0x30
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d00d      	beq.n	8005aaa <__cvt+0xbe>
 8005a8e:	9b07      	ldr	r3, [sp, #28]
 8005a90:	9309      	str	r3, [sp, #36]	; 0x24
 8005a92:	0038      	movs	r0, r7
 8005a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a98:	1bdb      	subs	r3, r3, r7
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	b00b      	add	sp, #44	; 0x2c
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e7af      	b.n	8005a04 <__cvt+0x18>
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aac:	9907      	ldr	r1, [sp, #28]
 8005aae:	428b      	cmp	r3, r1
 8005ab0:	d3f8      	bcc.n	8005aa4 <__cvt+0xb8>
 8005ab2:	e7ee      	b.n	8005a92 <__cvt+0xa6>

08005ab4 <__exponent>:
 8005ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab6:	1c83      	adds	r3, r0, #2
 8005ab8:	b085      	sub	sp, #20
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	0006      	movs	r6, r0
 8005abe:	000c      	movs	r4, r1
 8005ac0:	7002      	strb	r2, [r0, #0]
 8005ac2:	232b      	movs	r3, #43	; 0x2b
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	da01      	bge.n	8005acc <__exponent+0x18>
 8005ac8:	232d      	movs	r3, #45	; 0x2d
 8005aca:	424c      	negs	r4, r1
 8005acc:	7073      	strb	r3, [r6, #1]
 8005ace:	2c09      	cmp	r4, #9
 8005ad0:	dd22      	ble.n	8005b18 <__exponent+0x64>
 8005ad2:	ab02      	add	r3, sp, #8
 8005ad4:	1ddd      	adds	r5, r3, #7
 8005ad6:	0020      	movs	r0, r4
 8005ad8:	210a      	movs	r1, #10
 8005ada:	f7fa fc95 	bl	8000408 <__aeabi_idivmod>
 8005ade:	1e6f      	subs	r7, r5, #1
 8005ae0:	3130      	adds	r1, #48	; 0x30
 8005ae2:	7039      	strb	r1, [r7, #0]
 8005ae4:	0020      	movs	r0, r4
 8005ae6:	210a      	movs	r1, #10
 8005ae8:	f7fa fba8 	bl	800023c <__divsi3>
 8005aec:	0004      	movs	r4, r0
 8005aee:	2809      	cmp	r0, #9
 8005af0:	dc0b      	bgt.n	8005b0a <__exponent+0x56>
 8005af2:	3d02      	subs	r5, #2
 8005af4:	3430      	adds	r4, #48	; 0x30
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	702c      	strb	r4, [r5, #0]
 8005afa:	aa02      	add	r2, sp, #8
 8005afc:	3207      	adds	r2, #7
 8005afe:	0018      	movs	r0, r3
 8005b00:	42aa      	cmp	r2, r5
 8005b02:	d804      	bhi.n	8005b0e <__exponent+0x5a>
 8005b04:	1b80      	subs	r0, r0, r6
 8005b06:	b005      	add	sp, #20
 8005b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0a:	003d      	movs	r5, r7
 8005b0c:	e7e3      	b.n	8005ad6 <__exponent+0x22>
 8005b0e:	782a      	ldrb	r2, [r5, #0]
 8005b10:	3501      	adds	r5, #1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	e7f0      	b.n	8005afa <__exponent+0x46>
 8005b18:	2330      	movs	r3, #48	; 0x30
 8005b1a:	18e4      	adds	r4, r4, r3
 8005b1c:	70b3      	strb	r3, [r6, #2]
 8005b1e:	1d30      	adds	r0, r6, #4
 8005b20:	70f4      	strb	r4, [r6, #3]
 8005b22:	e7ef      	b.n	8005b04 <__exponent+0x50>

08005b24 <_printf_float>:
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	b095      	sub	sp, #84	; 0x54
 8005b28:	000c      	movs	r4, r1
 8005b2a:	920a      	str	r2, [sp, #40]	; 0x28
 8005b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005b30:	9009      	str	r0, [sp, #36]	; 0x24
 8005b32:	f002 ff47 	bl	80089c4 <_localeconv_r>
 8005b36:	6803      	ldr	r3, [r0, #0]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3c:	f7fa fae2 	bl	8000104 <strlen>
 8005b40:	2300      	movs	r3, #0
 8005b42:	9312      	str	r3, [sp, #72]	; 0x48
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	900e      	str	r0, [sp, #56]	; 0x38
 8005b48:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b4c:	7e27      	ldrb	r7, [r4, #24]
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	2207      	movs	r2, #7
 8005b52:	05c9      	lsls	r1, r1, #23
 8005b54:	d545      	bpl.n	8005be2 <_printf_float+0xbe>
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	4393      	bics	r3, r2
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	3208      	adds	r2, #8
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	64a2      	str	r2, [r4, #72]	; 0x48
 8005b66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005b68:	2201      	movs	r2, #1
 8005b6a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005b6c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8005b6e:	006b      	lsls	r3, r5, #1
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b74:	4252      	negs	r2, r2
 8005b76:	4bac      	ldr	r3, [pc, #688]	; (8005e28 <_printf_float+0x304>)
 8005b78:	0030      	movs	r0, r6
 8005b7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b7c:	f7fc fb68 	bl	8002250 <__aeabi_dcmpun>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d130      	bne.n	8005be6 <_printf_float+0xc2>
 8005b84:	2201      	movs	r2, #1
 8005b86:	4ba8      	ldr	r3, [pc, #672]	; (8005e28 <_printf_float+0x304>)
 8005b88:	4252      	negs	r2, r2
 8005b8a:	0030      	movs	r0, r6
 8005b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b8e:	f7fa fc61 	bl	8000454 <__aeabi_dcmple>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d127      	bne.n	8005be6 <_printf_float+0xc2>
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	0030      	movs	r0, r6
 8005b9c:	0029      	movs	r1, r5
 8005b9e:	f7fa fc4f 	bl	8000440 <__aeabi_dcmplt>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d003      	beq.n	8005bae <_printf_float+0x8a>
 8005ba6:	0023      	movs	r3, r4
 8005ba8:	222d      	movs	r2, #45	; 0x2d
 8005baa:	3343      	adds	r3, #67	; 0x43
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	4d9f      	ldr	r5, [pc, #636]	; (8005e2c <_printf_float+0x308>)
 8005bb0:	2f47      	cmp	r7, #71	; 0x47
 8005bb2:	d800      	bhi.n	8005bb6 <_printf_float+0x92>
 8005bb4:	4d9e      	ldr	r5, [pc, #632]	; (8005e30 <_printf_float+0x30c>)
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	2600      	movs	r6, #0
 8005bba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	439a      	bics	r2, r3
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc6:	aa13      	add	r2, sp, #76	; 0x4c
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	0021      	movs	r1, r4
 8005bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bd0:	f000 f9f4 	bl	8005fbc <_printf_common>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d000      	beq.n	8005bda <_printf_float+0xb6>
 8005bd8:	e093      	b.n	8005d02 <_printf_float+0x1de>
 8005bda:	2001      	movs	r0, #1
 8005bdc:	4240      	negs	r0, r0
 8005bde:	b015      	add	sp, #84	; 0x54
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be2:	3307      	adds	r3, #7
 8005be4:	e7b8      	b.n	8005b58 <_printf_float+0x34>
 8005be6:	0032      	movs	r2, r6
 8005be8:	002b      	movs	r3, r5
 8005bea:	0030      	movs	r0, r6
 8005bec:	0029      	movs	r1, r5
 8005bee:	f7fc fb2f 	bl	8002250 <__aeabi_dcmpun>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d004      	beq.n	8005c00 <_printf_float+0xdc>
 8005bf6:	4d8f      	ldr	r5, [pc, #572]	; (8005e34 <_printf_float+0x310>)
 8005bf8:	2f47      	cmp	r7, #71	; 0x47
 8005bfa:	d8dc      	bhi.n	8005bb6 <_printf_float+0x92>
 8005bfc:	4d8e      	ldr	r5, [pc, #568]	; (8005e38 <_printf_float+0x314>)
 8005bfe:	e7da      	b.n	8005bb6 <_printf_float+0x92>
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	1c51      	adds	r1, r2, #1
 8005c0c:	d143      	bne.n	8005c96 <_printf_float+0x172>
 8005c0e:	3207      	adds	r2, #7
 8005c10:	6062      	str	r2, [r4, #4]
 8005c12:	aa12      	add	r2, sp, #72	; 0x48
 8005c14:	2100      	movs	r1, #0
 8005c16:	9205      	str	r2, [sp, #20]
 8005c18:	aa11      	add	r2, sp, #68	; 0x44
 8005c1a:	9203      	str	r2, [sp, #12]
 8005c1c:	2223      	movs	r2, #35	; 0x23
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	9106      	str	r1, [sp, #24]
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	a908      	add	r1, sp, #32
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	1852      	adds	r2, r2, r1
 8005c2a:	9202      	str	r2, [sp, #8]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	0032      	movs	r2, r6
 8005c30:	002b      	movs	r3, r5
 8005c32:	9704      	str	r7, [sp, #16]
 8005c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c36:	f7ff fed9 	bl	80059ec <__cvt>
 8005c3a:	2320      	movs	r3, #32
 8005c3c:	003a      	movs	r2, r7
 8005c3e:	0005      	movs	r5, r0
 8005c40:	439a      	bics	r2, r3
 8005c42:	2a47      	cmp	r2, #71	; 0x47
 8005c44:	d107      	bne.n	8005c56 <_printf_float+0x132>
 8005c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c48:	1cda      	adds	r2, r3, #3
 8005c4a:	db02      	blt.n	8005c52 <_printf_float+0x12e>
 8005c4c:	6862      	ldr	r2, [r4, #4]
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	dd45      	ble.n	8005cde <_printf_float+0x1ba>
 8005c52:	3f02      	subs	r7, #2
 8005c54:	b2ff      	uxtb	r7, r7
 8005c56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c58:	2f65      	cmp	r7, #101	; 0x65
 8005c5a:	d825      	bhi.n	8005ca8 <_printf_float+0x184>
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	3901      	subs	r1, #1
 8005c60:	003a      	movs	r2, r7
 8005c62:	3050      	adds	r0, #80	; 0x50
 8005c64:	9111      	str	r1, [sp, #68]	; 0x44
 8005c66:	f7ff ff25 	bl	8005ab4 <__exponent>
 8005c6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c6c:	0006      	movs	r6, r0
 8005c6e:	1813      	adds	r3, r2, r0
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	2a01      	cmp	r2, #1
 8005c74:	dc02      	bgt.n	8005c7c <_printf_float+0x158>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	07d2      	lsls	r2, r2, #31
 8005c7a:	d501      	bpl.n	8005c80 <_printf_float+0x15c>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	2323      	movs	r3, #35	; 0x23
 8005c82:	aa08      	add	r2, sp, #32
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d09b      	beq.n	8005bc4 <_printf_float+0xa0>
 8005c8c:	0023      	movs	r3, r4
 8005c8e:	222d      	movs	r2, #45	; 0x2d
 8005c90:	3343      	adds	r3, #67	; 0x43
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e796      	b.n	8005bc4 <_printf_float+0xa0>
 8005c96:	2f67      	cmp	r7, #103	; 0x67
 8005c98:	d100      	bne.n	8005c9c <_printf_float+0x178>
 8005c9a:	e176      	b.n	8005f8a <_printf_float+0x466>
 8005c9c:	2f47      	cmp	r7, #71	; 0x47
 8005c9e:	d1b8      	bne.n	8005c12 <_printf_float+0xee>
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d1b6      	bne.n	8005c12 <_printf_float+0xee>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	e7b3      	b.n	8005c10 <_printf_float+0xec>
 8005ca8:	2f66      	cmp	r7, #102	; 0x66
 8005caa:	d119      	bne.n	8005ce0 <_printf_float+0x1bc>
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	dd0c      	ble.n	8005ccc <_printf_float+0x1a8>
 8005cb2:	6121      	str	r1, [r4, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <_printf_float+0x19a>
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	07d2      	lsls	r2, r2, #31
 8005cbc:	d502      	bpl.n	8005cc4 <_printf_float+0x1a0>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	185b      	adds	r3, r3, r1
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cca:	e7d9      	b.n	8005c80 <_printf_float+0x15c>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <_printf_float+0x1b4>
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	6821      	ldr	r1, [r4, #0]
 8005cd4:	4211      	tst	r1, r2
 8005cd6:	d000      	beq.n	8005cda <_printf_float+0x1b6>
 8005cd8:	1c9a      	adds	r2, r3, #2
 8005cda:	6122      	str	r2, [r4, #16]
 8005cdc:	e7f2      	b.n	8005cc4 <_printf_float+0x1a0>
 8005cde:	2767      	movs	r7, #103	; 0x67
 8005ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ce2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	db05      	blt.n	8005cf4 <_printf_float+0x1d0>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	07d2      	lsls	r2, r2, #31
 8005cee:	d5e9      	bpl.n	8005cc4 <_printf_float+0x1a0>
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	e7e6      	b.n	8005cc2 <_printf_float+0x19e>
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dc01      	bgt.n	8005cfe <_printf_float+0x1da>
 8005cfa:	1849      	adds	r1, r1, r1
 8005cfc:	1ac9      	subs	r1, r1, r3
 8005cfe:	1852      	adds	r2, r2, r1
 8005d00:	e7eb      	b.n	8005cda <_printf_float+0x1b6>
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	0553      	lsls	r3, r2, #21
 8005d06:	d408      	bmi.n	8005d1a <_printf_float+0x1f6>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	002a      	movs	r2, r5
 8005d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005d12:	47a8      	blx	r5
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d129      	bne.n	8005d6c <_printf_float+0x248>
 8005d18:	e75f      	b.n	8005bda <_printf_float+0xb6>
 8005d1a:	2f65      	cmp	r7, #101	; 0x65
 8005d1c:	d800      	bhi.n	8005d20 <_printf_float+0x1fc>
 8005d1e:	e0e0      	b.n	8005ee2 <_printf_float+0x3be>
 8005d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f7fa fb84 	bl	8000434 <__aeabi_dcmpeq>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d034      	beq.n	8005d9a <_printf_float+0x276>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4a42      	ldr	r2, [pc, #264]	; (8005e3c <_printf_float+0x318>)
 8005d34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005d3a:	47a8      	blx	r5
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d100      	bne.n	8005d42 <_printf_float+0x21e>
 8005d40:	e74b      	b.n	8005bda <_printf_float+0xb6>
 8005d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d46:	4293      	cmp	r3, r2
 8005d48:	db02      	blt.n	8005d50 <_printf_float+0x22c>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	07db      	lsls	r3, r3, #31
 8005d4e:	d50d      	bpl.n	8005d6c <_printf_float+0x248>
 8005d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d5a:	47a8      	blx	r5
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d100      	bne.n	8005d64 <_printf_float+0x240>
 8005d62:	e73a      	b.n	8005bda <_printf_float+0xb6>
 8005d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d66:	3b01      	subs	r3, #1
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dc0a      	bgt.n	8005d82 <_printf_float+0x25e>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d500      	bpl.n	8005d74 <_printf_float+0x250>
 8005d72:	e108      	b.n	8005f86 <_printf_float+0x462>
 8005d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d76:	68e0      	ldr	r0, [r4, #12]
 8005d78:	4298      	cmp	r0, r3
 8005d7a:	db00      	blt.n	8005d7e <_printf_float+0x25a>
 8005d7c:	e72f      	b.n	8005bde <_printf_float+0xba>
 8005d7e:	0018      	movs	r0, r3
 8005d80:	e72d      	b.n	8005bde <_printf_float+0xba>
 8005d82:	0022      	movs	r2, r4
 8005d84:	2301      	movs	r3, #1
 8005d86:	321a      	adds	r2, #26
 8005d88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d8e:	47b0      	blx	r6
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d100      	bne.n	8005d96 <_printf_float+0x272>
 8005d94:	e721      	b.n	8005bda <_printf_float+0xb6>
 8005d96:	3501      	adds	r5, #1
 8005d98:	e7e4      	b.n	8005d64 <_printf_float+0x240>
 8005d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dc2d      	bgt.n	8005dfc <_printf_float+0x2d8>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <_printf_float+0x318>)
 8005da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005da8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005daa:	47b0      	blx	r6
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d100      	bne.n	8005db2 <_printf_float+0x28e>
 8005db0:	e713      	b.n	8005bda <_printf_float+0xb6>
 8005db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <_printf_float+0x2a0>
 8005db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <_printf_float+0x2a0>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	07db      	lsls	r3, r3, #31
 8005dc2:	d5d3      	bpl.n	8005d6c <_printf_float+0x248>
 8005dc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dce:	47b0      	blx	r6
 8005dd0:	2600      	movs	r6, #0
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d100      	bne.n	8005dd8 <_printf_float+0x2b4>
 8005dd6:	e700      	b.n	8005bda <_printf_float+0xb6>
 8005dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dda:	425b      	negs	r3, r3
 8005ddc:	42b3      	cmp	r3, r6
 8005dde:	dc01      	bgt.n	8005de4 <_printf_float+0x2c0>
 8005de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de2:	e792      	b.n	8005d0a <_printf_float+0x1e6>
 8005de4:	0022      	movs	r2, r4
 8005de6:	2301      	movs	r3, #1
 8005de8:	321a      	adds	r2, #26
 8005dea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005df0:	47b8      	blx	r7
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d100      	bne.n	8005df8 <_printf_float+0x2d4>
 8005df6:	e6f0      	b.n	8005bda <_printf_float+0xb6>
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7ed      	b.n	8005dd8 <_printf_float+0x2b4>
 8005dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dfe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005e00:	429f      	cmp	r7, r3
 8005e02:	dd00      	ble.n	8005e06 <_printf_float+0x2e2>
 8005e04:	001f      	movs	r7, r3
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	dd08      	ble.n	8005e1c <_printf_float+0x2f8>
 8005e0a:	003b      	movs	r3, r7
 8005e0c:	002a      	movs	r2, r5
 8005e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e14:	47b0      	blx	r6
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d100      	bne.n	8005e1c <_printf_float+0x2f8>
 8005e1a:	e6de      	b.n	8005bda <_printf_float+0xb6>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e20:	43fb      	mvns	r3, r7
 8005e22:	17db      	asrs	r3, r3, #31
 8005e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e26:	e018      	b.n	8005e5a <_printf_float+0x336>
 8005e28:	7fefffff 	.word	0x7fefffff
 8005e2c:	0800a058 	.word	0x0800a058
 8005e30:	0800a054 	.word	0x0800a054
 8005e34:	0800a060 	.word	0x0800a060
 8005e38:	0800a05c 	.word	0x0800a05c
 8005e3c:	0800a064 	.word	0x0800a064
 8005e40:	0022      	movs	r2, r4
 8005e42:	2301      	movs	r3, #1
 8005e44:	321a      	adds	r2, #26
 8005e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e4c:	47b0      	blx	r6
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d100      	bne.n	8005e54 <_printf_float+0x330>
 8005e52:	e6c2      	b.n	8005bda <_printf_float+0xb6>
 8005e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e56:	3301      	adds	r3, #1
 8005e58:	930d      	str	r3, [sp, #52]	; 0x34
 8005e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e5c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005e5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e60:	403b      	ands	r3, r7
 8005e62:	1af3      	subs	r3, r6, r3
 8005e64:	4293      	cmp	r3, r2
 8005e66:	dceb      	bgt.n	8005e40 <_printf_float+0x31c>
 8005e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6c:	19ad      	adds	r5, r5, r6
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	db10      	blt.n	8005e94 <_printf_float+0x370>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	07db      	lsls	r3, r3, #31
 8005e76:	d40d      	bmi.n	8005e94 <_printf_float+0x370>
 8005e78:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7c:	1bbe      	subs	r6, r7, r6
 8005e7e:	1aff      	subs	r7, r7, r3
 8005e80:	42b7      	cmp	r7, r6
 8005e82:	dd00      	ble.n	8005e86 <_printf_float+0x362>
 8005e84:	0037      	movs	r7, r6
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	dc0d      	bgt.n	8005ea6 <_printf_float+0x382>
 8005e8a:	43fe      	mvns	r6, r7
 8005e8c:	17f3      	asrs	r3, r6, #31
 8005e8e:	2500      	movs	r5, #0
 8005e90:	930c      	str	r3, [sp, #48]	; 0x30
 8005e92:	e01c      	b.n	8005ece <_printf_float+0x3aa>
 8005e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005e9e:	47b8      	blx	r7
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d1e9      	bne.n	8005e78 <_printf_float+0x354>
 8005ea4:	e699      	b.n	8005bda <_printf_float+0xb6>
 8005ea6:	003b      	movs	r3, r7
 8005ea8:	002a      	movs	r2, r5
 8005eaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005eb0:	47a8      	blx	r5
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d1e9      	bne.n	8005e8a <_printf_float+0x366>
 8005eb6:	e690      	b.n	8005bda <_printf_float+0xb6>
 8005eb8:	0022      	movs	r2, r4
 8005eba:	2301      	movs	r3, #1
 8005ebc:	321a      	adds	r2, #26
 8005ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ec4:	47b0      	blx	r6
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d100      	bne.n	8005ecc <_printf_float+0x3a8>
 8005eca:	e686      	b.n	8005bda <_printf_float+0xb6>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	003a      	movs	r2, r7
 8005ed8:	400a      	ands	r2, r1
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dceb      	bgt.n	8005eb8 <_printf_float+0x394>
 8005ee0:	e744      	b.n	8005d6c <_printf_float+0x248>
 8005ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	dc02      	bgt.n	8005eee <_printf_float+0x3ca>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	421a      	tst	r2, r3
 8005eec:	d032      	beq.n	8005f54 <_printf_float+0x430>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	002a      	movs	r2, r5
 8005ef2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ef6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005ef8:	47b8      	blx	r7
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	d100      	bne.n	8005f00 <_printf_float+0x3dc>
 8005efe:	e66c      	b.n	8005bda <_printf_float+0xb6>
 8005f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005f0a:	3501      	adds	r5, #1
 8005f0c:	47b8      	blx	r7
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d100      	bne.n	8005f14 <_printf_float+0x3f0>
 8005f12:	e662      	b.n	8005bda <_printf_float+0xb6>
 8005f14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005f16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	1e5f      	subs	r7, r3, #1
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f7fa fa88 	bl	8000434 <__aeabi_dcmpeq>
 8005f24:	003b      	movs	r3, r7
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d014      	beq.n	8005f54 <_printf_float+0x430>
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	e00a      	b.n	8005f44 <_printf_float+0x420>
 8005f2e:	0022      	movs	r2, r4
 8005f30:	2301      	movs	r3, #1
 8005f32:	321a      	adds	r2, #26
 8005f34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005f3a:	47b8      	blx	r7
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d100      	bne.n	8005f42 <_printf_float+0x41e>
 8005f40:	e64b      	b.n	8005bda <_printf_float+0xb6>
 8005f42:	3501      	adds	r5, #1
 8005f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f46:	3b01      	subs	r3, #1
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dcf0      	bgt.n	8005f2e <_printf_float+0x40a>
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	0033      	movs	r3, r6
 8005f50:	3250      	adds	r2, #80	; 0x50
 8005f52:	e6db      	b.n	8005d0c <_printf_float+0x1e8>
 8005f54:	002a      	movs	r2, r5
 8005f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005f5c:	47a8      	blx	r5
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d1f4      	bne.n	8005f4c <_printf_float+0x428>
 8005f62:	e63a      	b.n	8005bda <_printf_float+0xb6>
 8005f64:	0022      	movs	r2, r4
 8005f66:	2301      	movs	r3, #1
 8005f68:	3219      	adds	r2, #25
 8005f6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f70:	47b0      	blx	r6
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d100      	bne.n	8005f78 <_printf_float+0x454>
 8005f76:	e630      	b.n	8005bda <_printf_float+0xb6>
 8005f78:	3501      	adds	r5, #1
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dcef      	bgt.n	8005f64 <_printf_float+0x440>
 8005f84:	e6f6      	b.n	8005d74 <_printf_float+0x250>
 8005f86:	2500      	movs	r5, #0
 8005f88:	e7f7      	b.n	8005f7a <_printf_float+0x456>
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d100      	bne.n	8005f90 <_printf_float+0x46c>
 8005f8e:	e689      	b.n	8005ca4 <_printf_float+0x180>
 8005f90:	2100      	movs	r1, #0
 8005f92:	9106      	str	r1, [sp, #24]
 8005f94:	a912      	add	r1, sp, #72	; 0x48
 8005f96:	9105      	str	r1, [sp, #20]
 8005f98:	a911      	add	r1, sp, #68	; 0x44
 8005f9a:	9103      	str	r1, [sp, #12]
 8005f9c:	2123      	movs	r1, #35	; 0x23
 8005f9e:	a808      	add	r0, sp, #32
 8005fa0:	1809      	adds	r1, r1, r0
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9200      	str	r2, [sp, #0]
 8005fa8:	002b      	movs	r3, r5
 8005faa:	9704      	str	r7, [sp, #16]
 8005fac:	9102      	str	r1, [sp, #8]
 8005fae:	0032      	movs	r2, r6
 8005fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fb2:	f7ff fd1b 	bl	80059ec <__cvt>
 8005fb6:	0005      	movs	r5, r0
 8005fb8:	e645      	b.n	8005c46 <_printf_float+0x122>
 8005fba:	46c0      	nop			; (mov r8, r8)

08005fbc <_printf_common>:
 8005fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fbe:	0015      	movs	r5, r2
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	688a      	ldr	r2, [r1, #8]
 8005fc4:	690b      	ldr	r3, [r1, #16]
 8005fc6:	9000      	str	r0, [sp, #0]
 8005fc8:	000c      	movs	r4, r1
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	da00      	bge.n	8005fd0 <_printf_common+0x14>
 8005fce:	0013      	movs	r3, r2
 8005fd0:	0022      	movs	r2, r4
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	3243      	adds	r2, #67	; 0x43
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d001      	beq.n	8005fe0 <_printf_common+0x24>
 8005fdc:	3301      	adds	r3, #1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	069b      	lsls	r3, r3, #26
 8005fe4:	d502      	bpl.n	8005fec <_printf_common+0x30>
 8005fe6:	682b      	ldr	r3, [r5, #0]
 8005fe8:	3302      	adds	r3, #2
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	2706      	movs	r7, #6
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	401f      	ands	r7, r3
 8005ff2:	d027      	beq.n	8006044 <_printf_common+0x88>
 8005ff4:	0023      	movs	r3, r4
 8005ff6:	3343      	adds	r3, #67	; 0x43
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	4193      	sbcs	r3, r2
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	0692      	lsls	r2, r2, #26
 8006002:	d430      	bmi.n	8006066 <_printf_common+0xaa>
 8006004:	0022      	movs	r2, r4
 8006006:	9901      	ldr	r1, [sp, #4]
 8006008:	3243      	adds	r2, #67	; 0x43
 800600a:	9800      	ldr	r0, [sp, #0]
 800600c:	9e08      	ldr	r6, [sp, #32]
 800600e:	47b0      	blx	r6
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d025      	beq.n	8006060 <_printf_common+0xa4>
 8006014:	2306      	movs	r3, #6
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	682a      	ldr	r2, [r5, #0]
 800601a:	68e1      	ldr	r1, [r4, #12]
 800601c:	4003      	ands	r3, r0
 800601e:	2500      	movs	r5, #0
 8006020:	2b04      	cmp	r3, #4
 8006022:	d103      	bne.n	800602c <_printf_common+0x70>
 8006024:	1a8d      	subs	r5, r1, r2
 8006026:	43eb      	mvns	r3, r5
 8006028:	17db      	asrs	r3, r3, #31
 800602a:	401d      	ands	r5, r3
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	4293      	cmp	r3, r2
 8006032:	dd01      	ble.n	8006038 <_printf_common+0x7c>
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	18ed      	adds	r5, r5, r3
 8006038:	2700      	movs	r7, #0
 800603a:	42bd      	cmp	r5, r7
 800603c:	d120      	bne.n	8006080 <_printf_common+0xc4>
 800603e:	2000      	movs	r0, #0
 8006040:	e010      	b.n	8006064 <_printf_common+0xa8>
 8006042:	3701      	adds	r7, #1
 8006044:	68e3      	ldr	r3, [r4, #12]
 8006046:	682a      	ldr	r2, [r5, #0]
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	42bb      	cmp	r3, r7
 800604c:	ddd2      	ble.n	8005ff4 <_printf_common+0x38>
 800604e:	0022      	movs	r2, r4
 8006050:	2301      	movs	r3, #1
 8006052:	3219      	adds	r2, #25
 8006054:	9901      	ldr	r1, [sp, #4]
 8006056:	9800      	ldr	r0, [sp, #0]
 8006058:	9e08      	ldr	r6, [sp, #32]
 800605a:	47b0      	blx	r6
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d1f0      	bne.n	8006042 <_printf_common+0x86>
 8006060:	2001      	movs	r0, #1
 8006062:	4240      	negs	r0, r0
 8006064:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006066:	2030      	movs	r0, #48	; 0x30
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	3143      	adds	r1, #67	; 0x43
 800606c:	7008      	strb	r0, [r1, #0]
 800606e:	0021      	movs	r1, r4
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	3145      	adds	r1, #69	; 0x45
 8006074:	7809      	ldrb	r1, [r1, #0]
 8006076:	18a2      	adds	r2, r4, r2
 8006078:	3243      	adds	r2, #67	; 0x43
 800607a:	3302      	adds	r3, #2
 800607c:	7011      	strb	r1, [r2, #0]
 800607e:	e7c1      	b.n	8006004 <_printf_common+0x48>
 8006080:	0022      	movs	r2, r4
 8006082:	2301      	movs	r3, #1
 8006084:	321a      	adds	r2, #26
 8006086:	9901      	ldr	r1, [sp, #4]
 8006088:	9800      	ldr	r0, [sp, #0]
 800608a:	9e08      	ldr	r6, [sp, #32]
 800608c:	47b0      	blx	r6
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	d0e6      	beq.n	8006060 <_printf_common+0xa4>
 8006092:	3701      	adds	r7, #1
 8006094:	e7d1      	b.n	800603a <_printf_common+0x7e>
	...

08006098 <_printf_i>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b089      	sub	sp, #36	; 0x24
 800609c:	9204      	str	r2, [sp, #16]
 800609e:	000a      	movs	r2, r1
 80060a0:	3243      	adds	r2, #67	; 0x43
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	9003      	str	r0, [sp, #12]
 80060a6:	9202      	str	r2, [sp, #8]
 80060a8:	7e0a      	ldrb	r2, [r1, #24]
 80060aa:	000c      	movs	r4, r1
 80060ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ae:	2a6e      	cmp	r2, #110	; 0x6e
 80060b0:	d100      	bne.n	80060b4 <_printf_i+0x1c>
 80060b2:	e086      	b.n	80061c2 <_printf_i+0x12a>
 80060b4:	d81f      	bhi.n	80060f6 <_printf_i+0x5e>
 80060b6:	2a63      	cmp	r2, #99	; 0x63
 80060b8:	d033      	beq.n	8006122 <_printf_i+0x8a>
 80060ba:	d808      	bhi.n	80060ce <_printf_i+0x36>
 80060bc:	2a00      	cmp	r2, #0
 80060be:	d100      	bne.n	80060c2 <_printf_i+0x2a>
 80060c0:	e08c      	b.n	80061dc <_printf_i+0x144>
 80060c2:	2a58      	cmp	r2, #88	; 0x58
 80060c4:	d04d      	beq.n	8006162 <_printf_i+0xca>
 80060c6:	0025      	movs	r5, r4
 80060c8:	3542      	adds	r5, #66	; 0x42
 80060ca:	702a      	strb	r2, [r5, #0]
 80060cc:	e030      	b.n	8006130 <_printf_i+0x98>
 80060ce:	2a64      	cmp	r2, #100	; 0x64
 80060d0:	d001      	beq.n	80060d6 <_printf_i+0x3e>
 80060d2:	2a69      	cmp	r2, #105	; 0x69
 80060d4:	d1f7      	bne.n	80060c6 <_printf_i+0x2e>
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	6825      	ldr	r5, [r4, #0]
 80060da:	1d0a      	adds	r2, r1, #4
 80060dc:	0628      	lsls	r0, r5, #24
 80060de:	d529      	bpl.n	8006134 <_printf_i+0x9c>
 80060e0:	6808      	ldr	r0, [r1, #0]
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	da03      	bge.n	80060f0 <_printf_i+0x58>
 80060e8:	232d      	movs	r3, #45	; 0x2d
 80060ea:	9a02      	ldr	r2, [sp, #8]
 80060ec:	4240      	negs	r0, r0
 80060ee:	7013      	strb	r3, [r2, #0]
 80060f0:	4e6b      	ldr	r6, [pc, #428]	; (80062a0 <_printf_i+0x208>)
 80060f2:	270a      	movs	r7, #10
 80060f4:	e04f      	b.n	8006196 <_printf_i+0xfe>
 80060f6:	2a73      	cmp	r2, #115	; 0x73
 80060f8:	d074      	beq.n	80061e4 <_printf_i+0x14c>
 80060fa:	d808      	bhi.n	800610e <_printf_i+0x76>
 80060fc:	2a6f      	cmp	r2, #111	; 0x6f
 80060fe:	d01f      	beq.n	8006140 <_printf_i+0xa8>
 8006100:	2a70      	cmp	r2, #112	; 0x70
 8006102:	d1e0      	bne.n	80060c6 <_printf_i+0x2e>
 8006104:	2220      	movs	r2, #32
 8006106:	6809      	ldr	r1, [r1, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	e003      	b.n	8006116 <_printf_i+0x7e>
 800610e:	2a75      	cmp	r2, #117	; 0x75
 8006110:	d016      	beq.n	8006140 <_printf_i+0xa8>
 8006112:	2a78      	cmp	r2, #120	; 0x78
 8006114:	d1d7      	bne.n	80060c6 <_printf_i+0x2e>
 8006116:	0022      	movs	r2, r4
 8006118:	2178      	movs	r1, #120	; 0x78
 800611a:	3245      	adds	r2, #69	; 0x45
 800611c:	7011      	strb	r1, [r2, #0]
 800611e:	4e61      	ldr	r6, [pc, #388]	; (80062a4 <_printf_i+0x20c>)
 8006120:	e022      	b.n	8006168 <_printf_i+0xd0>
 8006122:	0025      	movs	r5, r4
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	3542      	adds	r5, #66	; 0x42
 8006128:	1d11      	adds	r1, r2, #4
 800612a:	6019      	str	r1, [r3, #0]
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	702b      	strb	r3, [r5, #0]
 8006130:	2301      	movs	r3, #1
 8006132:	e065      	b.n	8006200 <_printf_i+0x168>
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	0669      	lsls	r1, r5, #25
 800613a:	d5d3      	bpl.n	80060e4 <_printf_i+0x4c>
 800613c:	b200      	sxth	r0, r0
 800613e:	e7d1      	b.n	80060e4 <_printf_i+0x4c>
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	1d08      	adds	r0, r1, #4
 8006146:	6018      	str	r0, [r3, #0]
 8006148:	6808      	ldr	r0, [r1, #0]
 800614a:	062e      	lsls	r6, r5, #24
 800614c:	d505      	bpl.n	800615a <_printf_i+0xc2>
 800614e:	4e54      	ldr	r6, [pc, #336]	; (80062a0 <_printf_i+0x208>)
 8006150:	2708      	movs	r7, #8
 8006152:	2a6f      	cmp	r2, #111	; 0x6f
 8006154:	d01b      	beq.n	800618e <_printf_i+0xf6>
 8006156:	270a      	movs	r7, #10
 8006158:	e019      	b.n	800618e <_printf_i+0xf6>
 800615a:	066d      	lsls	r5, r5, #25
 800615c:	d5f7      	bpl.n	800614e <_printf_i+0xb6>
 800615e:	b280      	uxth	r0, r0
 8006160:	e7f5      	b.n	800614e <_printf_i+0xb6>
 8006162:	3145      	adds	r1, #69	; 0x45
 8006164:	4e4e      	ldr	r6, [pc, #312]	; (80062a0 <_printf_i+0x208>)
 8006166:	700a      	strb	r2, [r1, #0]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	1d01      	adds	r1, r0, #4
 800616e:	6800      	ldr	r0, [r0, #0]
 8006170:	6019      	str	r1, [r3, #0]
 8006172:	0615      	lsls	r5, r2, #24
 8006174:	d521      	bpl.n	80061ba <_printf_i+0x122>
 8006176:	07d3      	lsls	r3, r2, #31
 8006178:	d502      	bpl.n	8006180 <_printf_i+0xe8>
 800617a:	2320      	movs	r3, #32
 800617c:	431a      	orrs	r2, r3
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	2710      	movs	r7, #16
 8006182:	2800      	cmp	r0, #0
 8006184:	d103      	bne.n	800618e <_printf_i+0xf6>
 8006186:	2320      	movs	r3, #32
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	439a      	bics	r2, r3
 800618c:	6022      	str	r2, [r4, #0]
 800618e:	0023      	movs	r3, r4
 8006190:	2200      	movs	r2, #0
 8006192:	3343      	adds	r3, #67	; 0x43
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	db58      	blt.n	8006250 <_printf_i+0x1b8>
 800619e:	2204      	movs	r2, #4
 80061a0:	6821      	ldr	r1, [r4, #0]
 80061a2:	4391      	bics	r1, r2
 80061a4:	6021      	str	r1, [r4, #0]
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d154      	bne.n	8006254 <_printf_i+0x1bc>
 80061aa:	9d02      	ldr	r5, [sp, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d05a      	beq.n	8006266 <_printf_i+0x1ce>
 80061b0:	0025      	movs	r5, r4
 80061b2:	7833      	ldrb	r3, [r6, #0]
 80061b4:	3542      	adds	r5, #66	; 0x42
 80061b6:	702b      	strb	r3, [r5, #0]
 80061b8:	e055      	b.n	8006266 <_printf_i+0x1ce>
 80061ba:	0655      	lsls	r5, r2, #25
 80061bc:	d5db      	bpl.n	8006176 <_printf_i+0xde>
 80061be:	b280      	uxth	r0, r0
 80061c0:	e7d9      	b.n	8006176 <_printf_i+0xde>
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	680d      	ldr	r5, [r1, #0]
 80061c6:	1d10      	adds	r0, r2, #4
 80061c8:	6949      	ldr	r1, [r1, #20]
 80061ca:	6018      	str	r0, [r3, #0]
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	062e      	lsls	r6, r5, #24
 80061d0:	d501      	bpl.n	80061d6 <_printf_i+0x13e>
 80061d2:	6019      	str	r1, [r3, #0]
 80061d4:	e002      	b.n	80061dc <_printf_i+0x144>
 80061d6:	066d      	lsls	r5, r5, #25
 80061d8:	d5fb      	bpl.n	80061d2 <_printf_i+0x13a>
 80061da:	8019      	strh	r1, [r3, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	9d02      	ldr	r5, [sp, #8]
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	e04f      	b.n	8006284 <_printf_i+0x1ec>
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	1d11      	adds	r1, r2, #4
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	6815      	ldr	r5, [r2, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	0028      	movs	r0, r5
 80061f2:	f002 fc0f 	bl	8008a14 <memchr>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d001      	beq.n	80061fe <_printf_i+0x166>
 80061fa:	1b40      	subs	r0, r0, r5
 80061fc:	6060      	str	r0, [r4, #4]
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	2300      	movs	r3, #0
 8006204:	9a02      	ldr	r2, [sp, #8]
 8006206:	7013      	strb	r3, [r2, #0]
 8006208:	e03c      	b.n	8006284 <_printf_i+0x1ec>
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	002a      	movs	r2, r5
 800620e:	9904      	ldr	r1, [sp, #16]
 8006210:	9803      	ldr	r0, [sp, #12]
 8006212:	9d05      	ldr	r5, [sp, #20]
 8006214:	47a8      	blx	r5
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d03e      	beq.n	8006298 <_printf_i+0x200>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	079b      	lsls	r3, r3, #30
 800621e:	d415      	bmi.n	800624c <_printf_i+0x1b4>
 8006220:	9b07      	ldr	r3, [sp, #28]
 8006222:	68e0      	ldr	r0, [r4, #12]
 8006224:	4298      	cmp	r0, r3
 8006226:	da39      	bge.n	800629c <_printf_i+0x204>
 8006228:	0018      	movs	r0, r3
 800622a:	e037      	b.n	800629c <_printf_i+0x204>
 800622c:	0022      	movs	r2, r4
 800622e:	2301      	movs	r3, #1
 8006230:	3219      	adds	r2, #25
 8006232:	9904      	ldr	r1, [sp, #16]
 8006234:	9803      	ldr	r0, [sp, #12]
 8006236:	9e05      	ldr	r6, [sp, #20]
 8006238:	47b0      	blx	r6
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	d02c      	beq.n	8006298 <_printf_i+0x200>
 800623e:	3501      	adds	r5, #1
 8006240:	68e3      	ldr	r3, [r4, #12]
 8006242:	9a07      	ldr	r2, [sp, #28]
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	42ab      	cmp	r3, r5
 8006248:	dcf0      	bgt.n	800622c <_printf_i+0x194>
 800624a:	e7e9      	b.n	8006220 <_printf_i+0x188>
 800624c:	2500      	movs	r5, #0
 800624e:	e7f7      	b.n	8006240 <_printf_i+0x1a8>
 8006250:	2800      	cmp	r0, #0
 8006252:	d0ad      	beq.n	80061b0 <_printf_i+0x118>
 8006254:	9d02      	ldr	r5, [sp, #8]
 8006256:	0039      	movs	r1, r7
 8006258:	f7f9 ffec 	bl	8000234 <__aeabi_uidivmod>
 800625c:	5c73      	ldrb	r3, [r6, r1]
 800625e:	3d01      	subs	r5, #1
 8006260:	702b      	strb	r3, [r5, #0]
 8006262:	2800      	cmp	r0, #0
 8006264:	d1f7      	bne.n	8006256 <_printf_i+0x1be>
 8006266:	2f08      	cmp	r7, #8
 8006268:	d109      	bne.n	800627e <_printf_i+0x1e6>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	07db      	lsls	r3, r3, #31
 800626e:	d506      	bpl.n	800627e <_printf_i+0x1e6>
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	6922      	ldr	r2, [r4, #16]
 8006274:	4293      	cmp	r3, r2
 8006276:	dc02      	bgt.n	800627e <_printf_i+0x1e6>
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	3d01      	subs	r5, #1
 800627c:	702b      	strb	r3, [r5, #0]
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	1b5b      	subs	r3, r3, r5
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	9b05      	ldr	r3, [sp, #20]
 8006286:	aa07      	add	r2, sp, #28
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	0021      	movs	r1, r4
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	9803      	ldr	r0, [sp, #12]
 8006290:	f7ff fe94 	bl	8005fbc <_printf_common>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d1b8      	bne.n	800620a <_printf_i+0x172>
 8006298:	2001      	movs	r0, #1
 800629a:	4240      	negs	r0, r0
 800629c:	b009      	add	sp, #36	; 0x24
 800629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a0:	0800a066 	.word	0x0800a066
 80062a4:	0800a077 	.word	0x0800a077

080062a8 <_scanf_float>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	b08b      	sub	sp, #44	; 0x2c
 80062ac:	9002      	str	r0, [sp, #8]
 80062ae:	9200      	str	r2, [sp, #0]
 80062b0:	2000      	movs	r0, #0
 80062b2:	22ae      	movs	r2, #174	; 0xae
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	688b      	ldr	r3, [r1, #8]
 80062b8:	000e      	movs	r6, r1
 80062ba:	1e59      	subs	r1, r3, #1
 80062bc:	0052      	lsls	r2, r2, #1
 80062be:	9004      	str	r0, [sp, #16]
 80062c0:	4291      	cmp	r1, r2
 80062c2:	d905      	bls.n	80062d0 <_scanf_float+0x28>
 80062c4:	3b5e      	subs	r3, #94	; 0x5e
 80062c6:	3bff      	subs	r3, #255	; 0xff
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	235e      	movs	r3, #94	; 0x5e
 80062cc:	33ff      	adds	r3, #255	; 0xff
 80062ce:	60b3      	str	r3, [r6, #8]
 80062d0:	23f0      	movs	r3, #240	; 0xf0
 80062d2:	6832      	ldr	r2, [r6, #0]
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	0033      	movs	r3, r6
 80062dc:	2700      	movs	r7, #0
 80062de:	331c      	adds	r3, #28
 80062e0:	001d      	movs	r5, r3
 80062e2:	003c      	movs	r4, r7
 80062e4:	9303      	str	r3, [sp, #12]
 80062e6:	9708      	str	r7, [sp, #32]
 80062e8:	9707      	str	r7, [sp, #28]
 80062ea:	9701      	str	r7, [sp, #4]
 80062ec:	9706      	str	r7, [sp, #24]
 80062ee:	68b2      	ldr	r2, [r6, #8]
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	d013      	beq.n	800631c <_scanf_float+0x74>
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b49      	cmp	r3, #73	; 0x49
 80062fe:	d100      	bne.n	8006302 <_scanf_float+0x5a>
 8006300:	e07c      	b.n	80063fc <_scanf_float+0x154>
 8006302:	d854      	bhi.n	80063ae <_scanf_float+0x106>
 8006304:	2b39      	cmp	r3, #57	; 0x39
 8006306:	d847      	bhi.n	8006398 <_scanf_float+0xf0>
 8006308:	2b31      	cmp	r3, #49	; 0x31
 800630a:	d300      	bcc.n	800630e <_scanf_float+0x66>
 800630c:	e094      	b.n	8006438 <_scanf_float+0x190>
 800630e:	2b2d      	cmp	r3, #45	; 0x2d
 8006310:	d100      	bne.n	8006314 <_scanf_float+0x6c>
 8006312:	e09c      	b.n	800644e <_scanf_float+0x1a6>
 8006314:	d817      	bhi.n	8006346 <_scanf_float+0x9e>
 8006316:	2b2b      	cmp	r3, #43	; 0x2b
 8006318:	d100      	bne.n	800631c <_scanf_float+0x74>
 800631a:	e098      	b.n	800644e <_scanf_float+0x1a6>
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <_scanf_float+0x82>
 8006322:	6832      	ldr	r2, [r6, #0]
 8006324:	4b9b      	ldr	r3, [pc, #620]	; (8006594 <_scanf_float+0x2ec>)
 8006326:	4013      	ands	r3, r2
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	3c01      	subs	r4, #1
 800632c:	2c01      	cmp	r4, #1
 800632e:	d900      	bls.n	8006332 <_scanf_float+0x8a>
 8006330:	e0ee      	b.n	8006510 <_scanf_float+0x268>
 8006332:	24be      	movs	r4, #190	; 0xbe
 8006334:	0064      	lsls	r4, r4, #1
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	429d      	cmp	r5, r3
 800633a:	d900      	bls.n	800633e <_scanf_float+0x96>
 800633c:	e0de      	b.n	80064fc <_scanf_float+0x254>
 800633e:	2701      	movs	r7, #1
 8006340:	0038      	movs	r0, r7
 8006342:	b00b      	add	sp, #44	; 0x2c
 8006344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006346:	2b2e      	cmp	r3, #46	; 0x2e
 8006348:	d100      	bne.n	800634c <_scanf_float+0xa4>
 800634a:	e0a2      	b.n	8006492 <_scanf_float+0x1ea>
 800634c:	2b30      	cmp	r3, #48	; 0x30
 800634e:	d1e5      	bne.n	800631c <_scanf_float+0x74>
 8006350:	6831      	ldr	r1, [r6, #0]
 8006352:	05c8      	lsls	r0, r1, #23
 8006354:	d570      	bpl.n	8006438 <_scanf_float+0x190>
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	4399      	bics	r1, r3
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	6031      	str	r1, [r6, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	9b04      	ldr	r3, [sp, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <_scanf_float+0xc8>
 8006368:	3b01      	subs	r3, #1
 800636a:	3201      	adds	r2, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	60b2      	str	r2, [r6, #8]
 8006370:	68b3      	ldr	r3, [r6, #8]
 8006372:	9a00      	ldr	r2, [sp, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	60b3      	str	r3, [r6, #8]
 8006378:	6933      	ldr	r3, [r6, #16]
 800637a:	3301      	adds	r3, #1
 800637c:	6133      	str	r3, [r6, #16]
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	3b01      	subs	r3, #1
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc00      	bgt.n	800638e <_scanf_float+0xe6>
 800638c:	e0ac      	b.n	80064e8 <_scanf_float+0x240>
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	3301      	adds	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e7aa      	b.n	80062ee <_scanf_float+0x46>
 8006398:	2b45      	cmp	r3, #69	; 0x45
 800639a:	d100      	bne.n	800639e <_scanf_float+0xf6>
 800639c:	e083      	b.n	80064a6 <_scanf_float+0x1fe>
 800639e:	2b46      	cmp	r3, #70	; 0x46
 80063a0:	d06d      	beq.n	800647e <_scanf_float+0x1d6>
 80063a2:	2b41      	cmp	r3, #65	; 0x41
 80063a4:	d1ba      	bne.n	800631c <_scanf_float+0x74>
 80063a6:	2c01      	cmp	r4, #1
 80063a8:	d1b8      	bne.n	800631c <_scanf_float+0x74>
 80063aa:	2402      	movs	r4, #2
 80063ac:	e04c      	b.n	8006448 <_scanf_float+0x1a0>
 80063ae:	2b65      	cmp	r3, #101	; 0x65
 80063b0:	d079      	beq.n	80064a6 <_scanf_float+0x1fe>
 80063b2:	d81b      	bhi.n	80063ec <_scanf_float+0x144>
 80063b4:	2b54      	cmp	r3, #84	; 0x54
 80063b6:	d067      	beq.n	8006488 <_scanf_float+0x1e0>
 80063b8:	d813      	bhi.n	80063e2 <_scanf_float+0x13a>
 80063ba:	2b4e      	cmp	r3, #78	; 0x4e
 80063bc:	d1ae      	bne.n	800631c <_scanf_float+0x74>
 80063be:	2c00      	cmp	r4, #0
 80063c0:	d14c      	bne.n	800645c <_scanf_float+0x1b4>
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	d14b      	bne.n	8006460 <_scanf_float+0x1b8>
 80063c8:	21e0      	movs	r1, #224	; 0xe0
 80063ca:	20e0      	movs	r0, #224	; 0xe0
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	00c9      	lsls	r1, r1, #3
 80063d0:	4011      	ands	r1, r2
 80063d2:	00c0      	lsls	r0, r0, #3
 80063d4:	4281      	cmp	r1, r0
 80063d6:	d143      	bne.n	8006460 <_scanf_float+0x1b8>
 80063d8:	496f      	ldr	r1, [pc, #444]	; (8006598 <_scanf_float+0x2f0>)
 80063da:	3401      	adds	r4, #1
 80063dc:	400a      	ands	r2, r1
 80063de:	6032      	str	r2, [r6, #0]
 80063e0:	e032      	b.n	8006448 <_scanf_float+0x1a0>
 80063e2:	2b59      	cmp	r3, #89	; 0x59
 80063e4:	d023      	beq.n	800642e <_scanf_float+0x186>
 80063e6:	2b61      	cmp	r3, #97	; 0x61
 80063e8:	d0dd      	beq.n	80063a6 <_scanf_float+0xfe>
 80063ea:	e797      	b.n	800631c <_scanf_float+0x74>
 80063ec:	2b6e      	cmp	r3, #110	; 0x6e
 80063ee:	d0e6      	beq.n	80063be <_scanf_float+0x116>
 80063f0:	d818      	bhi.n	8006424 <_scanf_float+0x17c>
 80063f2:	2b66      	cmp	r3, #102	; 0x66
 80063f4:	d043      	beq.n	800647e <_scanf_float+0x1d6>
 80063f6:	2b69      	cmp	r3, #105	; 0x69
 80063f8:	d000      	beq.n	80063fc <_scanf_float+0x154>
 80063fa:	e78f      	b.n	800631c <_scanf_float+0x74>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	d137      	bne.n	8006470 <_scanf_float+0x1c8>
 8006400:	9a01      	ldr	r2, [sp, #4]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d000      	beq.n	8006408 <_scanf_float+0x160>
 8006406:	e78c      	b.n	8006322 <_scanf_float+0x7a>
 8006408:	21e0      	movs	r1, #224	; 0xe0
 800640a:	20e0      	movs	r0, #224	; 0xe0
 800640c:	6832      	ldr	r2, [r6, #0]
 800640e:	00c9      	lsls	r1, r1, #3
 8006410:	4011      	ands	r1, r2
 8006412:	00c0      	lsls	r0, r0, #3
 8006414:	4281      	cmp	r1, r0
 8006416:	d000      	beq.n	800641a <_scanf_float+0x172>
 8006418:	e787      	b.n	800632a <_scanf_float+0x82>
 800641a:	495f      	ldr	r1, [pc, #380]	; (8006598 <_scanf_float+0x2f0>)
 800641c:	3701      	adds	r7, #1
 800641e:	400a      	ands	r2, r1
 8006420:	6032      	str	r2, [r6, #0]
 8006422:	e011      	b.n	8006448 <_scanf_float+0x1a0>
 8006424:	2b74      	cmp	r3, #116	; 0x74
 8006426:	d02f      	beq.n	8006488 <_scanf_float+0x1e0>
 8006428:	2b79      	cmp	r3, #121	; 0x79
 800642a:	d000      	beq.n	800642e <_scanf_float+0x186>
 800642c:	e776      	b.n	800631c <_scanf_float+0x74>
 800642e:	2f07      	cmp	r7, #7
 8006430:	d000      	beq.n	8006434 <_scanf_float+0x18c>
 8006432:	e773      	b.n	800631c <_scanf_float+0x74>
 8006434:	2708      	movs	r7, #8
 8006436:	e007      	b.n	8006448 <_scanf_float+0x1a0>
 8006438:	19e2      	adds	r2, r4, r7
 800643a:	2a00      	cmp	r2, #0
 800643c:	d000      	beq.n	8006440 <_scanf_float+0x198>
 800643e:	e76d      	b.n	800631c <_scanf_float+0x74>
 8006440:	4a56      	ldr	r2, [pc, #344]	; (800659c <_scanf_float+0x2f4>)
 8006442:	6831      	ldr	r1, [r6, #0]
 8006444:	400a      	ands	r2, r1
 8006446:	6032      	str	r2, [r6, #0]
 8006448:	702b      	strb	r3, [r5, #0]
 800644a:	3501      	adds	r5, #1
 800644c:	e790      	b.n	8006370 <_scanf_float+0xc8>
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	6832      	ldr	r2, [r6, #0]
 8006452:	420a      	tst	r2, r1
 8006454:	d100      	bne.n	8006458 <_scanf_float+0x1b0>
 8006456:	e761      	b.n	800631c <_scanf_float+0x74>
 8006458:	438a      	bics	r2, r1
 800645a:	e7f4      	b.n	8006446 <_scanf_float+0x19e>
 800645c:	2c02      	cmp	r4, #2
 800645e:	d041      	beq.n	80064e4 <_scanf_float+0x23c>
 8006460:	2f01      	cmp	r7, #1
 8006462:	d002      	beq.n	800646a <_scanf_float+0x1c2>
 8006464:	2f04      	cmp	r7, #4
 8006466:	d000      	beq.n	800646a <_scanf_float+0x1c2>
 8006468:	e758      	b.n	800631c <_scanf_float+0x74>
 800646a:	3701      	adds	r7, #1
 800646c:	b2ff      	uxtb	r7, r7
 800646e:	e7eb      	b.n	8006448 <_scanf_float+0x1a0>
 8006470:	2102      	movs	r1, #2
 8006472:	1efa      	subs	r2, r7, #3
 8006474:	438a      	bics	r2, r1
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	2a00      	cmp	r2, #0
 800647a:	d0f6      	beq.n	800646a <_scanf_float+0x1c2>
 800647c:	e74e      	b.n	800631c <_scanf_float+0x74>
 800647e:	2f02      	cmp	r7, #2
 8006480:	d000      	beq.n	8006484 <_scanf_float+0x1dc>
 8006482:	e74b      	b.n	800631c <_scanf_float+0x74>
 8006484:	2703      	movs	r7, #3
 8006486:	e7df      	b.n	8006448 <_scanf_float+0x1a0>
 8006488:	2f06      	cmp	r7, #6
 800648a:	d000      	beq.n	800648e <_scanf_float+0x1e6>
 800648c:	e746      	b.n	800631c <_scanf_float+0x74>
 800648e:	2707      	movs	r7, #7
 8006490:	e7da      	b.n	8006448 <_scanf_float+0x1a0>
 8006492:	6832      	ldr	r2, [r6, #0]
 8006494:	0591      	lsls	r1, r2, #22
 8006496:	d400      	bmi.n	800649a <_scanf_float+0x1f2>
 8006498:	e740      	b.n	800631c <_scanf_float+0x74>
 800649a:	4941      	ldr	r1, [pc, #260]	; (80065a0 <_scanf_float+0x2f8>)
 800649c:	400a      	ands	r2, r1
 800649e:	6032      	str	r2, [r6, #0]
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	9206      	str	r2, [sp, #24]
 80064a4:	e7d0      	b.n	8006448 <_scanf_float+0x1a0>
 80064a6:	21a0      	movs	r1, #160	; 0xa0
 80064a8:	2080      	movs	r0, #128	; 0x80
 80064aa:	6832      	ldr	r2, [r6, #0]
 80064ac:	00c9      	lsls	r1, r1, #3
 80064ae:	4011      	ands	r1, r2
 80064b0:	00c0      	lsls	r0, r0, #3
 80064b2:	4281      	cmp	r1, r0
 80064b4:	d006      	beq.n	80064c4 <_scanf_float+0x21c>
 80064b6:	4202      	tst	r2, r0
 80064b8:	d100      	bne.n	80064bc <_scanf_float+0x214>
 80064ba:	e72f      	b.n	800631c <_scanf_float+0x74>
 80064bc:	9901      	ldr	r1, [sp, #4]
 80064be:	2900      	cmp	r1, #0
 80064c0:	d100      	bne.n	80064c4 <_scanf_float+0x21c>
 80064c2:	e732      	b.n	800632a <_scanf_float+0x82>
 80064c4:	0591      	lsls	r1, r2, #22
 80064c6:	d404      	bmi.n	80064d2 <_scanf_float+0x22a>
 80064c8:	9901      	ldr	r1, [sp, #4]
 80064ca:	9806      	ldr	r0, [sp, #24]
 80064cc:	9508      	str	r5, [sp, #32]
 80064ce:	1a09      	subs	r1, r1, r0
 80064d0:	9107      	str	r1, [sp, #28]
 80064d2:	4931      	ldr	r1, [pc, #196]	; (8006598 <_scanf_float+0x2f0>)
 80064d4:	400a      	ands	r2, r1
 80064d6:	21c0      	movs	r1, #192	; 0xc0
 80064d8:	0049      	lsls	r1, r1, #1
 80064da:	430a      	orrs	r2, r1
 80064dc:	6032      	str	r2, [r6, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	9201      	str	r2, [sp, #4]
 80064e2:	e7b1      	b.n	8006448 <_scanf_float+0x1a0>
 80064e4:	2403      	movs	r4, #3
 80064e6:	e7af      	b.n	8006448 <_scanf_float+0x1a0>
 80064e8:	23c0      	movs	r3, #192	; 0xc0
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	58f3      	ldr	r3, [r6, r3]
 80064ee:	9900      	ldr	r1, [sp, #0]
 80064f0:	9802      	ldr	r0, [sp, #8]
 80064f2:	4798      	blx	r3
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d100      	bne.n	80064fa <_scanf_float+0x252>
 80064f8:	e6f9      	b.n	80062ee <_scanf_float+0x46>
 80064fa:	e70f      	b.n	800631c <_scanf_float+0x74>
 80064fc:	3d01      	subs	r5, #1
 80064fe:	5933      	ldr	r3, [r6, r4]
 8006500:	7829      	ldrb	r1, [r5, #0]
 8006502:	9a00      	ldr	r2, [sp, #0]
 8006504:	9802      	ldr	r0, [sp, #8]
 8006506:	4798      	blx	r3
 8006508:	6933      	ldr	r3, [r6, #16]
 800650a:	3b01      	subs	r3, #1
 800650c:	6133      	str	r3, [r6, #16]
 800650e:	e712      	b.n	8006336 <_scanf_float+0x8e>
 8006510:	1e7b      	subs	r3, r7, #1
 8006512:	2b06      	cmp	r3, #6
 8006514:	d826      	bhi.n	8006564 <_scanf_float+0x2bc>
 8006516:	2f02      	cmp	r7, #2
 8006518:	d839      	bhi.n	800658e <_scanf_float+0x2e6>
 800651a:	24be      	movs	r4, #190	; 0xbe
 800651c:	0064      	lsls	r4, r4, #1
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	429d      	cmp	r5, r3
 8006522:	d800      	bhi.n	8006526 <_scanf_float+0x27e>
 8006524:	e70b      	b.n	800633e <_scanf_float+0x96>
 8006526:	3d01      	subs	r5, #1
 8006528:	5933      	ldr	r3, [r6, r4]
 800652a:	7829      	ldrb	r1, [r5, #0]
 800652c:	9a00      	ldr	r2, [sp, #0]
 800652e:	9802      	ldr	r0, [sp, #8]
 8006530:	4798      	blx	r3
 8006532:	6933      	ldr	r3, [r6, #16]
 8006534:	3b01      	subs	r3, #1
 8006536:	6133      	str	r3, [r6, #16]
 8006538:	e7f1      	b.n	800651e <_scanf_float+0x276>
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	9a00      	ldr	r2, [sp, #0]
 800653e:	3b01      	subs	r3, #1
 8006540:	9304      	str	r3, [sp, #16]
 8006542:	7819      	ldrb	r1, [r3, #0]
 8006544:	23be      	movs	r3, #190	; 0xbe
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	58f3      	ldr	r3, [r6, r3]
 800654a:	9802      	ldr	r0, [sp, #8]
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
 800654e:	4798      	blx	r3
 8006550:	6933      	ldr	r3, [r6, #16]
 8006552:	3b01      	subs	r3, #1
 8006554:	6133      	str	r3, [r6, #16]
 8006556:	3c01      	subs	r4, #1
 8006558:	b2e4      	uxtb	r4, r4
 800655a:	2c02      	cmp	r4, #2
 800655c:	d1ed      	bne.n	800653a <_scanf_float+0x292>
 800655e:	3f03      	subs	r7, #3
 8006560:	b2ff      	uxtb	r7, r7
 8006562:	1bed      	subs	r5, r5, r7
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	05da      	lsls	r2, r3, #23
 8006568:	d537      	bpl.n	80065da <_scanf_float+0x332>
 800656a:	055b      	lsls	r3, r3, #21
 800656c:	d51a      	bpl.n	80065a4 <_scanf_float+0x2fc>
 800656e:	24be      	movs	r4, #190	; 0xbe
 8006570:	0064      	lsls	r4, r4, #1
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	429d      	cmp	r5, r3
 8006576:	d800      	bhi.n	800657a <_scanf_float+0x2d2>
 8006578:	e6e1      	b.n	800633e <_scanf_float+0x96>
 800657a:	3d01      	subs	r5, #1
 800657c:	5933      	ldr	r3, [r6, r4]
 800657e:	7829      	ldrb	r1, [r5, #0]
 8006580:	9a00      	ldr	r2, [sp, #0]
 8006582:	9802      	ldr	r0, [sp, #8]
 8006584:	4798      	blx	r3
 8006586:	6933      	ldr	r3, [r6, #16]
 8006588:	3b01      	subs	r3, #1
 800658a:	6133      	str	r3, [r6, #16]
 800658c:	e7f1      	b.n	8006572 <_scanf_float+0x2ca>
 800658e:	003c      	movs	r4, r7
 8006590:	9504      	str	r5, [sp, #16]
 8006592:	e7e0      	b.n	8006556 <_scanf_float+0x2ae>
 8006594:	fffffeff 	.word	0xfffffeff
 8006598:	fffff87f 	.word	0xfffff87f
 800659c:	fffffe7f 	.word	0xfffffe7f
 80065a0:	fffffd7f 	.word	0xfffffd7f
 80065a4:	6933      	ldr	r3, [r6, #16]
 80065a6:	1e6c      	subs	r4, r5, #1
 80065a8:	7821      	ldrb	r1, [r4, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6133      	str	r3, [r6, #16]
 80065ae:	2965      	cmp	r1, #101	; 0x65
 80065b0:	d00c      	beq.n	80065cc <_scanf_float+0x324>
 80065b2:	2945      	cmp	r1, #69	; 0x45
 80065b4:	d00a      	beq.n	80065cc <_scanf_float+0x324>
 80065b6:	23be      	movs	r3, #190	; 0xbe
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	58f3      	ldr	r3, [r6, r3]
 80065bc:	9a00      	ldr	r2, [sp, #0]
 80065be:	9802      	ldr	r0, [sp, #8]
 80065c0:	4798      	blx	r3
 80065c2:	6933      	ldr	r3, [r6, #16]
 80065c4:	1eac      	subs	r4, r5, #2
 80065c6:	3b01      	subs	r3, #1
 80065c8:	7821      	ldrb	r1, [r4, #0]
 80065ca:	6133      	str	r3, [r6, #16]
 80065cc:	23be      	movs	r3, #190	; 0xbe
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	58f3      	ldr	r3, [r6, r3]
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	9802      	ldr	r0, [sp, #8]
 80065d6:	4798      	blx	r3
 80065d8:	0025      	movs	r5, r4
 80065da:	2710      	movs	r7, #16
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	401f      	ands	r7, r3
 80065e0:	d15b      	bne.n	800669a <_scanf_float+0x3f2>
 80065e2:	23c0      	movs	r3, #192	; 0xc0
 80065e4:	702f      	strb	r7, [r5, #0]
 80065e6:	6832      	ldr	r2, [r6, #0]
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4013      	ands	r3, r2
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	00d2      	lsls	r2, r2, #3
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d11b      	bne.n	800662c <_scanf_float+0x384>
 80065f4:	9a06      	ldr	r2, [sp, #24]
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	425a      	negs	r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d122      	bne.n	8006646 <_scanf_float+0x39e>
 8006600:	2200      	movs	r2, #0
 8006602:	9903      	ldr	r1, [sp, #12]
 8006604:	9802      	ldr	r0, [sp, #8]
 8006606:	f000 fecb 	bl	80073a0 <_strtod_r>
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	0004      	movs	r4, r0
 800660e:	6830      	ldr	r0, [r6, #0]
 8006610:	000d      	movs	r5, r1
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	0782      	lsls	r2, r0, #30
 8006616:	d523      	bpl.n	8006660 <_scanf_float+0x3b8>
 8006618:	1d1a      	adds	r2, r3, #4
 800661a:	9905      	ldr	r1, [sp, #20]
 800661c:	600a      	str	r2, [r1, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	601c      	str	r4, [r3, #0]
 8006622:	605d      	str	r5, [r3, #4]
 8006624:	68f3      	ldr	r3, [r6, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60f3      	str	r3, [r6, #12]
 800662a:	e689      	b.n	8006340 <_scanf_float+0x98>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0e6      	beq.n	8006600 <_scanf_float+0x358>
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	003a      	movs	r2, r7
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	9802      	ldr	r0, [sp, #8]
 800663a:	230a      	movs	r3, #10
 800663c:	f000 ff40 	bl	80074c0 <_strtol_r>
 8006640:	9b07      	ldr	r3, [sp, #28]
 8006642:	9d08      	ldr	r5, [sp, #32]
 8006644:	1ac2      	subs	r2, r0, r3
 8006646:	0033      	movs	r3, r6
 8006648:	3370      	adds	r3, #112	; 0x70
 800664a:	33ff      	adds	r3, #255	; 0xff
 800664c:	429d      	cmp	r5, r3
 800664e:	d302      	bcc.n	8006656 <_scanf_float+0x3ae>
 8006650:	0035      	movs	r5, r6
 8006652:	356f      	adds	r5, #111	; 0x6f
 8006654:	35ff      	adds	r5, #255	; 0xff
 8006656:	4912      	ldr	r1, [pc, #72]	; (80066a0 <_scanf_float+0x3f8>)
 8006658:	0028      	movs	r0, r5
 800665a:	f000 f841 	bl	80066e0 <siprintf>
 800665e:	e7cf      	b.n	8006600 <_scanf_float+0x358>
 8006660:	2104      	movs	r1, #4
 8006662:	4008      	ands	r0, r1
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	9001      	str	r0, [sp, #4]
 8006668:	2800      	cmp	r0, #0
 800666a:	d1d6      	bne.n	800661a <_scanf_float+0x372>
 800666c:	9905      	ldr	r1, [sp, #20]
 800666e:	0020      	movs	r0, r4
 8006670:	600a      	str	r2, [r1, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	0022      	movs	r2, r4
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	0029      	movs	r1, r5
 800667a:	002b      	movs	r3, r5
 800667c:	f7fb fde8 	bl	8002250 <__aeabi_dcmpun>
 8006680:	2800      	cmp	r0, #0
 8006682:	d005      	beq.n	8006690 <_scanf_float+0x3e8>
 8006684:	9801      	ldr	r0, [sp, #4]
 8006686:	f000 f827 	bl	80066d8 <nanf>
 800668a:	9b00      	ldr	r3, [sp, #0]
 800668c:	6018      	str	r0, [r3, #0]
 800668e:	e7c9      	b.n	8006624 <_scanf_float+0x37c>
 8006690:	0020      	movs	r0, r4
 8006692:	0029      	movs	r1, r5
 8006694:	f7fb feec 	bl	8002470 <__aeabi_d2f>
 8006698:	e7f7      	b.n	800668a <_scanf_float+0x3e2>
 800669a:	2700      	movs	r7, #0
 800669c:	e650      	b.n	8006340 <_scanf_float+0x98>
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	0800a088 	.word	0x0800a088

080066a4 <iprintf>:
 80066a4:	b40f      	push	{r0, r1, r2, r3}
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <iprintf+0x30>)
 80066a8:	b513      	push	{r0, r1, r4, lr}
 80066aa:	681c      	ldr	r4, [r3, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d005      	beq.n	80066bc <iprintf+0x18>
 80066b0:	69a3      	ldr	r3, [r4, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <iprintf+0x18>
 80066b6:	0020      	movs	r0, r4
 80066b8:	f001 fdba 	bl	8008230 <__sinit>
 80066bc:	ab05      	add	r3, sp, #20
 80066be:	9a04      	ldr	r2, [sp, #16]
 80066c0:	68a1      	ldr	r1, [r4, #8]
 80066c2:	0020      	movs	r0, r4
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	f002 ffed 	bl	80096a4 <_vfiprintf_r>
 80066ca:	bc16      	pop	{r1, r2, r4}
 80066cc:	bc08      	pop	{r3}
 80066ce:	b004      	add	sp, #16
 80066d0:	4718      	bx	r3
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	20000010 	.word	0x20000010

080066d8 <nanf>:
 80066d8:	4800      	ldr	r0, [pc, #0]	; (80066dc <nanf+0x4>)
 80066da:	4770      	bx	lr
 80066dc:	7fc00000 	.word	0x7fc00000

080066e0 <siprintf>:
 80066e0:	b40e      	push	{r1, r2, r3}
 80066e2:	b500      	push	{lr}
 80066e4:	490b      	ldr	r1, [pc, #44]	; (8006714 <siprintf+0x34>)
 80066e6:	b09c      	sub	sp, #112	; 0x70
 80066e8:	ab1d      	add	r3, sp, #116	; 0x74
 80066ea:	9002      	str	r0, [sp, #8]
 80066ec:	9006      	str	r0, [sp, #24]
 80066ee:	9107      	str	r1, [sp, #28]
 80066f0:	9104      	str	r1, [sp, #16]
 80066f2:	4809      	ldr	r0, [pc, #36]	; (8006718 <siprintf+0x38>)
 80066f4:	4909      	ldr	r1, [pc, #36]	; (800671c <siprintf+0x3c>)
 80066f6:	cb04      	ldmia	r3!, {r2}
 80066f8:	9105      	str	r1, [sp, #20]
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	a902      	add	r1, sp, #8
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	f002 feaa 	bl	8009458 <_svfiprintf_r>
 8006704:	2300      	movs	r3, #0
 8006706:	9a02      	ldr	r2, [sp, #8]
 8006708:	7013      	strb	r3, [r2, #0]
 800670a:	b01c      	add	sp, #112	; 0x70
 800670c:	bc08      	pop	{r3}
 800670e:	b003      	add	sp, #12
 8006710:	4718      	bx	r3
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	7fffffff 	.word	0x7fffffff
 8006718:	20000010 	.word	0x20000010
 800671c:	ffff0208 	.word	0xffff0208

08006720 <sulp>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	0016      	movs	r6, r2
 8006724:	000d      	movs	r5, r1
 8006726:	f002 fc59 	bl	8008fdc <__ulp>
 800672a:	2e00      	cmp	r6, #0
 800672c:	d00d      	beq.n	800674a <sulp+0x2a>
 800672e:	236b      	movs	r3, #107	; 0x6b
 8006730:	006a      	lsls	r2, r5, #1
 8006732:	0d52      	lsrs	r2, r2, #21
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	dd07      	ble.n	800674a <sulp+0x2a>
 800673a:	2400      	movs	r4, #0
 800673c:	4a03      	ldr	r2, [pc, #12]	; (800674c <sulp+0x2c>)
 800673e:	051b      	lsls	r3, r3, #20
 8006740:	189d      	adds	r5, r3, r2
 8006742:	002b      	movs	r3, r5
 8006744:	0022      	movs	r2, r4
 8006746:	f7fa ffc9 	bl	80016dc <__aeabi_dmul>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	3ff00000 	.word	0x3ff00000

08006750 <_strtod_l>:
 8006750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006752:	b0a7      	sub	sp, #156	; 0x9c
 8006754:	9307      	str	r3, [sp, #28]
 8006756:	2300      	movs	r3, #0
 8006758:	9004      	str	r0, [sp, #16]
 800675a:	9807      	ldr	r0, [sp, #28]
 800675c:	9322      	str	r3, [sp, #136]	; 0x88
 800675e:	9106      	str	r1, [sp, #24]
 8006760:	921d      	str	r2, [sp, #116]	; 0x74
 8006762:	f002 f92c 	bl	80089be <__localeconv_l>
 8006766:	0005      	movs	r5, r0
 8006768:	6800      	ldr	r0, [r0, #0]
 800676a:	f7f9 fccb 	bl	8000104 <strlen>
 800676e:	2600      	movs	r6, #0
 8006770:	2700      	movs	r7, #0
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	9005      	str	r0, [sp, #20]
 8006776:	9321      	str	r3, [sp, #132]	; 0x84
 8006778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	2a0d      	cmp	r2, #13
 800677e:	d839      	bhi.n	80067f4 <_strtod_l+0xa4>
 8006780:	2a09      	cmp	r2, #9
 8006782:	d23d      	bcs.n	8006800 <_strtod_l+0xb0>
 8006784:	2a00      	cmp	r2, #0
 8006786:	d044      	beq.n	8006812 <_strtod_l+0xc2>
 8006788:	2300      	movs	r3, #0
 800678a:	9313      	str	r3, [sp, #76]	; 0x4c
 800678c:	2200      	movs	r2, #0
 800678e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006790:	920c      	str	r2, [sp, #48]	; 0x30
 8006792:	7823      	ldrb	r3, [r4, #0]
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d000      	beq.n	800679a <_strtod_l+0x4a>
 8006798:	e07e      	b.n	8006898 <_strtod_l+0x148>
 800679a:	7863      	ldrb	r3, [r4, #1]
 800679c:	2b58      	cmp	r3, #88	; 0x58
 800679e:	d002      	beq.n	80067a6 <_strtod_l+0x56>
 80067a0:	2b78      	cmp	r3, #120	; 0x78
 80067a2:	d000      	beq.n	80067a6 <_strtod_l+0x56>
 80067a4:	e06e      	b.n	8006884 <_strtod_l+0x134>
 80067a6:	9b07      	ldr	r3, [sp, #28]
 80067a8:	4a96      	ldr	r2, [pc, #600]	; (8006a04 <_strtod_l+0x2b4>)
 80067aa:	9302      	str	r3, [sp, #8]
 80067ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067ae:	a921      	add	r1, sp, #132	; 0x84
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	ab22      	add	r3, sp, #136	; 0x88
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	9804      	ldr	r0, [sp, #16]
 80067b8:	ab23      	add	r3, sp, #140	; 0x8c
 80067ba:	f001 fe15 	bl	80083e8 <__gethex>
 80067be:	2507      	movs	r5, #7
 80067c0:	9005      	str	r0, [sp, #20]
 80067c2:	4005      	ands	r5, r0
 80067c4:	d005      	beq.n	80067d2 <_strtod_l+0x82>
 80067c6:	2d06      	cmp	r5, #6
 80067c8:	d12f      	bne.n	800682a <_strtod_l+0xda>
 80067ca:	2300      	movs	r3, #0
 80067cc:	3401      	adds	r4, #1
 80067ce:	9421      	str	r4, [sp, #132]	; 0x84
 80067d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80067d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <_strtod_l+0x8e>
 80067d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01d      	beq.n	8006820 <_strtod_l+0xd0>
 80067e4:	2380      	movs	r3, #128	; 0x80
 80067e6:	0032      	movs	r2, r6
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	0010      	movs	r0, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	b027      	add	sp, #156	; 0x9c
 80067f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f4:	2a2b      	cmp	r2, #43	; 0x2b
 80067f6:	d016      	beq.n	8006826 <_strtod_l+0xd6>
 80067f8:	2a2d      	cmp	r2, #45	; 0x2d
 80067fa:	d003      	beq.n	8006804 <_strtod_l+0xb4>
 80067fc:	2a20      	cmp	r2, #32
 80067fe:	d1c3      	bne.n	8006788 <_strtod_l+0x38>
 8006800:	3301      	adds	r3, #1
 8006802:	e7b8      	b.n	8006776 <_strtod_l+0x26>
 8006804:	2201      	movs	r2, #1
 8006806:	9213      	str	r2, [sp, #76]	; 0x4c
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	9221      	str	r2, [sp, #132]	; 0x84
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1bc      	bne.n	800678c <_strtod_l+0x3c>
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	9321      	str	r3, [sp, #132]	; 0x84
 8006816:	2300      	movs	r3, #0
 8006818:	9313      	str	r3, [sp, #76]	; 0x4c
 800681a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1db      	bne.n	80067d8 <_strtod_l+0x88>
 8006820:	0032      	movs	r2, r6
 8006822:	003b      	movs	r3, r7
 8006824:	e7e2      	b.n	80067ec <_strtod_l+0x9c>
 8006826:	2200      	movs	r2, #0
 8006828:	e7ed      	b.n	8006806 <_strtod_l+0xb6>
 800682a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800682c:	2a00      	cmp	r2, #0
 800682e:	d007      	beq.n	8006840 <_strtod_l+0xf0>
 8006830:	2135      	movs	r1, #53	; 0x35
 8006832:	a824      	add	r0, sp, #144	; 0x90
 8006834:	f002 fcbf 	bl	80091b6 <__copybits>
 8006838:	9922      	ldr	r1, [sp, #136]	; 0x88
 800683a:	9804      	ldr	r0, [sp, #16]
 800683c:	f002 f936 	bl	8008aac <_Bfree>
 8006840:	1e68      	subs	r0, r5, #1
 8006842:	2804      	cmp	r0, #4
 8006844:	d806      	bhi.n	8006854 <_strtod_l+0x104>
 8006846:	f7f9 fc65 	bl	8000114 <__gnu_thumb1_case_uqi>
 800684a:	030c      	.short	0x030c
 800684c:	1917      	.short	0x1917
 800684e:	0c          	.byte	0x0c
 800684f:	00          	.byte	0x00
 8006850:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006852:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006854:	9b05      	ldr	r3, [sp, #20]
 8006856:	071b      	lsls	r3, r3, #28
 8006858:	d5bb      	bpl.n	80067d2 <_strtod_l+0x82>
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	431f      	orrs	r7, r3
 8006860:	e7b7      	b.n	80067d2 <_strtod_l+0x82>
 8006862:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006864:	4a68      	ldr	r2, [pc, #416]	; (8006a08 <_strtod_l+0x2b8>)
 8006866:	4969      	ldr	r1, [pc, #420]	; (8006a0c <_strtod_l+0x2bc>)
 8006868:	401a      	ands	r2, r3
 800686a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800686c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800686e:	185b      	adds	r3, r3, r1
 8006870:	051b      	lsls	r3, r3, #20
 8006872:	431a      	orrs	r2, r3
 8006874:	0017      	movs	r7, r2
 8006876:	e7ed      	b.n	8006854 <_strtod_l+0x104>
 8006878:	4f65      	ldr	r7, [pc, #404]	; (8006a10 <_strtod_l+0x2c0>)
 800687a:	e7eb      	b.n	8006854 <_strtod_l+0x104>
 800687c:	2601      	movs	r6, #1
 800687e:	4f65      	ldr	r7, [pc, #404]	; (8006a14 <_strtod_l+0x2c4>)
 8006880:	4276      	negs	r6, r6
 8006882:	e7e7      	b.n	8006854 <_strtod_l+0x104>
 8006884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	9221      	str	r2, [sp, #132]	; 0x84
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d0f9      	beq.n	8006884 <_strtod_l+0x134>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d09e      	beq.n	80067d2 <_strtod_l+0x82>
 8006894:	2301      	movs	r3, #1
 8006896:	930c      	str	r3, [sp, #48]	; 0x30
 8006898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689a:	220a      	movs	r2, #10
 800689c:	9312      	str	r3, [sp, #72]	; 0x48
 800689e:	2300      	movs	r3, #0
 80068a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a2:	9308      	str	r3, [sp, #32]
 80068a4:	930a      	str	r3, [sp, #40]	; 0x28
 80068a6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80068a8:	7804      	ldrb	r4, [r0, #0]
 80068aa:	0023      	movs	r3, r4
 80068ac:	3b30      	subs	r3, #48	; 0x30
 80068ae:	b2d9      	uxtb	r1, r3
 80068b0:	2909      	cmp	r1, #9
 80068b2:	d934      	bls.n	800691e <_strtod_l+0x1ce>
 80068b4:	9a05      	ldr	r2, [sp, #20]
 80068b6:	6829      	ldr	r1, [r5, #0]
 80068b8:	f003 f868 	bl	800998c <strncmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d040      	beq.n	8006942 <_strtod_l+0x1f2>
 80068c0:	2000      	movs	r0, #0
 80068c2:	0023      	movs	r3, r4
 80068c4:	4684      	mov	ip, r0
 80068c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c8:	9007      	str	r0, [sp, #28]
 80068ca:	9205      	str	r2, [sp, #20]
 80068cc:	2220      	movs	r2, #32
 80068ce:	0019      	movs	r1, r3
 80068d0:	4391      	bics	r1, r2
 80068d2:	000a      	movs	r2, r1
 80068d4:	2100      	movs	r1, #0
 80068d6:	2a45      	cmp	r2, #69	; 0x45
 80068d8:	d000      	beq.n	80068dc <_strtod_l+0x18c>
 80068da:	e0bf      	b.n	8006a5c <_strtod_l+0x30c>
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068e0:	4303      	orrs	r3, r0
 80068e2:	4313      	orrs	r3, r2
 80068e4:	428b      	cmp	r3, r1
 80068e6:	d094      	beq.n	8006812 <_strtod_l+0xc2>
 80068e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	3301      	adds	r3, #1
 80068ee:	9321      	str	r3, [sp, #132]	; 0x84
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b2b      	cmp	r3, #43	; 0x2b
 80068f6:	d100      	bne.n	80068fa <_strtod_l+0x1aa>
 80068f8:	e082      	b.n	8006a00 <_strtod_l+0x2b0>
 80068fa:	000c      	movs	r4, r1
 80068fc:	2b2d      	cmp	r3, #45	; 0x2d
 80068fe:	d105      	bne.n	800690c <_strtod_l+0x1bc>
 8006900:	2401      	movs	r4, #1
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	3302      	adds	r3, #2
 8006906:	9321      	str	r3, [sp, #132]	; 0x84
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	001a      	movs	r2, r3
 800690e:	3a30      	subs	r2, #48	; 0x30
 8006910:	2a09      	cmp	r2, #9
 8006912:	d800      	bhi.n	8006916 <_strtod_l+0x1c6>
 8006914:	e084      	b.n	8006a20 <_strtod_l+0x2d0>
 8006916:	9a06      	ldr	r2, [sp, #24]
 8006918:	2100      	movs	r1, #0
 800691a:	9221      	str	r2, [sp, #132]	; 0x84
 800691c:	e09e      	b.n	8006a5c <_strtod_l+0x30c>
 800691e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006920:	2908      	cmp	r1, #8
 8006922:	dc09      	bgt.n	8006938 <_strtod_l+0x1e8>
 8006924:	9908      	ldr	r1, [sp, #32]
 8006926:	4351      	muls	r1, r2
 8006928:	18cb      	adds	r3, r1, r3
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692e:	3001      	adds	r0, #1
 8006930:	3301      	adds	r3, #1
 8006932:	930a      	str	r3, [sp, #40]	; 0x28
 8006934:	9021      	str	r0, [sp, #132]	; 0x84
 8006936:	e7b6      	b.n	80068a6 <_strtod_l+0x156>
 8006938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800693a:	4351      	muls	r1, r2
 800693c:	18cb      	adds	r3, r1, r3
 800693e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006940:	e7f4      	b.n	800692c <_strtod_l+0x1dc>
 8006942:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	4694      	mov	ip, r2
 8006948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800694a:	4463      	add	r3, ip
 800694c:	9321      	str	r3, [sp, #132]	; 0x84
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2a00      	cmp	r2, #0
 8006952:	d036      	beq.n	80069c2 <_strtod_l+0x272>
 8006954:	4684      	mov	ip, r0
 8006956:	9205      	str	r2, [sp, #20]
 8006958:	001a      	movs	r2, r3
 800695a:	3a30      	subs	r2, #48	; 0x30
 800695c:	2a09      	cmp	r2, #9
 800695e:	d912      	bls.n	8006986 <_strtod_l+0x236>
 8006960:	2201      	movs	r2, #1
 8006962:	9207      	str	r2, [sp, #28]
 8006964:	e7b2      	b.n	80068cc <_strtod_l+0x17c>
 8006966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006968:	3001      	adds	r0, #1
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	9221      	str	r2, [sp, #132]	; 0x84
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d0f8      	beq.n	8006966 <_strtod_l+0x216>
 8006974:	001a      	movs	r2, r3
 8006976:	3a31      	subs	r2, #49	; 0x31
 8006978:	2a08      	cmp	r2, #8
 800697a:	d83c      	bhi.n	80069f6 <_strtod_l+0x2a6>
 800697c:	4684      	mov	ip, r0
 800697e:	2000      	movs	r0, #0
 8006980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006982:	9005      	str	r0, [sp, #20]
 8006984:	9212      	str	r2, [sp, #72]	; 0x48
 8006986:	3b30      	subs	r3, #48	; 0x30
 8006988:	1c42      	adds	r2, r0, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d013      	beq.n	80069b6 <_strtod_l+0x266>
 800698e:	210a      	movs	r1, #10
 8006990:	4494      	add	ip, r2
 8006992:	9a05      	ldr	r2, [sp, #20]
 8006994:	1885      	adds	r5, r0, r2
 8006996:	42aa      	cmp	r2, r5
 8006998:	d115      	bne.n	80069c6 <_strtod_l+0x276>
 800699a:	9905      	ldr	r1, [sp, #20]
 800699c:	9a05      	ldr	r2, [sp, #20]
 800699e:	3101      	adds	r1, #1
 80069a0:	1809      	adds	r1, r1, r0
 80069a2:	1812      	adds	r2, r2, r0
 80069a4:	9105      	str	r1, [sp, #20]
 80069a6:	2a08      	cmp	r2, #8
 80069a8:	dc1b      	bgt.n	80069e2 <_strtod_l+0x292>
 80069aa:	220a      	movs	r2, #10
 80069ac:	9908      	ldr	r1, [sp, #32]
 80069ae:	434a      	muls	r2, r1
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b8:	0010      	movs	r0, r2
 80069ba:	1c59      	adds	r1, r3, #1
 80069bc:	9121      	str	r1, [sp, #132]	; 0x84
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	e7ca      	b.n	8006958 <_strtod_l+0x208>
 80069c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069c4:	e7d4      	b.n	8006970 <_strtod_l+0x220>
 80069c6:	1c54      	adds	r4, r2, #1
 80069c8:	2a08      	cmp	r2, #8
 80069ca:	dc04      	bgt.n	80069d6 <_strtod_l+0x286>
 80069cc:	9a08      	ldr	r2, [sp, #32]
 80069ce:	434a      	muls	r2, r1
 80069d0:	9208      	str	r2, [sp, #32]
 80069d2:	0022      	movs	r2, r4
 80069d4:	e7df      	b.n	8006996 <_strtod_l+0x246>
 80069d6:	2c10      	cmp	r4, #16
 80069d8:	dcfb      	bgt.n	80069d2 <_strtod_l+0x282>
 80069da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069dc:	434a      	muls	r2, r1
 80069de:	920b      	str	r2, [sp, #44]	; 0x2c
 80069e0:	e7f7      	b.n	80069d2 <_strtod_l+0x282>
 80069e2:	9905      	ldr	r1, [sp, #20]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2910      	cmp	r1, #16
 80069e8:	dce5      	bgt.n	80069b6 <_strtod_l+0x266>
 80069ea:	210a      	movs	r1, #10
 80069ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069ee:	4341      	muls	r1, r0
 80069f0:	185b      	adds	r3, r3, r1
 80069f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f4:	e7df      	b.n	80069b6 <_strtod_l+0x266>
 80069f6:	2200      	movs	r2, #0
 80069f8:	4694      	mov	ip, r2
 80069fa:	9205      	str	r2, [sp, #20]
 80069fc:	3201      	adds	r2, #1
 80069fe:	e7b0      	b.n	8006962 <_strtod_l+0x212>
 8006a00:	000c      	movs	r4, r1
 8006a02:	e77e      	b.n	8006902 <_strtod_l+0x1b2>
 8006a04:	0800a090 	.word	0x0800a090
 8006a08:	ffefffff 	.word	0xffefffff
 8006a0c:	00000433 	.word	0x00000433
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	7fffffff 	.word	0x7fffffff
 8006a18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	9221      	str	r2, [sp, #132]	; 0x84
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	d0f9      	beq.n	8006a18 <_strtod_l+0x2c8>
 8006a24:	001a      	movs	r2, r3
 8006a26:	3a31      	subs	r2, #49	; 0x31
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2a08      	cmp	r2, #8
 8006a2c:	d816      	bhi.n	8006a5c <_strtod_l+0x30c>
 8006a2e:	3b30      	subs	r3, #48	; 0x30
 8006a30:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006a32:	930e      	str	r3, [sp, #56]	; 0x38
 8006a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	9121      	str	r1, [sp, #132]	; 0x84
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	3a30      	subs	r2, #48	; 0x30
 8006a40:	2a09      	cmp	r2, #9
 8006a42:	d932      	bls.n	8006aaa <_strtod_l+0x35a>
 8006a44:	1b4a      	subs	r2, r1, r5
 8006a46:	4dad      	ldr	r5, [pc, #692]	; (8006cfc <_strtod_l+0x5ac>)
 8006a48:	0029      	movs	r1, r5
 8006a4a:	2a08      	cmp	r2, #8
 8006a4c:	dc03      	bgt.n	8006a56 <_strtod_l+0x306>
 8006a4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a50:	42a9      	cmp	r1, r5
 8006a52:	dd00      	ble.n	8006a56 <_strtod_l+0x306>
 8006a54:	0029      	movs	r1, r5
 8006a56:	2c00      	cmp	r4, #0
 8006a58:	d000      	beq.n	8006a5c <_strtod_l+0x30c>
 8006a5a:	4249      	negs	r1, r1
 8006a5c:	9a05      	ldr	r2, [sp, #20]
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	d149      	bne.n	8006af6 <_strtod_l+0x3a6>
 8006a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a64:	4310      	orrs	r0, r2
 8006a66:	d000      	beq.n	8006a6a <_strtod_l+0x31a>
 8006a68:	e6b3      	b.n	80067d2 <_strtod_l+0x82>
 8006a6a:	9a07      	ldr	r2, [sp, #28]
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	d000      	beq.n	8006a72 <_strtod_l+0x322>
 8006a70:	e6cf      	b.n	8006812 <_strtod_l+0xc2>
 8006a72:	2b4e      	cmp	r3, #78	; 0x4e
 8006a74:	d025      	beq.n	8006ac2 <_strtod_l+0x372>
 8006a76:	dc1f      	bgt.n	8006ab8 <_strtod_l+0x368>
 8006a78:	2b49      	cmp	r3, #73	; 0x49
 8006a7a:	d000      	beq.n	8006a7e <_strtod_l+0x32e>
 8006a7c:	e6c9      	b.n	8006812 <_strtod_l+0xc2>
 8006a7e:	49a0      	ldr	r1, [pc, #640]	; (8006d00 <_strtod_l+0x5b0>)
 8006a80:	a821      	add	r0, sp, #132	; 0x84
 8006a82:	f001 feee 	bl	8008862 <__match>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d100      	bne.n	8006a8c <_strtod_l+0x33c>
 8006a8a:	e6c2      	b.n	8006812 <_strtod_l+0xc2>
 8006a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a8e:	499d      	ldr	r1, [pc, #628]	; (8006d04 <_strtod_l+0x5b4>)
 8006a90:	3b01      	subs	r3, #1
 8006a92:	a821      	add	r0, sp, #132	; 0x84
 8006a94:	9321      	str	r3, [sp, #132]	; 0x84
 8006a96:	f001 fee4 	bl	8008862 <__match>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d102      	bne.n	8006aa4 <_strtod_l+0x354>
 8006a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	9321      	str	r3, [sp, #132]	; 0x84
 8006aa4:	4f98      	ldr	r7, [pc, #608]	; (8006d08 <_strtod_l+0x5b8>)
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	e693      	b.n	80067d2 <_strtod_l+0x82>
 8006aaa:	220a      	movs	r2, #10
 8006aac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006aae:	434a      	muls	r2, r1
 8006ab0:	18d2      	adds	r2, r2, r3
 8006ab2:	3a30      	subs	r2, #48	; 0x30
 8006ab4:	920e      	str	r2, [sp, #56]	; 0x38
 8006ab6:	e7bd      	b.n	8006a34 <_strtod_l+0x2e4>
 8006ab8:	2b69      	cmp	r3, #105	; 0x69
 8006aba:	d0e0      	beq.n	8006a7e <_strtod_l+0x32e>
 8006abc:	2b6e      	cmp	r3, #110	; 0x6e
 8006abe:	d000      	beq.n	8006ac2 <_strtod_l+0x372>
 8006ac0:	e6a7      	b.n	8006812 <_strtod_l+0xc2>
 8006ac2:	4992      	ldr	r1, [pc, #584]	; (8006d0c <_strtod_l+0x5bc>)
 8006ac4:	a821      	add	r0, sp, #132	; 0x84
 8006ac6:	f001 fecc 	bl	8008862 <__match>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d100      	bne.n	8006ad0 <_strtod_l+0x380>
 8006ace:	e6a0      	b.n	8006812 <_strtod_l+0xc2>
 8006ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b28      	cmp	r3, #40	; 0x28
 8006ad6:	d10c      	bne.n	8006af2 <_strtod_l+0x3a2>
 8006ad8:	aa24      	add	r2, sp, #144	; 0x90
 8006ada:	498d      	ldr	r1, [pc, #564]	; (8006d10 <_strtod_l+0x5c0>)
 8006adc:	a821      	add	r0, sp, #132	; 0x84
 8006ade:	f001 fed4 	bl	800888a <__hexnan>
 8006ae2:	2805      	cmp	r0, #5
 8006ae4:	d105      	bne.n	8006af2 <_strtod_l+0x3a2>
 8006ae6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006ae8:	4a87      	ldr	r2, [pc, #540]	; (8006d08 <_strtod_l+0x5b8>)
 8006aea:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006aec:	431a      	orrs	r2, r3
 8006aee:	0017      	movs	r7, r2
 8006af0:	e66f      	b.n	80067d2 <_strtod_l+0x82>
 8006af2:	4f88      	ldr	r7, [pc, #544]	; (8006d14 <_strtod_l+0x5c4>)
 8006af4:	e7d7      	b.n	8006aa6 <_strtod_l+0x356>
 8006af6:	4663      	mov	r3, ip
 8006af8:	1acb      	subs	r3, r1, r3
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <_strtod_l+0x3b6>
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	930a      	str	r3, [sp, #40]	; 0x28
 8006b06:	9c05      	ldr	r4, [sp, #20]
 8006b08:	2c10      	cmp	r4, #16
 8006b0a:	dd00      	ble.n	8006b0e <_strtod_l+0x3be>
 8006b0c:	2410      	movs	r4, #16
 8006b0e:	9808      	ldr	r0, [sp, #32]
 8006b10:	f7fb fc2a 	bl	8002368 <__aeabi_ui2d>
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	0006      	movs	r6, r0
 8006b18:	000f      	movs	r7, r1
 8006b1a:	2b09      	cmp	r3, #9
 8006b1c:	dc15      	bgt.n	8006b4a <_strtod_l+0x3fa>
 8006b1e:	9b07      	ldr	r3, [sp, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d100      	bne.n	8006b26 <_strtod_l+0x3d6>
 8006b24:	e655      	b.n	80067d2 <_strtod_l+0x82>
 8006b26:	9b07      	ldr	r3, [sp, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dc00      	bgt.n	8006b2e <_strtod_l+0x3de>
 8006b2c:	e07d      	b.n	8006c2a <_strtod_l+0x4da>
 8006b2e:	2b16      	cmp	r3, #22
 8006b30:	dc62      	bgt.n	8006bf8 <_strtod_l+0x4a8>
 8006b32:	00dc      	lsls	r4, r3, #3
 8006b34:	4b78      	ldr	r3, [pc, #480]	; (8006d18 <_strtod_l+0x5c8>)
 8006b36:	0032      	movs	r2, r6
 8006b38:	1919      	adds	r1, r3, r4
 8006b3a:	003b      	movs	r3, r7
 8006b3c:	6808      	ldr	r0, [r1, #0]
 8006b3e:	6849      	ldr	r1, [r1, #4]
 8006b40:	f7fa fdcc 	bl	80016dc <__aeabi_dmul>
 8006b44:	0006      	movs	r6, r0
 8006b46:	000f      	movs	r7, r1
 8006b48:	e643      	b.n	80067d2 <_strtod_l+0x82>
 8006b4a:	0022      	movs	r2, r4
 8006b4c:	4b72      	ldr	r3, [pc, #456]	; (8006d18 <_strtod_l+0x5c8>)
 8006b4e:	3a09      	subs	r2, #9
 8006b50:	00d2      	lsls	r2, r2, #3
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f7fa fdc0 	bl	80016dc <__aeabi_dmul>
 8006b5c:	0006      	movs	r6, r0
 8006b5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b60:	000f      	movs	r7, r1
 8006b62:	f7fb fc01 	bl	8002368 <__aeabi_ui2d>
 8006b66:	000b      	movs	r3, r1
 8006b68:	0002      	movs	r2, r0
 8006b6a:	0039      	movs	r1, r7
 8006b6c:	0030      	movs	r0, r6
 8006b6e:	f7f9 fe8f 	bl	8000890 <__aeabi_dadd>
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	0006      	movs	r6, r0
 8006b76:	000f      	movs	r7, r1
 8006b78:	2b0f      	cmp	r3, #15
 8006b7a:	ddd0      	ble.n	8006b1e <_strtod_l+0x3ce>
 8006b7c:	9b05      	ldr	r3, [sp, #20]
 8006b7e:	1b1c      	subs	r4, r3, r4
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	18e4      	adds	r4, r4, r3
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	dc00      	bgt.n	8006b8a <_strtod_l+0x43a>
 8006b88:	e094      	b.n	8006cb4 <_strtod_l+0x564>
 8006b8a:	230f      	movs	r3, #15
 8006b8c:	4023      	ands	r3, r4
 8006b8e:	d00a      	beq.n	8006ba6 <_strtod_l+0x456>
 8006b90:	4961      	ldr	r1, [pc, #388]	; (8006d18 <_strtod_l+0x5c8>)
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	18c9      	adds	r1, r1, r3
 8006b96:	0032      	movs	r2, r6
 8006b98:	6808      	ldr	r0, [r1, #0]
 8006b9a:	6849      	ldr	r1, [r1, #4]
 8006b9c:	003b      	movs	r3, r7
 8006b9e:	f7fa fd9d 	bl	80016dc <__aeabi_dmul>
 8006ba2:	0006      	movs	r6, r0
 8006ba4:	000f      	movs	r7, r1
 8006ba6:	230f      	movs	r3, #15
 8006ba8:	439c      	bics	r4, r3
 8006baa:	d06e      	beq.n	8006c8a <_strtod_l+0x53a>
 8006bac:	3326      	adds	r3, #38	; 0x26
 8006bae:	33ff      	adds	r3, #255	; 0xff
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	dd48      	ble.n	8006c46 <_strtod_l+0x4f6>
 8006bb4:	2400      	movs	r4, #0
 8006bb6:	9405      	str	r4, [sp, #20]
 8006bb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006bba:	940a      	str	r4, [sp, #40]	; 0x28
 8006bbc:	2322      	movs	r3, #34	; 0x22
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	9a04      	ldr	r2, [sp, #16]
 8006bc2:	4f51      	ldr	r7, [pc, #324]	; (8006d08 <_strtod_l+0x5b8>)
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc8:	42b3      	cmp	r3, r6
 8006bca:	d100      	bne.n	8006bce <_strtod_l+0x47e>
 8006bcc:	e601      	b.n	80067d2 <_strtod_l+0x82>
 8006bce:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bd0:	9804      	ldr	r0, [sp, #16]
 8006bd2:	f001 ff6b 	bl	8008aac <_Bfree>
 8006bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd8:	9804      	ldr	r0, [sp, #16]
 8006bda:	f001 ff67 	bl	8008aac <_Bfree>
 8006bde:	9905      	ldr	r1, [sp, #20]
 8006be0:	9804      	ldr	r0, [sp, #16]
 8006be2:	f001 ff63 	bl	8008aac <_Bfree>
 8006be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be8:	9804      	ldr	r0, [sp, #16]
 8006bea:	f001 ff5f 	bl	8008aac <_Bfree>
 8006bee:	0021      	movs	r1, r4
 8006bf0:	9804      	ldr	r0, [sp, #16]
 8006bf2:	f001 ff5b 	bl	8008aac <_Bfree>
 8006bf6:	e5ec      	b.n	80067d2 <_strtod_l+0x82>
 8006bf8:	2325      	movs	r3, #37	; 0x25
 8006bfa:	9a05      	ldr	r2, [sp, #20]
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	9a07      	ldr	r2, [sp, #28]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	dbbb      	blt.n	8006b7c <_strtod_l+0x42c>
 8006c04:	230f      	movs	r3, #15
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	4c43      	ldr	r4, [pc, #268]	; (8006d18 <_strtod_l+0x5c8>)
 8006c0a:	1a9d      	subs	r5, r3, r2
 8006c0c:	00e9      	lsls	r1, r5, #3
 8006c0e:	1861      	adds	r1, r4, r1
 8006c10:	0032      	movs	r2, r6
 8006c12:	6808      	ldr	r0, [r1, #0]
 8006c14:	6849      	ldr	r1, [r1, #4]
 8006c16:	003b      	movs	r3, r7
 8006c18:	f7fa fd60 	bl	80016dc <__aeabi_dmul>
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	1b5e      	subs	r6, r3, r5
 8006c20:	00f6      	lsls	r6, r6, #3
 8006c22:	19a6      	adds	r6, r4, r6
 8006c24:	6832      	ldr	r2, [r6, #0]
 8006c26:	6873      	ldr	r3, [r6, #4]
 8006c28:	e78a      	b.n	8006b40 <_strtod_l+0x3f0>
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	3316      	adds	r3, #22
 8006c2e:	dba5      	blt.n	8006b7c <_strtod_l+0x42c>
 8006c30:	9b07      	ldr	r3, [sp, #28]
 8006c32:	0030      	movs	r0, r6
 8006c34:	00da      	lsls	r2, r3, #3
 8006c36:	4b38      	ldr	r3, [pc, #224]	; (8006d18 <_strtod_l+0x5c8>)
 8006c38:	0039      	movs	r1, r7
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f7fa f942 	bl	8000ec8 <__aeabi_ddiv>
 8006c44:	e77e      	b.n	8006b44 <_strtod_l+0x3f4>
 8006c46:	2300      	movs	r3, #0
 8006c48:	0030      	movs	r0, r6
 8006c4a:	0039      	movs	r1, r7
 8006c4c:	001d      	movs	r5, r3
 8006c4e:	1124      	asrs	r4, r4, #4
 8006c50:	2c01      	cmp	r4, #1
 8006c52:	dc1d      	bgt.n	8006c90 <_strtod_l+0x540>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <_strtod_l+0x50c>
 8006c58:	0006      	movs	r6, r0
 8006c5a:	000f      	movs	r7, r1
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <_strtod_l+0x5cc>)
 8006c5e:	00ed      	lsls	r5, r5, #3
 8006c60:	18ff      	adds	r7, r7, r3
 8006c62:	4b2f      	ldr	r3, [pc, #188]	; (8006d20 <_strtod_l+0x5d0>)
 8006c64:	0032      	movs	r2, r6
 8006c66:	195d      	adds	r5, r3, r5
 8006c68:	6828      	ldr	r0, [r5, #0]
 8006c6a:	6869      	ldr	r1, [r5, #4]
 8006c6c:	003b      	movs	r3, r7
 8006c6e:	f7fa fd35 	bl	80016dc <__aeabi_dmul>
 8006c72:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <_strtod_l+0x5b8>)
 8006c74:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <_strtod_l+0x5d4>)
 8006c76:	0006      	movs	r6, r0
 8006c78:	400b      	ands	r3, r1
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d89a      	bhi.n	8006bb4 <_strtod_l+0x464>
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <_strtod_l+0x5d8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d913      	bls.n	8006cac <_strtod_l+0x55c>
 8006c84:	2601      	movs	r6, #1
 8006c86:	4f29      	ldr	r7, [pc, #164]	; (8006d2c <_strtod_l+0x5dc>)
 8006c88:	4276      	negs	r6, r6
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9306      	str	r3, [sp, #24]
 8006c8e:	e07b      	b.n	8006d88 <_strtod_l+0x638>
 8006c90:	2201      	movs	r2, #1
 8006c92:	4214      	tst	r4, r2
 8006c94:	d007      	beq.n	8006ca6 <_strtod_l+0x556>
 8006c96:	4a22      	ldr	r2, [pc, #136]	; (8006d20 <_strtod_l+0x5d0>)
 8006c98:	00eb      	lsls	r3, r5, #3
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f7fa fd1c 	bl	80016dc <__aeabi_dmul>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	3501      	adds	r5, #1
 8006ca8:	1064      	asrs	r4, r4, #1
 8006caa:	e7d1      	b.n	8006c50 <_strtod_l+0x500>
 8006cac:	23d4      	movs	r3, #212	; 0xd4
 8006cae:	049b      	lsls	r3, r3, #18
 8006cb0:	18cf      	adds	r7, r1, r3
 8006cb2:	e7ea      	b.n	8006c8a <_strtod_l+0x53a>
 8006cb4:	2c00      	cmp	r4, #0
 8006cb6:	d0e8      	beq.n	8006c8a <_strtod_l+0x53a>
 8006cb8:	230f      	movs	r3, #15
 8006cba:	4264      	negs	r4, r4
 8006cbc:	4023      	ands	r3, r4
 8006cbe:	d00a      	beq.n	8006cd6 <_strtod_l+0x586>
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <_strtod_l+0x5c8>)
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	18d3      	adds	r3, r2, r3
 8006cc6:	0030      	movs	r0, r6
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	0039      	movs	r1, r7
 8006cce:	f7fa f8fb 	bl	8000ec8 <__aeabi_ddiv>
 8006cd2:	0006      	movs	r6, r0
 8006cd4:	000f      	movs	r7, r1
 8006cd6:	1124      	asrs	r4, r4, #4
 8006cd8:	d0d7      	beq.n	8006c8a <_strtod_l+0x53a>
 8006cda:	2c1f      	cmp	r4, #31
 8006cdc:	dd28      	ble.n	8006d30 <_strtod_l+0x5e0>
 8006cde:	2400      	movs	r4, #0
 8006ce0:	9405      	str	r4, [sp, #20]
 8006ce2:	940b      	str	r4, [sp, #44]	; 0x2c
 8006ce4:	940a      	str	r4, [sp, #40]	; 0x28
 8006ce6:	2322      	movs	r3, #34	; 0x22
 8006ce8:	9a04      	ldr	r2, [sp, #16]
 8006cea:	2600      	movs	r6, #0
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf0:	2700      	movs	r7, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d000      	beq.n	8006cf8 <_strtod_l+0x5a8>
 8006cf6:	e76a      	b.n	8006bce <_strtod_l+0x47e>
 8006cf8:	e56b      	b.n	80067d2 <_strtod_l+0x82>
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	00004e1f 	.word	0x00004e1f
 8006d00:	0800a059 	.word	0x0800a059
 8006d04:	0800a0e3 	.word	0x0800a0e3
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	0800a061 	.word	0x0800a061
 8006d10:	0800a0a4 	.word	0x0800a0a4
 8006d14:	fff80000 	.word	0xfff80000
 8006d18:	0800a188 	.word	0x0800a188
 8006d1c:	fcb00000 	.word	0xfcb00000
 8006d20:	0800a160 	.word	0x0800a160
 8006d24:	7ca00000 	.word	0x7ca00000
 8006d28:	7c900000 	.word	0x7c900000
 8006d2c:	7fefffff 	.word	0x7fefffff
 8006d30:	2310      	movs	r3, #16
 8006d32:	4023      	ands	r3, r4
 8006d34:	9306      	str	r3, [sp, #24]
 8006d36:	d001      	beq.n	8006d3c <_strtod_l+0x5ec>
 8006d38:	236a      	movs	r3, #106	; 0x6a
 8006d3a:	9306      	str	r3, [sp, #24]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	0030      	movs	r0, r6
 8006d40:	0039      	movs	r1, r7
 8006d42:	001d      	movs	r5, r3
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	dd00      	ble.n	8006d4a <_strtod_l+0x5fa>
 8006d48:	e10e      	b.n	8006f68 <_strtod_l+0x818>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <_strtod_l+0x602>
 8006d4e:	0006      	movs	r6, r0
 8006d50:	000f      	movs	r7, r1
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00f      	beq.n	8006d78 <_strtod_l+0x628>
 8006d58:	236b      	movs	r3, #107	; 0x6b
 8006d5a:	0079      	lsls	r1, r7, #1
 8006d5c:	0d49      	lsrs	r1, r1, #21
 8006d5e:	003a      	movs	r2, r7
 8006d60:	1a5b      	subs	r3, r3, r1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	dd08      	ble.n	8006d78 <_strtod_l+0x628>
 8006d66:	2b1f      	cmp	r3, #31
 8006d68:	dc00      	bgt.n	8006d6c <_strtod_l+0x61c>
 8006d6a:	e112      	b.n	8006f92 <_strtod_l+0x842>
 8006d6c:	2600      	movs	r6, #0
 8006d6e:	2b34      	cmp	r3, #52	; 0x34
 8006d70:	dc00      	bgt.n	8006d74 <_strtod_l+0x624>
 8006d72:	e107      	b.n	8006f84 <_strtod_l+0x834>
 8006d74:	27dc      	movs	r7, #220	; 0xdc
 8006d76:	04bf      	lsls	r7, r7, #18
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	0030      	movs	r0, r6
 8006d7e:	0039      	movs	r1, r7
 8006d80:	f7f9 fb58 	bl	8000434 <__aeabi_dcmpeq>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1aa      	bne.n	8006cde <_strtod_l+0x58e>
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	9804      	ldr	r0, [sp, #16]
 8006d94:	f001 fee1 	bl	8008b5a <__s2b>
 8006d98:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d100      	bne.n	8006da0 <_strtod_l+0x650>
 8006d9e:	e709      	b.n	8006bb4 <_strtod_l+0x464>
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	9a07      	ldr	r2, [sp, #28]
 8006da4:	17db      	asrs	r3, r3, #31
 8006da6:	4252      	negs	r2, r2
 8006da8:	4013      	ands	r3, r2
 8006daa:	9315      	str	r3, [sp, #84]	; 0x54
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	2400      	movs	r4, #0
 8006db0:	43db      	mvns	r3, r3
 8006db2:	9a07      	ldr	r2, [sp, #28]
 8006db4:	17db      	asrs	r3, r3, #31
 8006db6:	401a      	ands	r2, r3
 8006db8:	921c      	str	r2, [sp, #112]	; 0x70
 8006dba:	9405      	str	r4, [sp, #20]
 8006dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbe:	9804      	ldr	r0, [sp, #16]
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	f001 fe3b 	bl	8008a3c <_Balloc>
 8006dc6:	900a      	str	r0, [sp, #40]	; 0x28
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d100      	bne.n	8006dce <_strtod_l+0x67e>
 8006dcc:	e6f6      	b.n	8006bbc <_strtod_l+0x46c>
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	310c      	adds	r1, #12
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	300c      	adds	r0, #12
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	f001 fe24 	bl	8008a2a <memcpy>
 8006de2:	ab24      	add	r3, sp, #144	; 0x90
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	ab23      	add	r3, sp, #140	; 0x8c
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	0032      	movs	r2, r6
 8006dec:	003b      	movs	r3, r7
 8006dee:	9804      	ldr	r0, [sp, #16]
 8006df0:	960e      	str	r6, [sp, #56]	; 0x38
 8006df2:	970f      	str	r7, [sp, #60]	; 0x3c
 8006df4:	f002 f964 	bl	80090c0 <__d2b>
 8006df8:	9022      	str	r0, [sp, #136]	; 0x88
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d100      	bne.n	8006e00 <_strtod_l+0x6b0>
 8006dfe:	e6dd      	b.n	8006bbc <_strtod_l+0x46c>
 8006e00:	2101      	movs	r1, #1
 8006e02:	9804      	ldr	r0, [sp, #16]
 8006e04:	f001 ff30 	bl	8008c68 <__i2b>
 8006e08:	9005      	str	r0, [sp, #20]
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d100      	bne.n	8006e10 <_strtod_l+0x6c0>
 8006e0e:	e6d5      	b.n	8006bbc <_strtod_l+0x46c>
 8006e10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da00      	bge.n	8006e18 <_strtod_l+0x6c8>
 8006e16:	e0c1      	b.n	8006f9c <_strtod_l+0x84c>
 8006e18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e1a:	189d      	adds	r5, r3, r2
 8006e1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e1e:	4694      	mov	ip, r2
 8006e20:	9906      	ldr	r1, [sp, #24]
 8006e22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e24:	1a5b      	subs	r3, r3, r1
 8006e26:	2136      	movs	r1, #54	; 0x36
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	1a8a      	subs	r2, r1, r2
 8006e2c:	49b2      	ldr	r1, [pc, #712]	; (80070f8 <_strtod_l+0x9a8>)
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	2001      	movs	r0, #1
 8006e32:	428b      	cmp	r3, r1
 8006e34:	db00      	blt.n	8006e38 <_strtod_l+0x6e8>
 8006e36:	e0bd      	b.n	8006fb4 <_strtod_l+0x864>
 8006e38:	1ac9      	subs	r1, r1, r3
 8006e3a:	1a52      	subs	r2, r2, r1
 8006e3c:	291f      	cmp	r1, #31
 8006e3e:	dd00      	ble.n	8006e42 <_strtod_l+0x6f2>
 8006e40:	e0b1      	b.n	8006fa6 <_strtod_l+0x856>
 8006e42:	4088      	lsls	r0, r1
 8006e44:	2300      	movs	r3, #0
 8006e46:	9014      	str	r0, [sp, #80]	; 0x50
 8006e48:	9310      	str	r3, [sp, #64]	; 0x40
 8006e4a:	18ab      	adds	r3, r5, r2
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	0013      	movs	r3, r2
 8006e50:	9a06      	ldr	r2, [sp, #24]
 8006e52:	4463      	add	r3, ip
 8006e54:	18d3      	adds	r3, r2, r3
 8006e56:	9a08      	ldr	r2, [sp, #32]
 8006e58:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5a:	002b      	movs	r3, r5
 8006e5c:	4295      	cmp	r5, r2
 8006e5e:	dd00      	ble.n	8006e62 <_strtod_l+0x712>
 8006e60:	0013      	movs	r3, r2
 8006e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e64:	4293      	cmp	r3, r2
 8006e66:	dd00      	ble.n	8006e6a <_strtod_l+0x71a>
 8006e68:	0013      	movs	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd06      	ble.n	8006e7c <_strtod_l+0x72c>
 8006e6e:	9a08      	ldr	r2, [sp, #32]
 8006e70:	1aed      	subs	r5, r5, r3
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	9208      	str	r2, [sp, #32]
 8006e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e78:	1ad2      	subs	r2, r2, r3
 8006e7a:	920c      	str	r2, [sp, #48]	; 0x30
 8006e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <_strtod_l+0x762>
 8006e82:	001a      	movs	r2, r3
 8006e84:	9905      	ldr	r1, [sp, #20]
 8006e86:	9804      	ldr	r0, [sp, #16]
 8006e88:	f001 ff86 	bl	8008d98 <__pow5mult>
 8006e8c:	9005      	str	r0, [sp, #20]
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d100      	bne.n	8006e94 <_strtod_l+0x744>
 8006e92:	e693      	b.n	8006bbc <_strtod_l+0x46c>
 8006e94:	0001      	movs	r1, r0
 8006e96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e98:	9804      	ldr	r0, [sp, #16]
 8006e9a:	f001 feee 	bl	8008c7a <__multiply>
 8006e9e:	9012      	str	r0, [sp, #72]	; 0x48
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d100      	bne.n	8006ea6 <_strtod_l+0x756>
 8006ea4:	e68a      	b.n	8006bbc <_strtod_l+0x46c>
 8006ea6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ea8:	9804      	ldr	r0, [sp, #16]
 8006eaa:	f001 fdff 	bl	8008aac <_Bfree>
 8006eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eb0:	9322      	str	r3, [sp, #136]	; 0x88
 8006eb2:	9b08      	ldr	r3, [sp, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd00      	ble.n	8006eba <_strtod_l+0x76a>
 8006eb8:	e07f      	b.n	8006fba <_strtod_l+0x86a>
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd08      	ble.n	8006ed2 <_strtod_l+0x782>
 8006ec0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ec4:	9804      	ldr	r0, [sp, #16]
 8006ec6:	f001 ff67 	bl	8008d98 <__pow5mult>
 8006eca:	900a      	str	r0, [sp, #40]	; 0x28
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d100      	bne.n	8006ed2 <_strtod_l+0x782>
 8006ed0:	e674      	b.n	8006bbc <_strtod_l+0x46c>
 8006ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd08      	ble.n	8006eea <_strtod_l+0x79a>
 8006ed8:	001a      	movs	r2, r3
 8006eda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006edc:	9804      	ldr	r0, [sp, #16]
 8006ede:	f001 ffad 	bl	8008e3c <__lshift>
 8006ee2:	900a      	str	r0, [sp, #40]	; 0x28
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d100      	bne.n	8006eea <_strtod_l+0x79a>
 8006ee8:	e668      	b.n	8006bbc <_strtod_l+0x46c>
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	dd08      	ble.n	8006f00 <_strtod_l+0x7b0>
 8006eee:	002a      	movs	r2, r5
 8006ef0:	9905      	ldr	r1, [sp, #20]
 8006ef2:	9804      	ldr	r0, [sp, #16]
 8006ef4:	f001 ffa2 	bl	8008e3c <__lshift>
 8006ef8:	9005      	str	r0, [sp, #20]
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d100      	bne.n	8006f00 <_strtod_l+0x7b0>
 8006efe:	e65d      	b.n	8006bbc <_strtod_l+0x46c>
 8006f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f04:	9804      	ldr	r0, [sp, #16]
 8006f06:	f002 f805 	bl	8008f14 <__mdiff>
 8006f0a:	1e04      	subs	r4, r0, #0
 8006f0c:	d100      	bne.n	8006f10 <_strtod_l+0x7c0>
 8006f0e:	e655      	b.n	8006bbc <_strtod_l+0x46c>
 8006f10:	2500      	movs	r5, #0
 8006f12:	68c3      	ldr	r3, [r0, #12]
 8006f14:	9905      	ldr	r1, [sp, #20]
 8006f16:	60c5      	str	r5, [r0, #12]
 8006f18:	9312      	str	r3, [sp, #72]	; 0x48
 8006f1a:	f001 ffe1 	bl	8008ee0 <__mcmp>
 8006f1e:	42a8      	cmp	r0, r5
 8006f20:	da55      	bge.n	8006fce <_strtod_l+0x87e>
 8006f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	d11b      	bne.n	8006f60 <_strtod_l+0x810>
 8006f28:	42ae      	cmp	r6, r5
 8006f2a:	d119      	bne.n	8006f60 <_strtod_l+0x810>
 8006f2c:	033b      	lsls	r3, r7, #12
 8006f2e:	42ab      	cmp	r3, r5
 8006f30:	d116      	bne.n	8006f60 <_strtod_l+0x810>
 8006f32:	22d6      	movs	r2, #214	; 0xd6
 8006f34:	4b71      	ldr	r3, [pc, #452]	; (80070fc <_strtod_l+0x9ac>)
 8006f36:	04d2      	lsls	r2, r2, #19
 8006f38:	403b      	ands	r3, r7
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d910      	bls.n	8006f60 <_strtod_l+0x810>
 8006f3e:	6963      	ldr	r3, [r4, #20]
 8006f40:	42ab      	cmp	r3, r5
 8006f42:	d102      	bne.n	8006f4a <_strtod_l+0x7fa>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	dd0a      	ble.n	8006f60 <_strtod_l+0x810>
 8006f4a:	0021      	movs	r1, r4
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	9804      	ldr	r0, [sp, #16]
 8006f50:	f001 ff74 	bl	8008e3c <__lshift>
 8006f54:	9905      	ldr	r1, [sp, #20]
 8006f56:	0004      	movs	r4, r0
 8006f58:	f001 ffc2 	bl	8008ee0 <__mcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	dc6b      	bgt.n	8007038 <_strtod_l+0x8e8>
 8006f60:	9b06      	ldr	r3, [sp, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d178      	bne.n	8007058 <_strtod_l+0x908>
 8006f66:	e632      	b.n	8006bce <_strtod_l+0x47e>
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4214      	tst	r4, r2
 8006f6c:	d007      	beq.n	8006f7e <_strtod_l+0x82e>
 8006f6e:	4a64      	ldr	r2, [pc, #400]	; (8007100 <_strtod_l+0x9b0>)
 8006f70:	00eb      	lsls	r3, r5, #3
 8006f72:	18d3      	adds	r3, r2, r3
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f7fa fbb0 	bl	80016dc <__aeabi_dmul>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	3501      	adds	r5, #1
 8006f80:	1064      	asrs	r4, r4, #1
 8006f82:	e6df      	b.n	8006d44 <_strtod_l+0x5f4>
 8006f84:	2101      	movs	r1, #1
 8006f86:	3b20      	subs	r3, #32
 8006f88:	4249      	negs	r1, r1
 8006f8a:	4099      	lsls	r1, r3
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	0017      	movs	r7, r2
 8006f90:	e6f2      	b.n	8006d78 <_strtod_l+0x628>
 8006f92:	2201      	movs	r2, #1
 8006f94:	4252      	negs	r2, r2
 8006f96:	409a      	lsls	r2, r3
 8006f98:	4016      	ands	r6, r2
 8006f9a:	e6ed      	b.n	8006d78 <_strtod_l+0x628>
 8006f9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006fa0:	1ad2      	subs	r2, r2, r3
 8006fa2:	4694      	mov	ip, r2
 8006fa4:	e73c      	b.n	8006e20 <_strtod_l+0x6d0>
 8006fa6:	4957      	ldr	r1, [pc, #348]	; (8007104 <_strtod_l+0x9b4>)
 8006fa8:	1acb      	subs	r3, r1, r3
 8006faa:	0001      	movs	r1, r0
 8006fac:	4099      	lsls	r1, r3
 8006fae:	9110      	str	r1, [sp, #64]	; 0x40
 8006fb0:	9014      	str	r0, [sp, #80]	; 0x50
 8006fb2:	e74a      	b.n	8006e4a <_strtod_l+0x6fa>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9310      	str	r3, [sp, #64]	; 0x40
 8006fb8:	e7fa      	b.n	8006fb0 <_strtod_l+0x860>
 8006fba:	9a08      	ldr	r2, [sp, #32]
 8006fbc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006fbe:	9804      	ldr	r0, [sp, #16]
 8006fc0:	f001 ff3c 	bl	8008e3c <__lshift>
 8006fc4:	9022      	str	r0, [sp, #136]	; 0x88
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d000      	beq.n	8006fcc <_strtod_l+0x87c>
 8006fca:	e776      	b.n	8006eba <_strtod_l+0x76a>
 8006fcc:	e5f6      	b.n	8006bbc <_strtod_l+0x46c>
 8006fce:	970c      	str	r7, [sp, #48]	; 0x30
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d000      	beq.n	8006fd6 <_strtod_l+0x886>
 8006fd4:	e0a0      	b.n	8007118 <_strtod_l+0x9c8>
 8006fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fd8:	033b      	lsls	r3, r7, #12
 8006fda:	0b1b      	lsrs	r3, r3, #12
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d027      	beq.n	8007030 <_strtod_l+0x8e0>
 8006fe0:	4a49      	ldr	r2, [pc, #292]	; (8007108 <_strtod_l+0x9b8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d157      	bne.n	8007096 <_strtod_l+0x946>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	9b06      	ldr	r3, [sp, #24]
 8006fea:	4252      	negs	r2, r2
 8006fec:	0031      	movs	r1, r6
 8006fee:	0010      	movs	r0, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <_strtod_l+0x8bc>
 8006ff4:	25d4      	movs	r5, #212	; 0xd4
 8006ff6:	4b41      	ldr	r3, [pc, #260]	; (80070fc <_strtod_l+0x9ac>)
 8006ff8:	04ed      	lsls	r5, r5, #19
 8006ffa:	403b      	ands	r3, r7
 8006ffc:	0010      	movs	r0, r2
 8006ffe:	42ab      	cmp	r3, r5
 8007000:	d804      	bhi.n	800700c <_strtod_l+0x8bc>
 8007002:	306c      	adds	r0, #108	; 0x6c
 8007004:	0d1b      	lsrs	r3, r3, #20
 8007006:	1ac3      	subs	r3, r0, r3
 8007008:	409a      	lsls	r2, r3
 800700a:	0010      	movs	r0, r2
 800700c:	4281      	cmp	r1, r0
 800700e:	d142      	bne.n	8007096 <_strtod_l+0x946>
 8007010:	4b3e      	ldr	r3, [pc, #248]	; (800710c <_strtod_l+0x9bc>)
 8007012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007014:	429a      	cmp	r2, r3
 8007016:	d102      	bne.n	800701e <_strtod_l+0x8ce>
 8007018:	1c4b      	adds	r3, r1, #1
 800701a:	d100      	bne.n	800701e <_strtod_l+0x8ce>
 800701c:	e5ce      	b.n	8006bbc <_strtod_l+0x46c>
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <_strtod_l+0x9ac>)
 8007020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007022:	2600      	movs	r6, #0
 8007024:	401a      	ands	r2, r3
 8007026:	0013      	movs	r3, r2
 8007028:	2280      	movs	r2, #128	; 0x80
 800702a:	0352      	lsls	r2, r2, #13
 800702c:	189f      	adds	r7, r3, r2
 800702e:	e797      	b.n	8006f60 <_strtod_l+0x810>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d130      	bne.n	8007096 <_strtod_l+0x946>
 8007034:	2e00      	cmp	r6, #0
 8007036:	d12e      	bne.n	8007096 <_strtod_l+0x946>
 8007038:	9906      	ldr	r1, [sp, #24]
 800703a:	003b      	movs	r3, r7
 800703c:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <_strtod_l+0x9ac>)
 800703e:	2900      	cmp	r1, #0
 8007040:	d020      	beq.n	8007084 <_strtod_l+0x934>
 8007042:	0011      	movs	r1, r2
 8007044:	20d6      	movs	r0, #214	; 0xd6
 8007046:	4039      	ands	r1, r7
 8007048:	04c0      	lsls	r0, r0, #19
 800704a:	4281      	cmp	r1, r0
 800704c:	dc1a      	bgt.n	8007084 <_strtod_l+0x934>
 800704e:	23dc      	movs	r3, #220	; 0xdc
 8007050:	049b      	lsls	r3, r3, #18
 8007052:	4299      	cmp	r1, r3
 8007054:	dc00      	bgt.n	8007058 <_strtod_l+0x908>
 8007056:	e646      	b.n	8006ce6 <_strtod_l+0x596>
 8007058:	4b2d      	ldr	r3, [pc, #180]	; (8007110 <_strtod_l+0x9c0>)
 800705a:	0030      	movs	r0, r6
 800705c:	931b      	str	r3, [sp, #108]	; 0x6c
 800705e:	2300      	movs	r3, #0
 8007060:	931a      	str	r3, [sp, #104]	; 0x68
 8007062:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007066:	0039      	movs	r1, r7
 8007068:	f7fa fb38 	bl	80016dc <__aeabi_dmul>
 800706c:	0006      	movs	r6, r0
 800706e:	000f      	movs	r7, r1
 8007070:	1e0b      	subs	r3, r1, #0
 8007072:	d000      	beq.n	8007076 <_strtod_l+0x926>
 8007074:	e5ab      	b.n	8006bce <_strtod_l+0x47e>
 8007076:	2800      	cmp	r0, #0
 8007078:	d000      	beq.n	800707c <_strtod_l+0x92c>
 800707a:	e5a8      	b.n	8006bce <_strtod_l+0x47e>
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	3322      	adds	r3, #34	; 0x22
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e5a4      	b.n	8006bce <_strtod_l+0x47e>
 8007084:	2601      	movs	r6, #1
 8007086:	4013      	ands	r3, r2
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <_strtod_l+0x9c4>)
 800708a:	4276      	negs	r6, r6
 800708c:	189b      	adds	r3, r3, r2
 800708e:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <_strtod_l+0x9b8>)
 8007090:	431a      	orrs	r2, r3
 8007092:	0017      	movs	r7, r2
 8007094:	e764      	b.n	8006f60 <_strtod_l+0x810>
 8007096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <_strtod_l+0x978>
 800709c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800709e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070a0:	4213      	tst	r3, r2
 80070a2:	d100      	bne.n	80070a6 <_strtod_l+0x956>
 80070a4:	e75c      	b.n	8006f60 <_strtod_l+0x810>
 80070a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070a8:	9a06      	ldr	r2, [sp, #24]
 80070aa:	0030      	movs	r0, r6
 80070ac:	0039      	movs	r1, r7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00f      	beq.n	80070d2 <_strtod_l+0x982>
 80070b2:	f7ff fb35 	bl	8006720 <sulp>
 80070b6:	0002      	movs	r2, r0
 80070b8:	000b      	movs	r3, r1
 80070ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070be:	f7f9 fbe7 	bl	8000890 <__aeabi_dadd>
 80070c2:	0006      	movs	r6, r0
 80070c4:	000f      	movs	r7, r1
 80070c6:	e74b      	b.n	8006f60 <_strtod_l+0x810>
 80070c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ca:	4233      	tst	r3, r6
 80070cc:	d100      	bne.n	80070d0 <_strtod_l+0x980>
 80070ce:	e747      	b.n	8006f60 <_strtod_l+0x810>
 80070d0:	e7e9      	b.n	80070a6 <_strtod_l+0x956>
 80070d2:	f7ff fb25 	bl	8006720 <sulp>
 80070d6:	0002      	movs	r2, r0
 80070d8:	000b      	movs	r3, r1
 80070da:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070de:	f7fa fd6f 	bl	8001bc0 <__aeabi_dsub>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	0006      	movs	r6, r0
 80070e8:	000f      	movs	r7, r1
 80070ea:	f7f9 f9a3 	bl	8000434 <__aeabi_dcmpeq>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d000      	beq.n	80070f4 <_strtod_l+0x9a4>
 80070f2:	e5f8      	b.n	8006ce6 <_strtod_l+0x596>
 80070f4:	e734      	b.n	8006f60 <_strtod_l+0x810>
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	fffffc02 	.word	0xfffffc02
 80070fc:	7ff00000 	.word	0x7ff00000
 8007100:	0800a0b8 	.word	0x0800a0b8
 8007104:	fffffbe2 	.word	0xfffffbe2
 8007108:	000fffff 	.word	0x000fffff
 800710c:	7fefffff 	.word	0x7fefffff
 8007110:	39500000 	.word	0x39500000
 8007114:	fff00000 	.word	0xfff00000
 8007118:	9905      	ldr	r1, [sp, #20]
 800711a:	0020      	movs	r0, r4
 800711c:	f002 f824 	bl	8009168 <__ratio>
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	2200      	movs	r2, #0
 8007124:	05db      	lsls	r3, r3, #23
 8007126:	9008      	str	r0, [sp, #32]
 8007128:	9109      	str	r1, [sp, #36]	; 0x24
 800712a:	f7f9 f993 	bl	8000454 <__aeabi_dcmple>
 800712e:	2800      	cmp	r0, #0
 8007130:	d100      	bne.n	8007134 <_strtod_l+0x9e4>
 8007132:	e07f      	b.n	8007234 <_strtod_l+0xae4>
 8007134:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007136:	2b00      	cmp	r3, #0
 8007138:	d04b      	beq.n	80071d2 <_strtod_l+0xa82>
 800713a:	2200      	movs	r2, #0
 800713c:	4b8a      	ldr	r3, [pc, #552]	; (8007368 <_strtod_l+0xc18>)
 800713e:	9210      	str	r2, [sp, #64]	; 0x40
 8007140:	9311      	str	r3, [sp, #68]	; 0x44
 8007142:	4b89      	ldr	r3, [pc, #548]	; (8007368 <_strtod_l+0xc18>)
 8007144:	9308      	str	r3, [sp, #32]
 8007146:	4a89      	ldr	r2, [pc, #548]	; (800736c <_strtod_l+0xc1c>)
 8007148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714a:	4013      	ands	r3, r2
 800714c:	9314      	str	r3, [sp, #80]	; 0x50
 800714e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007150:	4b87      	ldr	r3, [pc, #540]	; (8007370 <_strtod_l+0xc20>)
 8007152:	429a      	cmp	r2, r3
 8007154:	d000      	beq.n	8007158 <_strtod_l+0xa08>
 8007156:	e0ba      	b.n	80072ce <_strtod_l+0xb7e>
 8007158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800715a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800715c:	921a      	str	r2, [sp, #104]	; 0x68
 800715e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007160:	4a84      	ldr	r2, [pc, #528]	; (8007374 <_strtod_l+0xc24>)
 8007162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007164:	4694      	mov	ip, r2
 8007166:	4463      	add	r3, ip
 8007168:	001f      	movs	r7, r3
 800716a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800716c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800716e:	0030      	movs	r0, r6
 8007170:	0039      	movs	r1, r7
 8007172:	920c      	str	r2, [sp, #48]	; 0x30
 8007174:	930d      	str	r3, [sp, #52]	; 0x34
 8007176:	f001 ff31 	bl	8008fdc <__ulp>
 800717a:	0002      	movs	r2, r0
 800717c:	000b      	movs	r3, r1
 800717e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007180:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007182:	f7fa faab 	bl	80016dc <__aeabi_dmul>
 8007186:	0032      	movs	r2, r6
 8007188:	003b      	movs	r3, r7
 800718a:	f7f9 fb81 	bl	8000890 <__aeabi_dadd>
 800718e:	4a77      	ldr	r2, [pc, #476]	; (800736c <_strtod_l+0xc1c>)
 8007190:	4b79      	ldr	r3, [pc, #484]	; (8007378 <_strtod_l+0xc28>)
 8007192:	0006      	movs	r6, r0
 8007194:	400a      	ands	r2, r1
 8007196:	429a      	cmp	r2, r3
 8007198:	d964      	bls.n	8007264 <_strtod_l+0xb14>
 800719a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800719c:	4a77      	ldr	r2, [pc, #476]	; (800737c <_strtod_l+0xc2c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d103      	bne.n	80071aa <_strtod_l+0xa5a>
 80071a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071a4:	3301      	adds	r3, #1
 80071a6:	d100      	bne.n	80071aa <_strtod_l+0xa5a>
 80071a8:	e508      	b.n	8006bbc <_strtod_l+0x46c>
 80071aa:	2601      	movs	r6, #1
 80071ac:	4f73      	ldr	r7, [pc, #460]	; (800737c <_strtod_l+0xc2c>)
 80071ae:	4276      	negs	r6, r6
 80071b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80071b2:	9804      	ldr	r0, [sp, #16]
 80071b4:	f001 fc7a 	bl	8008aac <_Bfree>
 80071b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071ba:	9804      	ldr	r0, [sp, #16]
 80071bc:	f001 fc76 	bl	8008aac <_Bfree>
 80071c0:	9905      	ldr	r1, [sp, #20]
 80071c2:	9804      	ldr	r0, [sp, #16]
 80071c4:	f001 fc72 	bl	8008aac <_Bfree>
 80071c8:	0021      	movs	r1, r4
 80071ca:	9804      	ldr	r0, [sp, #16]
 80071cc:	f001 fc6e 	bl	8008aac <_Bfree>
 80071d0:	e5f4      	b.n	8006dbc <_strtod_l+0x66c>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	d11e      	bne.n	8007214 <_strtod_l+0xac4>
 80071d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071d8:	031b      	lsls	r3, r3, #12
 80071da:	d121      	bne.n	8007220 <_strtod_l+0xad0>
 80071dc:	9808      	ldr	r0, [sp, #32]
 80071de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071e0:	2200      	movs	r2, #0
 80071e2:	4b61      	ldr	r3, [pc, #388]	; (8007368 <_strtod_l+0xc18>)
 80071e4:	f7f9 f92c 	bl	8000440 <__aeabi_dcmplt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d11f      	bne.n	800722c <_strtod_l+0xadc>
 80071ec:	9808      	ldr	r0, [sp, #32]
 80071ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f0:	2200      	movs	r2, #0
 80071f2:	4b63      	ldr	r3, [pc, #396]	; (8007380 <_strtod_l+0xc30>)
 80071f4:	f7fa fa72 	bl	80016dc <__aeabi_dmul>
 80071f8:	0005      	movs	r5, r0
 80071fa:	9108      	str	r1, [sp, #32]
 80071fc:	2280      	movs	r2, #128	; 0x80
 80071fe:	0612      	lsls	r2, r2, #24
 8007200:	4694      	mov	ip, r2
 8007202:	9b08      	ldr	r3, [sp, #32]
 8007204:	951e      	str	r5, [sp, #120]	; 0x78
 8007206:	4463      	add	r3, ip
 8007208:	931f      	str	r3, [sp, #124]	; 0x7c
 800720a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800720c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800720e:	9210      	str	r2, [sp, #64]	; 0x40
 8007210:	9311      	str	r3, [sp, #68]	; 0x44
 8007212:	e798      	b.n	8007146 <_strtod_l+0x9f6>
 8007214:	2e01      	cmp	r6, #1
 8007216:	d103      	bne.n	8007220 <_strtod_l+0xad0>
 8007218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800721a:	2b00      	cmp	r3, #0
 800721c:	d100      	bne.n	8007220 <_strtod_l+0xad0>
 800721e:	e562      	b.n	8006ce6 <_strtod_l+0x596>
 8007220:	2200      	movs	r2, #0
 8007222:	4b58      	ldr	r3, [pc, #352]	; (8007384 <_strtod_l+0xc34>)
 8007224:	2500      	movs	r5, #0
 8007226:	9210      	str	r2, [sp, #64]	; 0x40
 8007228:	9311      	str	r3, [sp, #68]	; 0x44
 800722a:	e78a      	b.n	8007142 <_strtod_l+0x9f2>
 800722c:	4b54      	ldr	r3, [pc, #336]	; (8007380 <_strtod_l+0xc30>)
 800722e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	e7e3      	b.n	80071fc <_strtod_l+0xaac>
 8007234:	4b52      	ldr	r3, [pc, #328]	; (8007380 <_strtod_l+0xc30>)
 8007236:	9808      	ldr	r0, [sp, #32]
 8007238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800723a:	2200      	movs	r2, #0
 800723c:	f7fa fa4e 	bl	80016dc <__aeabi_dmul>
 8007240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007242:	0005      	movs	r5, r0
 8007244:	9108      	str	r1, [sp, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d107      	bne.n	800725a <_strtod_l+0xb0a>
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	18cb      	adds	r3, r1, r3
 8007250:	9016      	str	r0, [sp, #88]	; 0x58
 8007252:	9317      	str	r3, [sp, #92]	; 0x5c
 8007254:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007256:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007258:	e7d9      	b.n	800720e <_strtod_l+0xabe>
 800725a:	0002      	movs	r2, r0
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	9216      	str	r2, [sp, #88]	; 0x58
 8007260:	9317      	str	r3, [sp, #92]	; 0x5c
 8007262:	e7f7      	b.n	8007254 <_strtod_l+0xb04>
 8007264:	23d4      	movs	r3, #212	; 0xd4
 8007266:	049b      	lsls	r3, r3, #18
 8007268:	18cf      	adds	r7, r1, r3
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d19f      	bne.n	80071b0 <_strtod_l+0xa60>
 8007270:	4b3e      	ldr	r3, [pc, #248]	; (800736c <_strtod_l+0xc1c>)
 8007272:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007274:	970c      	str	r7, [sp, #48]	; 0x30
 8007276:	403b      	ands	r3, r7
 8007278:	429a      	cmp	r2, r3
 800727a:	d199      	bne.n	80071b0 <_strtod_l+0xa60>
 800727c:	9908      	ldr	r1, [sp, #32]
 800727e:	0028      	movs	r0, r5
 8007280:	f7fb f802 	bl	8002288 <__aeabi_d2iz>
 8007284:	f7fb f836 	bl	80022f4 <__aeabi_i2d>
 8007288:	000b      	movs	r3, r1
 800728a:	0002      	movs	r2, r0
 800728c:	9908      	ldr	r1, [sp, #32]
 800728e:	0028      	movs	r0, r5
 8007290:	f7fa fc96 	bl	8001bc0 <__aeabi_dsub>
 8007294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007296:	9008      	str	r0, [sp, #32]
 8007298:	9109      	str	r1, [sp, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <_strtod_l+0xb58>
 800729e:	2e00      	cmp	r6, #0
 80072a0:	d102      	bne.n	80072a8 <_strtod_l+0xb58>
 80072a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a4:	031b      	lsls	r3, r3, #12
 80072a6:	d058      	beq.n	800735a <_strtod_l+0xc0a>
 80072a8:	9808      	ldr	r0, [sp, #32]
 80072aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ac:	4a36      	ldr	r2, [pc, #216]	; (8007388 <_strtod_l+0xc38>)
 80072ae:	4b37      	ldr	r3, [pc, #220]	; (800738c <_strtod_l+0xc3c>)
 80072b0:	f7f9 f8c6 	bl	8000440 <__aeabi_dcmplt>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d000      	beq.n	80072ba <_strtod_l+0xb6a>
 80072b8:	e489      	b.n	8006bce <_strtod_l+0x47e>
 80072ba:	9808      	ldr	r0, [sp, #32]
 80072bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072be:	4a34      	ldr	r2, [pc, #208]	; (8007390 <_strtod_l+0xc40>)
 80072c0:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <_strtod_l+0xc30>)
 80072c2:	f7f9 f8d1 	bl	8000468 <__aeabi_dcmpgt>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d100      	bne.n	80072cc <_strtod_l+0xb7c>
 80072ca:	e771      	b.n	80071b0 <_strtod_l+0xa60>
 80072cc:	e47f      	b.n	8006bce <_strtod_l+0x47e>
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02a      	beq.n	800732a <_strtod_l+0xbda>
 80072d4:	23d4      	movs	r3, #212	; 0xd4
 80072d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072d8:	04db      	lsls	r3, r3, #19
 80072da:	429a      	cmp	r2, r3
 80072dc:	d825      	bhi.n	800732a <_strtod_l+0xbda>
 80072de:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <_strtod_l+0xc44>)
 80072e0:	4b2d      	ldr	r3, [pc, #180]	; (8007398 <_strtod_l+0xc48>)
 80072e2:	0028      	movs	r0, r5
 80072e4:	9908      	ldr	r1, [sp, #32]
 80072e6:	f7f9 f8b5 	bl	8000454 <__aeabi_dcmple>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d016      	beq.n	800731c <_strtod_l+0xbcc>
 80072ee:	0028      	movs	r0, r5
 80072f0:	9908      	ldr	r1, [sp, #32]
 80072f2:	f7f9 f927 	bl	8000544 <__aeabi_d2uiz>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d100      	bne.n	80072fc <_strtod_l+0xbac>
 80072fa:	3001      	adds	r0, #1
 80072fc:	f7fb f834 	bl	8002368 <__aeabi_ui2d>
 8007300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007302:	0005      	movs	r5, r0
 8007304:	9108      	str	r1, [sp, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d122      	bne.n	8007350 <_strtod_l+0xc00>
 800730a:	2380      	movs	r3, #128	; 0x80
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	18cb      	adds	r3, r1, r3
 8007310:	9018      	str	r0, [sp, #96]	; 0x60
 8007312:	9319      	str	r3, [sp, #100]	; 0x64
 8007314:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007318:	9210      	str	r2, [sp, #64]	; 0x40
 800731a:	9311      	str	r3, [sp, #68]	; 0x44
 800731c:	22d6      	movs	r2, #214	; 0xd6
 800731e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007320:	04d2      	lsls	r2, r2, #19
 8007322:	189b      	adds	r3, r3, r2
 8007324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	9311      	str	r3, [sp, #68]	; 0x44
 800732a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800732c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800732e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007330:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007332:	f001 fe53 	bl	8008fdc <__ulp>
 8007336:	0002      	movs	r2, r0
 8007338:	000b      	movs	r3, r1
 800733a:	0030      	movs	r0, r6
 800733c:	0039      	movs	r1, r7
 800733e:	f7fa f9cd 	bl	80016dc <__aeabi_dmul>
 8007342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007346:	f7f9 faa3 	bl	8000890 <__aeabi_dadd>
 800734a:	0006      	movs	r6, r0
 800734c:	000f      	movs	r7, r1
 800734e:	e78c      	b.n	800726a <_strtod_l+0xb1a>
 8007350:	0002      	movs	r2, r0
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	9218      	str	r2, [sp, #96]	; 0x60
 8007356:	9319      	str	r3, [sp, #100]	; 0x64
 8007358:	e7dc      	b.n	8007314 <_strtod_l+0xbc4>
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <_strtod_l+0xc38>)
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <_strtod_l+0xc4c>)
 800735e:	9808      	ldr	r0, [sp, #32]
 8007360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007362:	f7f9 f86d 	bl	8000440 <__aeabi_dcmplt>
 8007366:	e7ae      	b.n	80072c6 <_strtod_l+0xb76>
 8007368:	3ff00000 	.word	0x3ff00000
 800736c:	7ff00000 	.word	0x7ff00000
 8007370:	7fe00000 	.word	0x7fe00000
 8007374:	fcb00000 	.word	0xfcb00000
 8007378:	7c9fffff 	.word	0x7c9fffff
 800737c:	7fefffff 	.word	0x7fefffff
 8007380:	3fe00000 	.word	0x3fe00000
 8007384:	bff00000 	.word	0xbff00000
 8007388:	94a03595 	.word	0x94a03595
 800738c:	3fdfffff 	.word	0x3fdfffff
 8007390:	35afe535 	.word	0x35afe535
 8007394:	ffc00000 	.word	0xffc00000
 8007398:	41dfffff 	.word	0x41dfffff
 800739c:	3fcfffff 	.word	0x3fcfffff

080073a0 <_strtod_r>:
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <_strtod_r+0x14>)
 80073a2:	b510      	push	{r4, lr}
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d100      	bne.n	80073ae <_strtod_r+0xe>
 80073ac:	4b02      	ldr	r3, [pc, #8]	; (80073b8 <_strtod_r+0x18>)
 80073ae:	f7ff f9cf 	bl	8006750 <_strtod_l>
 80073b2:	bd10      	pop	{r4, pc}
 80073b4:	20000010 	.word	0x20000010
 80073b8:	20000074 	.word	0x20000074

080073bc <_strtol_l.isra.0>:
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	001f      	movs	r7, r3
 80073c0:	000e      	movs	r6, r1
 80073c2:	b087      	sub	sp, #28
 80073c4:	9005      	str	r0, [sp, #20]
 80073c6:	9101      	str	r1, [sp, #4]
 80073c8:	9202      	str	r2, [sp, #8]
 80073ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073cc:	7834      	ldrb	r4, [r6, #0]
 80073ce:	f001 faf3 	bl	80089b8 <__locale_ctype_ptr_l>
 80073d2:	2208      	movs	r2, #8
 80073d4:	1900      	adds	r0, r0, r4
 80073d6:	7843      	ldrb	r3, [r0, #1]
 80073d8:	1c75      	adds	r5, r6, #1
 80073da:	4013      	ands	r3, r2
 80073dc:	d136      	bne.n	800744c <_strtol_l.isra.0+0x90>
 80073de:	2c2d      	cmp	r4, #45	; 0x2d
 80073e0:	d136      	bne.n	8007450 <_strtol_l.isra.0+0x94>
 80073e2:	1cb5      	adds	r5, r6, #2
 80073e4:	7874      	ldrb	r4, [r6, #1]
 80073e6:	2601      	movs	r6, #1
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	d062      	beq.n	80074b2 <_strtol_l.isra.0+0xf6>
 80073ec:	2f10      	cmp	r7, #16
 80073ee:	d109      	bne.n	8007404 <_strtol_l.isra.0+0x48>
 80073f0:	2c30      	cmp	r4, #48	; 0x30
 80073f2:	d107      	bne.n	8007404 <_strtol_l.isra.0+0x48>
 80073f4:	2220      	movs	r2, #32
 80073f6:	782b      	ldrb	r3, [r5, #0]
 80073f8:	4393      	bics	r3, r2
 80073fa:	2b58      	cmp	r3, #88	; 0x58
 80073fc:	d154      	bne.n	80074a8 <_strtol_l.isra.0+0xec>
 80073fe:	2710      	movs	r7, #16
 8007400:	786c      	ldrb	r4, [r5, #1]
 8007402:	3502      	adds	r5, #2
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <_strtol_l.isra.0+0x100>)
 8007406:	0039      	movs	r1, r7
 8007408:	18f3      	adds	r3, r6, r3
 800740a:	0018      	movs	r0, r3
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	f7f8 ff11 	bl	8000234 <__aeabi_uidivmod>
 8007412:	9104      	str	r1, [sp, #16]
 8007414:	2101      	movs	r1, #1
 8007416:	2300      	movs	r3, #0
 8007418:	4249      	negs	r1, r1
 800741a:	0002      	movs	r2, r0
 800741c:	468c      	mov	ip, r1
 800741e:	0018      	movs	r0, r3
 8007420:	0021      	movs	r1, r4
 8007422:	3930      	subs	r1, #48	; 0x30
 8007424:	2909      	cmp	r1, #9
 8007426:	d81a      	bhi.n	800745e <_strtol_l.isra.0+0xa2>
 8007428:	000c      	movs	r4, r1
 800742a:	42a7      	cmp	r7, r4
 800742c:	dd23      	ble.n	8007476 <_strtol_l.isra.0+0xba>
 800742e:	1c59      	adds	r1, r3, #1
 8007430:	d009      	beq.n	8007446 <_strtol_l.isra.0+0x8a>
 8007432:	4663      	mov	r3, ip
 8007434:	4282      	cmp	r2, r0
 8007436:	d306      	bcc.n	8007446 <_strtol_l.isra.0+0x8a>
 8007438:	d102      	bne.n	8007440 <_strtol_l.isra.0+0x84>
 800743a:	9904      	ldr	r1, [sp, #16]
 800743c:	42a1      	cmp	r1, r4
 800743e:	db02      	blt.n	8007446 <_strtol_l.isra.0+0x8a>
 8007440:	2301      	movs	r3, #1
 8007442:	4378      	muls	r0, r7
 8007444:	1820      	adds	r0, r4, r0
 8007446:	782c      	ldrb	r4, [r5, #0]
 8007448:	3501      	adds	r5, #1
 800744a:	e7e9      	b.n	8007420 <_strtol_l.isra.0+0x64>
 800744c:	002e      	movs	r6, r5
 800744e:	e7bc      	b.n	80073ca <_strtol_l.isra.0+0xe>
 8007450:	2c2b      	cmp	r4, #43	; 0x2b
 8007452:	d001      	beq.n	8007458 <_strtol_l.isra.0+0x9c>
 8007454:	001e      	movs	r6, r3
 8007456:	e7c7      	b.n	80073e8 <_strtol_l.isra.0+0x2c>
 8007458:	1cb5      	adds	r5, r6, #2
 800745a:	7874      	ldrb	r4, [r6, #1]
 800745c:	e7fa      	b.n	8007454 <_strtol_l.isra.0+0x98>
 800745e:	0021      	movs	r1, r4
 8007460:	3941      	subs	r1, #65	; 0x41
 8007462:	2919      	cmp	r1, #25
 8007464:	d801      	bhi.n	800746a <_strtol_l.isra.0+0xae>
 8007466:	3c37      	subs	r4, #55	; 0x37
 8007468:	e7df      	b.n	800742a <_strtol_l.isra.0+0x6e>
 800746a:	0021      	movs	r1, r4
 800746c:	3961      	subs	r1, #97	; 0x61
 800746e:	2919      	cmp	r1, #25
 8007470:	d801      	bhi.n	8007476 <_strtol_l.isra.0+0xba>
 8007472:	3c57      	subs	r4, #87	; 0x57
 8007474:	e7d9      	b.n	800742a <_strtol_l.isra.0+0x6e>
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	d108      	bne.n	800748c <_strtol_l.isra.0+0xd0>
 800747a:	9a05      	ldr	r2, [sp, #20]
 800747c:	3323      	adds	r3, #35	; 0x23
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	9803      	ldr	r0, [sp, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <_strtol_l.isra.0+0xe0>
 8007488:	b007      	add	sp, #28
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748c:	2e00      	cmp	r6, #0
 800748e:	d000      	beq.n	8007492 <_strtol_l.isra.0+0xd6>
 8007490:	4240      	negs	r0, r0
 8007492:	9a02      	ldr	r2, [sp, #8]
 8007494:	2a00      	cmp	r2, #0
 8007496:	d0f7      	beq.n	8007488 <_strtol_l.isra.0+0xcc>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <_strtol_l.isra.0+0xe4>
 800749c:	1e6b      	subs	r3, r5, #1
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e7ef      	b.n	8007488 <_strtol_l.isra.0+0xcc>
 80074a8:	2430      	movs	r4, #48	; 0x30
 80074aa:	2f00      	cmp	r7, #0
 80074ac:	d1aa      	bne.n	8007404 <_strtol_l.isra.0+0x48>
 80074ae:	2708      	movs	r7, #8
 80074b0:	e7a8      	b.n	8007404 <_strtol_l.isra.0+0x48>
 80074b2:	2c30      	cmp	r4, #48	; 0x30
 80074b4:	d09e      	beq.n	80073f4 <_strtol_l.isra.0+0x38>
 80074b6:	270a      	movs	r7, #10
 80074b8:	e7a4      	b.n	8007404 <_strtol_l.isra.0+0x48>
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	7fffffff 	.word	0x7fffffff

080074c0 <_strtol_r>:
 80074c0:	b513      	push	{r0, r1, r4, lr}
 80074c2:	4c05      	ldr	r4, [pc, #20]	; (80074d8 <_strtol_r+0x18>)
 80074c4:	6824      	ldr	r4, [r4, #0]
 80074c6:	6a24      	ldr	r4, [r4, #32]
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d100      	bne.n	80074ce <_strtol_r+0xe>
 80074cc:	4c03      	ldr	r4, [pc, #12]	; (80074dc <_strtol_r+0x1c>)
 80074ce:	9400      	str	r4, [sp, #0]
 80074d0:	f7ff ff74 	bl	80073bc <_strtol_l.isra.0>
 80074d4:	bd16      	pop	{r1, r2, r4, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	20000010 	.word	0x20000010
 80074dc:	20000074 	.word	0x20000074

080074e0 <quorem>:
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	6903      	ldr	r3, [r0, #16]
 80074e4:	690c      	ldr	r4, [r1, #16]
 80074e6:	b089      	sub	sp, #36	; 0x24
 80074e8:	0007      	movs	r7, r0
 80074ea:	9105      	str	r1, [sp, #20]
 80074ec:	2600      	movs	r6, #0
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	db65      	blt.n	80075be <quorem+0xde>
 80074f2:	000b      	movs	r3, r1
 80074f4:	3c01      	subs	r4, #1
 80074f6:	3314      	adds	r3, #20
 80074f8:	00a5      	lsls	r5, r4, #2
 80074fa:	9303      	str	r3, [sp, #12]
 80074fc:	195b      	adds	r3, r3, r5
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	0003      	movs	r3, r0
 8007502:	3314      	adds	r3, #20
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	195d      	adds	r5, r3, r5
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	6828      	ldr	r0, [r5, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1c59      	adds	r1, r3, #1
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	f7f8 fe09 	bl	8000128 <__udivsi3>
 8007516:	9001      	str	r0, [sp, #4]
 8007518:	42b0      	cmp	r0, r6
 800751a:	d029      	beq.n	8007570 <quorem+0x90>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	9802      	ldr	r0, [sp, #8]
 8007520:	469c      	mov	ip, r3
 8007522:	9606      	str	r6, [sp, #24]
 8007524:	4662      	mov	r2, ip
 8007526:	ca08      	ldmia	r2!, {r3}
 8007528:	4694      	mov	ip, r2
 800752a:	9a01      	ldr	r2, [sp, #4]
 800752c:	b299      	uxth	r1, r3
 800752e:	4351      	muls	r1, r2
 8007530:	0c1b      	lsrs	r3, r3, #16
 8007532:	4353      	muls	r3, r2
 8007534:	1989      	adds	r1, r1, r6
 8007536:	0c0a      	lsrs	r2, r1, #16
 8007538:	189b      	adds	r3, r3, r2
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	0c1e      	lsrs	r6, r3, #16
 800753e:	6803      	ldr	r3, [r0, #0]
 8007540:	b289      	uxth	r1, r1
 8007542:	b29a      	uxth	r2, r3
 8007544:	9b06      	ldr	r3, [sp, #24]
 8007546:	18d2      	adds	r2, r2, r3
 8007548:	6803      	ldr	r3, [r0, #0]
 800754a:	1a52      	subs	r2, r2, r1
 800754c:	0c19      	lsrs	r1, r3, #16
 800754e:	466b      	mov	r3, sp
 8007550:	8b9b      	ldrh	r3, [r3, #28]
 8007552:	1acb      	subs	r3, r1, r3
 8007554:	1411      	asrs	r1, r2, #16
 8007556:	185b      	adds	r3, r3, r1
 8007558:	1419      	asrs	r1, r3, #16
 800755a:	b292      	uxth	r2, r2
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	431a      	orrs	r2, r3
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	9106      	str	r1, [sp, #24]
 8007564:	c004      	stmia	r0!, {r2}
 8007566:	4563      	cmp	r3, ip
 8007568:	d2dc      	bcs.n	8007524 <quorem+0x44>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02d      	beq.n	80075cc <quorem+0xec>
 8007570:	9905      	ldr	r1, [sp, #20]
 8007572:	0038      	movs	r0, r7
 8007574:	f001 fcb4 	bl	8008ee0 <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	db1f      	blt.n	80075bc <quorem+0xdc>
 800757c:	2500      	movs	r5, #0
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	9802      	ldr	r0, [sp, #8]
 8007582:	3301      	adds	r3, #1
 8007584:	9903      	ldr	r1, [sp, #12]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	6802      	ldr	r2, [r0, #0]
 800758a:	c908      	ldmia	r1!, {r3}
 800758c:	b292      	uxth	r2, r2
 800758e:	1955      	adds	r5, r2, r5
 8007590:	b29a      	uxth	r2, r3
 8007592:	1aaa      	subs	r2, r5, r2
 8007594:	6805      	ldr	r5, [r0, #0]
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	0c2d      	lsrs	r5, r5, #16
 800759a:	1aeb      	subs	r3, r5, r3
 800759c:	1415      	asrs	r5, r2, #16
 800759e:	195b      	adds	r3, r3, r5
 80075a0:	141d      	asrs	r5, r3, #16
 80075a2:	b292      	uxth	r2, r2
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	4313      	orrs	r3, r2
 80075a8:	c008      	stmia	r0!, {r3}
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	428b      	cmp	r3, r1
 80075ae:	d2eb      	bcs.n	8007588 <quorem+0xa8>
 80075b0:	9a02      	ldr	r2, [sp, #8]
 80075b2:	00a3      	lsls	r3, r4, #2
 80075b4:	18d3      	adds	r3, r2, r3
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d011      	beq.n	80075e0 <quorem+0x100>
 80075bc:	9e01      	ldr	r6, [sp, #4]
 80075be:	0030      	movs	r0, r6
 80075c0:	b009      	add	sp, #36	; 0x24
 80075c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <quorem+0xf4>
 80075ca:	3c01      	subs	r4, #1
 80075cc:	9b02      	ldr	r3, [sp, #8]
 80075ce:	3d04      	subs	r5, #4
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	d3f7      	bcc.n	80075c4 <quorem+0xe4>
 80075d4:	613c      	str	r4, [r7, #16]
 80075d6:	e7cb      	b.n	8007570 <quorem+0x90>
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	2a00      	cmp	r2, #0
 80075dc:	d104      	bne.n	80075e8 <quorem+0x108>
 80075de:	3c01      	subs	r4, #1
 80075e0:	9a02      	ldr	r2, [sp, #8]
 80075e2:	3b04      	subs	r3, #4
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3f7      	bcc.n	80075d8 <quorem+0xf8>
 80075e8:	613c      	str	r4, [r7, #16]
 80075ea:	e7e7      	b.n	80075bc <quorem+0xdc>

080075ec <_dtoa_r>:
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	0016      	movs	r6, r2
 80075f0:	001f      	movs	r7, r3
 80075f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80075f4:	b09b      	sub	sp, #108	; 0x6c
 80075f6:	9002      	str	r0, [sp, #8]
 80075f8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80075fa:	9606      	str	r6, [sp, #24]
 80075fc:	9707      	str	r7, [sp, #28]
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d108      	bne.n	8007614 <_dtoa_r+0x28>
 8007602:	2010      	movs	r0, #16
 8007604:	f001 f9ea 	bl	80089dc <malloc>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	6258      	str	r0, [r3, #36]	; 0x24
 800760c:	6044      	str	r4, [r0, #4]
 800760e:	6084      	str	r4, [r0, #8]
 8007610:	6004      	str	r4, [r0, #0]
 8007612:	60c4      	str	r4, [r0, #12]
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	2900      	cmp	r1, #0
 800761c:	d00b      	beq.n	8007636 <_dtoa_r+0x4a>
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	2301      	movs	r3, #1
 8007622:	4093      	lsls	r3, r2
 8007624:	604a      	str	r2, [r1, #4]
 8007626:	608b      	str	r3, [r1, #8]
 8007628:	9802      	ldr	r0, [sp, #8]
 800762a:	f001 fa3f 	bl	8008aac <_Bfree>
 800762e:	2200      	movs	r2, #0
 8007630:	9b02      	ldr	r3, [sp, #8]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	2f00      	cmp	r7, #0
 8007638:	da20      	bge.n	800767c <_dtoa_r+0x90>
 800763a:	2301      	movs	r3, #1
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	007b      	lsls	r3, r7, #1
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	9307      	str	r3, [sp, #28]
 8007644:	9c07      	ldr	r4, [sp, #28]
 8007646:	4bb2      	ldr	r3, [pc, #712]	; (8007910 <_dtoa_r+0x324>)
 8007648:	0022      	movs	r2, r4
 800764a:	9317      	str	r3, [sp, #92]	; 0x5c
 800764c:	401a      	ands	r2, r3
 800764e:	429a      	cmp	r2, r3
 8007650:	d117      	bne.n	8007682 <_dtoa_r+0x96>
 8007652:	4bb0      	ldr	r3, [pc, #704]	; (8007914 <_dtoa_r+0x328>)
 8007654:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <_dtoa_r+0x7a>
 800765e:	0324      	lsls	r4, r4, #12
 8007660:	d101      	bne.n	8007666 <_dtoa_r+0x7a>
 8007662:	f000 fd87 	bl	8008174 <_dtoa_r+0xb88>
 8007666:	4bac      	ldr	r3, [pc, #688]	; (8007918 <_dtoa_r+0x32c>)
 8007668:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800766a:	9308      	str	r3, [sp, #32]
 800766c:	2a00      	cmp	r2, #0
 800766e:	d002      	beq.n	8007676 <_dtoa_r+0x8a>
 8007670:	4baa      	ldr	r3, [pc, #680]	; (800791c <_dtoa_r+0x330>)
 8007672:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	9808      	ldr	r0, [sp, #32]
 8007678:	b01b      	add	sp, #108	; 0x6c
 800767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767c:	2300      	movs	r3, #0
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	e7e0      	b.n	8007644 <_dtoa_r+0x58>
 8007682:	9e06      	ldr	r6, [sp, #24]
 8007684:	9f07      	ldr	r7, [sp, #28]
 8007686:	2200      	movs	r2, #0
 8007688:	2300      	movs	r3, #0
 800768a:	0030      	movs	r0, r6
 800768c:	0039      	movs	r1, r7
 800768e:	f7f8 fed1 	bl	8000434 <__aeabi_dcmpeq>
 8007692:	1e05      	subs	r5, r0, #0
 8007694:	d00b      	beq.n	80076ae <_dtoa_r+0xc2>
 8007696:	2301      	movs	r3, #1
 8007698:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	4ba0      	ldr	r3, [pc, #640]	; (8007920 <_dtoa_r+0x334>)
 800769e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	d0e7      	beq.n	8007676 <_dtoa_r+0x8a>
 80076a6:	4a9f      	ldr	r2, [pc, #636]	; (8007924 <_dtoa_r+0x338>)
 80076a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80076aa:	600a      	str	r2, [r1, #0]
 80076ac:	e7e3      	b.n	8007676 <_dtoa_r+0x8a>
 80076ae:	ab18      	add	r3, sp, #96	; 0x60
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	ab19      	add	r3, sp, #100	; 0x64
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	0032      	movs	r2, r6
 80076b8:	003b      	movs	r3, r7
 80076ba:	9802      	ldr	r0, [sp, #8]
 80076bc:	f001 fd00 	bl	80090c0 <__d2b>
 80076c0:	0063      	lsls	r3, r4, #1
 80076c2:	9003      	str	r0, [sp, #12]
 80076c4:	0d5b      	lsrs	r3, r3, #21
 80076c6:	d074      	beq.n	80077b2 <_dtoa_r+0x1c6>
 80076c8:	033a      	lsls	r2, r7, #12
 80076ca:	4c97      	ldr	r4, [pc, #604]	; (8007928 <_dtoa_r+0x33c>)
 80076cc:	0b12      	lsrs	r2, r2, #12
 80076ce:	4314      	orrs	r4, r2
 80076d0:	0021      	movs	r1, r4
 80076d2:	4a96      	ldr	r2, [pc, #600]	; (800792c <_dtoa_r+0x340>)
 80076d4:	0030      	movs	r0, r6
 80076d6:	9516      	str	r5, [sp, #88]	; 0x58
 80076d8:	189e      	adds	r6, r3, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	4b94      	ldr	r3, [pc, #592]	; (8007930 <_dtoa_r+0x344>)
 80076de:	f7fa fa6f 	bl	8001bc0 <__aeabi_dsub>
 80076e2:	4a94      	ldr	r2, [pc, #592]	; (8007934 <_dtoa_r+0x348>)
 80076e4:	4b94      	ldr	r3, [pc, #592]	; (8007938 <_dtoa_r+0x34c>)
 80076e6:	f7f9 fff9 	bl	80016dc <__aeabi_dmul>
 80076ea:	4a94      	ldr	r2, [pc, #592]	; (800793c <_dtoa_r+0x350>)
 80076ec:	4b94      	ldr	r3, [pc, #592]	; (8007940 <_dtoa_r+0x354>)
 80076ee:	f7f9 f8cf 	bl	8000890 <__aeabi_dadd>
 80076f2:	0004      	movs	r4, r0
 80076f4:	0030      	movs	r0, r6
 80076f6:	000d      	movs	r5, r1
 80076f8:	f7fa fdfc 	bl	80022f4 <__aeabi_i2d>
 80076fc:	4a91      	ldr	r2, [pc, #580]	; (8007944 <_dtoa_r+0x358>)
 80076fe:	4b92      	ldr	r3, [pc, #584]	; (8007948 <_dtoa_r+0x35c>)
 8007700:	f7f9 ffec 	bl	80016dc <__aeabi_dmul>
 8007704:	0002      	movs	r2, r0
 8007706:	000b      	movs	r3, r1
 8007708:	0020      	movs	r0, r4
 800770a:	0029      	movs	r1, r5
 800770c:	f7f9 f8c0 	bl	8000890 <__aeabi_dadd>
 8007710:	0004      	movs	r4, r0
 8007712:	000d      	movs	r5, r1
 8007714:	f7fa fdb8 	bl	8002288 <__aeabi_d2iz>
 8007718:	2200      	movs	r2, #0
 800771a:	0007      	movs	r7, r0
 800771c:	2300      	movs	r3, #0
 800771e:	0020      	movs	r0, r4
 8007720:	0029      	movs	r1, r5
 8007722:	f7f8 fe8d 	bl	8000440 <__aeabi_dcmplt>
 8007726:	2800      	cmp	r0, #0
 8007728:	d009      	beq.n	800773e <_dtoa_r+0x152>
 800772a:	0038      	movs	r0, r7
 800772c:	f7fa fde2 	bl	80022f4 <__aeabi_i2d>
 8007730:	002b      	movs	r3, r5
 8007732:	0022      	movs	r2, r4
 8007734:	f7f8 fe7e 	bl	8000434 <__aeabi_dcmpeq>
 8007738:	4243      	negs	r3, r0
 800773a:	4158      	adcs	r0, r3
 800773c:	1a3f      	subs	r7, r7, r0
 800773e:	2301      	movs	r3, #1
 8007740:	9314      	str	r3, [sp, #80]	; 0x50
 8007742:	2f16      	cmp	r7, #22
 8007744:	d80d      	bhi.n	8007762 <_dtoa_r+0x176>
 8007746:	4981      	ldr	r1, [pc, #516]	; (800794c <_dtoa_r+0x360>)
 8007748:	00fb      	lsls	r3, r7, #3
 800774a:	18c9      	adds	r1, r1, r3
 800774c:	6808      	ldr	r0, [r1, #0]
 800774e:	6849      	ldr	r1, [r1, #4]
 8007750:	9a06      	ldr	r2, [sp, #24]
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	f7f8 fe88 	bl	8000468 <__aeabi_dcmpgt>
 8007758:	2800      	cmp	r0, #0
 800775a:	d046      	beq.n	80077ea <_dtoa_r+0x1fe>
 800775c:	2300      	movs	r3, #0
 800775e:	3f01      	subs	r7, #1
 8007760:	9314      	str	r3, [sp, #80]	; 0x50
 8007762:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007764:	1b9e      	subs	r6, r3, r6
 8007766:	2300      	movs	r3, #0
 8007768:	930a      	str	r3, [sp, #40]	; 0x28
 800776a:	0033      	movs	r3, r6
 800776c:	3b01      	subs	r3, #1
 800776e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007770:	d504      	bpl.n	800777c <_dtoa_r+0x190>
 8007772:	2301      	movs	r3, #1
 8007774:	1b9b      	subs	r3, r3, r6
 8007776:	930a      	str	r3, [sp, #40]	; 0x28
 8007778:	2300      	movs	r3, #0
 800777a:	930b      	str	r3, [sp, #44]	; 0x2c
 800777c:	2f00      	cmp	r7, #0
 800777e:	db36      	blt.n	80077ee <_dtoa_r+0x202>
 8007780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007782:	9711      	str	r7, [sp, #68]	; 0x44
 8007784:	19db      	adds	r3, r3, r7
 8007786:	930b      	str	r3, [sp, #44]	; 0x2c
 8007788:	2300      	movs	r3, #0
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800778e:	2401      	movs	r4, #1
 8007790:	2b09      	cmp	r3, #9
 8007792:	d900      	bls.n	8007796 <_dtoa_r+0x1aa>
 8007794:	e084      	b.n	80078a0 <_dtoa_r+0x2b4>
 8007796:	2b05      	cmp	r3, #5
 8007798:	dd02      	ble.n	80077a0 <_dtoa_r+0x1b4>
 800779a:	2400      	movs	r4, #0
 800779c:	3b04      	subs	r3, #4
 800779e:	9320      	str	r3, [sp, #128]	; 0x80
 80077a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077a2:	1e98      	subs	r0, r3, #2
 80077a4:	2803      	cmp	r0, #3
 80077a6:	d900      	bls.n	80077aa <_dtoa_r+0x1be>
 80077a8:	e084      	b.n	80078b4 <_dtoa_r+0x2c8>
 80077aa:	f7f8 fcb3 	bl	8000114 <__gnu_thumb1_case_uqi>
 80077ae:	7775      	.short	0x7775
 80077b0:	6a28      	.short	0x6a28
 80077b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80077b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077b6:	189e      	adds	r6, r3, r2
 80077b8:	4b65      	ldr	r3, [pc, #404]	; (8007950 <_dtoa_r+0x364>)
 80077ba:	18f2      	adds	r2, r6, r3
 80077bc:	2a20      	cmp	r2, #32
 80077be:	dd0f      	ble.n	80077e0 <_dtoa_r+0x1f4>
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	409c      	lsls	r4, r3
 80077c6:	4b63      	ldr	r3, [pc, #396]	; (8007954 <_dtoa_r+0x368>)
 80077c8:	9806      	ldr	r0, [sp, #24]
 80077ca:	18f3      	adds	r3, r6, r3
 80077cc:	40d8      	lsrs	r0, r3
 80077ce:	4320      	orrs	r0, r4
 80077d0:	f7fa fdca 	bl	8002368 <__aeabi_ui2d>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4c60      	ldr	r4, [pc, #384]	; (8007958 <_dtoa_r+0x36c>)
 80077d8:	3e01      	subs	r6, #1
 80077da:	1909      	adds	r1, r1, r4
 80077dc:	9316      	str	r3, [sp, #88]	; 0x58
 80077de:	e77c      	b.n	80076da <_dtoa_r+0xee>
 80077e0:	2320      	movs	r3, #32
 80077e2:	9806      	ldr	r0, [sp, #24]
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	4098      	lsls	r0, r3
 80077e8:	e7f2      	b.n	80077d0 <_dtoa_r+0x1e4>
 80077ea:	9014      	str	r0, [sp, #80]	; 0x50
 80077ec:	e7b9      	b.n	8007762 <_dtoa_r+0x176>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	1bdb      	subs	r3, r3, r7
 80077f2:	930a      	str	r3, [sp, #40]	; 0x28
 80077f4:	427b      	negs	r3, r7
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	2300      	movs	r3, #0
 80077fa:	9311      	str	r3, [sp, #68]	; 0x44
 80077fc:	e7c6      	b.n	800778c <_dtoa_r+0x1a0>
 80077fe:	2301      	movs	r3, #1
 8007800:	930d      	str	r3, [sp, #52]	; 0x34
 8007802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd59      	ble.n	80078bc <_dtoa_r+0x2d0>
 8007808:	930c      	str	r3, [sp, #48]	; 0x30
 800780a:	9309      	str	r3, [sp, #36]	; 0x24
 800780c:	9a02      	ldr	r2, [sp, #8]
 800780e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007810:	2200      	movs	r2, #0
 8007812:	606a      	str	r2, [r5, #4]
 8007814:	3204      	adds	r2, #4
 8007816:	0010      	movs	r0, r2
 8007818:	3014      	adds	r0, #20
 800781a:	6869      	ldr	r1, [r5, #4]
 800781c:	4298      	cmp	r0, r3
 800781e:	d952      	bls.n	80078c6 <_dtoa_r+0x2da>
 8007820:	9802      	ldr	r0, [sp, #8]
 8007822:	f001 f90b 	bl	8008a3c <_Balloc>
 8007826:	9b02      	ldr	r3, [sp, #8]
 8007828:	6028      	str	r0, [r5, #0]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007832:	2b0e      	cmp	r3, #14
 8007834:	d900      	bls.n	8007838 <_dtoa_r+0x24c>
 8007836:	e10a      	b.n	8007a4e <_dtoa_r+0x462>
 8007838:	2c00      	cmp	r4, #0
 800783a:	d100      	bne.n	800783e <_dtoa_r+0x252>
 800783c:	e107      	b.n	8007a4e <_dtoa_r+0x462>
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	9c07      	ldr	r4, [sp, #28]
 8007842:	9312      	str	r3, [sp, #72]	; 0x48
 8007844:	9413      	str	r4, [sp, #76]	; 0x4c
 8007846:	2f00      	cmp	r7, #0
 8007848:	dc00      	bgt.n	800784c <_dtoa_r+0x260>
 800784a:	e089      	b.n	8007960 <_dtoa_r+0x374>
 800784c:	210f      	movs	r1, #15
 800784e:	003a      	movs	r2, r7
 8007850:	4b3e      	ldr	r3, [pc, #248]	; (800794c <_dtoa_r+0x360>)
 8007852:	400a      	ands	r2, r1
 8007854:	00d2      	lsls	r2, r2, #3
 8007856:	189b      	adds	r3, r3, r2
 8007858:	681d      	ldr	r5, [r3, #0]
 800785a:	685e      	ldr	r6, [r3, #4]
 800785c:	2302      	movs	r3, #2
 800785e:	113c      	asrs	r4, r7, #4
 8007860:	930e      	str	r3, [sp, #56]	; 0x38
 8007862:	06e3      	lsls	r3, r4, #27
 8007864:	d50b      	bpl.n	800787e <_dtoa_r+0x292>
 8007866:	4b3d      	ldr	r3, [pc, #244]	; (800795c <_dtoa_r+0x370>)
 8007868:	400c      	ands	r4, r1
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007870:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007872:	f7f9 fb29 	bl	8000ec8 <__aeabi_ddiv>
 8007876:	2303      	movs	r3, #3
 8007878:	9006      	str	r0, [sp, #24]
 800787a:	9107      	str	r1, [sp, #28]
 800787c:	930e      	str	r3, [sp, #56]	; 0x38
 800787e:	2300      	movs	r3, #0
 8007880:	e03a      	b.n	80078f8 <_dtoa_r+0x30c>
 8007882:	2301      	movs	r3, #1
 8007884:	930d      	str	r3, [sp, #52]	; 0x34
 8007886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	930c      	str	r3, [sp, #48]	; 0x30
 800788c:	3301      	adds	r3, #1
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	dcbb      	bgt.n	800780c <_dtoa_r+0x220>
 8007894:	2301      	movs	r3, #1
 8007896:	e7b9      	b.n	800780c <_dtoa_r+0x220>
 8007898:	2300      	movs	r3, #0
 800789a:	e7b1      	b.n	8007800 <_dtoa_r+0x214>
 800789c:	2300      	movs	r3, #0
 800789e:	e7f1      	b.n	8007884 <_dtoa_r+0x298>
 80078a0:	2300      	movs	r3, #0
 80078a2:	940d      	str	r4, [sp, #52]	; 0x34
 80078a4:	9320      	str	r3, [sp, #128]	; 0x80
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2200      	movs	r2, #0
 80078aa:	930c      	str	r3, [sp, #48]	; 0x30
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
 80078ae:	3313      	adds	r3, #19
 80078b0:	9221      	str	r2, [sp, #132]	; 0x84
 80078b2:	e7ab      	b.n	800780c <_dtoa_r+0x220>
 80078b4:	2301      	movs	r3, #1
 80078b6:	930d      	str	r3, [sp, #52]	; 0x34
 80078b8:	3b02      	subs	r3, #2
 80078ba:	e7f5      	b.n	80078a8 <_dtoa_r+0x2bc>
 80078bc:	2301      	movs	r3, #1
 80078be:	930c      	str	r3, [sp, #48]	; 0x30
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	001a      	movs	r2, r3
 80078c4:	e7f4      	b.n	80078b0 <_dtoa_r+0x2c4>
 80078c6:	3101      	adds	r1, #1
 80078c8:	6069      	str	r1, [r5, #4]
 80078ca:	0052      	lsls	r2, r2, #1
 80078cc:	e7a3      	b.n	8007816 <_dtoa_r+0x22a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	421c      	tst	r4, r3
 80078d2:	d00e      	beq.n	80078f2 <_dtoa_r+0x306>
 80078d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d6:	4a21      	ldr	r2, [pc, #132]	; (800795c <_dtoa_r+0x370>)
 80078d8:	3301      	adds	r3, #1
 80078da:	930e      	str	r3, [sp, #56]	; 0x38
 80078dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078de:	0028      	movs	r0, r5
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	0031      	movs	r1, r6
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f7f9 fef7 	bl	80016dc <__aeabi_dmul>
 80078ee:	0005      	movs	r5, r0
 80078f0:	000e      	movs	r6, r1
 80078f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f4:	1064      	asrs	r4, r4, #1
 80078f6:	3301      	adds	r3, #1
 80078f8:	9310      	str	r3, [sp, #64]	; 0x40
 80078fa:	2c00      	cmp	r4, #0
 80078fc:	d1e7      	bne.n	80078ce <_dtoa_r+0x2e2>
 80078fe:	9806      	ldr	r0, [sp, #24]
 8007900:	9907      	ldr	r1, [sp, #28]
 8007902:	002a      	movs	r2, r5
 8007904:	0033      	movs	r3, r6
 8007906:	f7f9 fadf 	bl	8000ec8 <__aeabi_ddiv>
 800790a:	9006      	str	r0, [sp, #24]
 800790c:	9107      	str	r1, [sp, #28]
 800790e:	e042      	b.n	8007996 <_dtoa_r+0x3aa>
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	0000270f 	.word	0x0000270f
 8007918:	0800a0e9 	.word	0x0800a0e9
 800791c:	0800a0ec 	.word	0x0800a0ec
 8007920:	0800a064 	.word	0x0800a064
 8007924:	0800a065 	.word	0x0800a065
 8007928:	3ff00000 	.word	0x3ff00000
 800792c:	fffffc01 	.word	0xfffffc01
 8007930:	3ff80000 	.word	0x3ff80000
 8007934:	636f4361 	.word	0x636f4361
 8007938:	3fd287a7 	.word	0x3fd287a7
 800793c:	8b60c8b3 	.word	0x8b60c8b3
 8007940:	3fc68a28 	.word	0x3fc68a28
 8007944:	509f79fb 	.word	0x509f79fb
 8007948:	3fd34413 	.word	0x3fd34413
 800794c:	0800a188 	.word	0x0800a188
 8007950:	00000432 	.word	0x00000432
 8007954:	00000412 	.word	0x00000412
 8007958:	fe100000 	.word	0xfe100000
 800795c:	0800a160 	.word	0x0800a160
 8007960:	2302      	movs	r3, #2
 8007962:	930e      	str	r3, [sp, #56]	; 0x38
 8007964:	2f00      	cmp	r7, #0
 8007966:	d016      	beq.n	8007996 <_dtoa_r+0x3aa>
 8007968:	9812      	ldr	r0, [sp, #72]	; 0x48
 800796a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800796c:	427c      	negs	r4, r7
 800796e:	330d      	adds	r3, #13
 8007970:	4023      	ands	r3, r4
 8007972:	4ace      	ldr	r2, [pc, #824]	; (8007cac <_dtoa_r+0x6c0>)
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	18d3      	adds	r3, r2, r3
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f7f9 feae 	bl	80016dc <__aeabi_dmul>
 8007980:	2300      	movs	r3, #0
 8007982:	2601      	movs	r6, #1
 8007984:	001d      	movs	r5, r3
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	9107      	str	r1, [sp, #28]
 800798a:	1124      	asrs	r4, r4, #4
 800798c:	2c00      	cmp	r4, #0
 800798e:	d000      	beq.n	8007992 <_dtoa_r+0x3a6>
 8007990:	e08c      	b.n	8007aac <_dtoa_r+0x4c0>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1b9      	bne.n	800790a <_dtoa_r+0x31e>
 8007996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007998:	2b00      	cmp	r3, #0
 800799a:	d100      	bne.n	800799e <_dtoa_r+0x3b2>
 800799c:	e096      	b.n	8007acc <_dtoa_r+0x4e0>
 800799e:	9c06      	ldr	r4, [sp, #24]
 80079a0:	9d07      	ldr	r5, [sp, #28]
 80079a2:	2200      	movs	r2, #0
 80079a4:	4bc2      	ldr	r3, [pc, #776]	; (8007cb0 <_dtoa_r+0x6c4>)
 80079a6:	0020      	movs	r0, r4
 80079a8:	0029      	movs	r1, r5
 80079aa:	f7f8 fd49 	bl	8000440 <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d100      	bne.n	80079b4 <_dtoa_r+0x3c8>
 80079b2:	e08b      	b.n	8007acc <_dtoa_r+0x4e0>
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d100      	bne.n	80079bc <_dtoa_r+0x3d0>
 80079ba:	e087      	b.n	8007acc <_dtoa_r+0x4e0>
 80079bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd41      	ble.n	8007a46 <_dtoa_r+0x45a>
 80079c2:	4bbc      	ldr	r3, [pc, #752]	; (8007cb4 <_dtoa_r+0x6c8>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	0020      	movs	r0, r4
 80079c8:	0029      	movs	r1, r5
 80079ca:	f7f9 fe87 	bl	80016dc <__aeabi_dmul>
 80079ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d0:	9006      	str	r0, [sp, #24]
 80079d2:	9107      	str	r1, [sp, #28]
 80079d4:	3301      	adds	r3, #1
 80079d6:	930e      	str	r3, [sp, #56]	; 0x38
 80079d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079da:	1e7e      	subs	r6, r7, #1
 80079dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079de:	9310      	str	r3, [sp, #64]	; 0x40
 80079e0:	f7fa fc88 	bl	80022f4 <__aeabi_i2d>
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	f7f9 fe78 	bl	80016dc <__aeabi_dmul>
 80079ec:	2200      	movs	r2, #0
 80079ee:	4bb2      	ldr	r3, [pc, #712]	; (8007cb8 <_dtoa_r+0x6cc>)
 80079f0:	f7f8 ff4e 	bl	8000890 <__aeabi_dadd>
 80079f4:	4ab1      	ldr	r2, [pc, #708]	; (8007cbc <_dtoa_r+0x6d0>)
 80079f6:	900e      	str	r0, [sp, #56]	; 0x38
 80079f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80079fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80079fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079fe:	4694      	mov	ip, r2
 8007a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a02:	4463      	add	r3, ip
 8007a04:	9315      	str	r3, [sp, #84]	; 0x54
 8007a06:	001d      	movs	r5, r3
 8007a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d161      	bne.n	8007ad2 <_dtoa_r+0x4e6>
 8007a0e:	9806      	ldr	r0, [sp, #24]
 8007a10:	9907      	ldr	r1, [sp, #28]
 8007a12:	2200      	movs	r2, #0
 8007a14:	4baa      	ldr	r3, [pc, #680]	; (8007cc0 <_dtoa_r+0x6d4>)
 8007a16:	f7fa f8d3 	bl	8001bc0 <__aeabi_dsub>
 8007a1a:	0022      	movs	r2, r4
 8007a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a1e:	9006      	str	r0, [sp, #24]
 8007a20:	9107      	str	r1, [sp, #28]
 8007a22:	f7f8 fd21 	bl	8000468 <__aeabi_dcmpgt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d000      	beq.n	8007a2c <_dtoa_r+0x440>
 8007a2a:	e2a8      	b.n	8007f7e <_dtoa_r+0x992>
 8007a2c:	48a5      	ldr	r0, [pc, #660]	; (8007cc4 <_dtoa_r+0x6d8>)
 8007a2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a30:	4684      	mov	ip, r0
 8007a32:	4461      	add	r1, ip
 8007a34:	000b      	movs	r3, r1
 8007a36:	9806      	ldr	r0, [sp, #24]
 8007a38:	9907      	ldr	r1, [sp, #28]
 8007a3a:	0022      	movs	r2, r4
 8007a3c:	f7f8 fd00 	bl	8000440 <__aeabi_dcmplt>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d000      	beq.n	8007a46 <_dtoa_r+0x45a>
 8007a44:	e295      	b.n	8007f72 <_dtoa_r+0x986>
 8007a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007a4a:	9306      	str	r3, [sp, #24]
 8007a4c:	9407      	str	r4, [sp, #28]
 8007a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da00      	bge.n	8007a56 <_dtoa_r+0x46a>
 8007a54:	e15c      	b.n	8007d10 <_dtoa_r+0x724>
 8007a56:	2f0e      	cmp	r7, #14
 8007a58:	dd00      	ble.n	8007a5c <_dtoa_r+0x470>
 8007a5a:	e159      	b.n	8007d10 <_dtoa_r+0x724>
 8007a5c:	4b93      	ldr	r3, [pc, #588]	; (8007cac <_dtoa_r+0x6c0>)
 8007a5e:	00fa      	lsls	r2, r7, #3
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	685c      	ldr	r4, [r3, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	9405      	str	r4, [sp, #20]
 8007a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db00      	blt.n	8007a72 <_dtoa_r+0x486>
 8007a70:	e0d8      	b.n	8007c24 <_dtoa_r+0x638>
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd00      	ble.n	8007a7a <_dtoa_r+0x48e>
 8007a78:	e0d4      	b.n	8007c24 <_dtoa_r+0x638>
 8007a7a:	d000      	beq.n	8007a7e <_dtoa_r+0x492>
 8007a7c:	e27d      	b.n	8007f7a <_dtoa_r+0x98e>
 8007a7e:	9804      	ldr	r0, [sp, #16]
 8007a80:	9905      	ldr	r1, [sp, #20]
 8007a82:	2200      	movs	r2, #0
 8007a84:	4b8e      	ldr	r3, [pc, #568]	; (8007cc0 <_dtoa_r+0x6d4>)
 8007a86:	f7f9 fe29 	bl	80016dc <__aeabi_dmul>
 8007a8a:	9a06      	ldr	r2, [sp, #24]
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	f7f8 fcf5 	bl	800047c <__aeabi_dcmpge>
 8007a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	001e      	movs	r6, r3
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d000      	beq.n	8007a9e <_dtoa_r+0x4b2>
 8007a9c:	e24f      	b.n	8007f3e <_dtoa_r+0x952>
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	9a08      	ldr	r2, [sp, #32]
 8007aa2:	1c5d      	adds	r5, r3, #1
 8007aa4:	2331      	movs	r3, #49	; 0x31
 8007aa6:	3701      	adds	r7, #1
 8007aa8:	7013      	strb	r3, [r2, #0]
 8007aaa:	e24b      	b.n	8007f44 <_dtoa_r+0x958>
 8007aac:	4234      	tst	r4, r6
 8007aae:	d00a      	beq.n	8007ac6 <_dtoa_r+0x4da>
 8007ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab2:	4a85      	ldr	r2, [pc, #532]	; (8007cc8 <_dtoa_r+0x6dc>)
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab8:	00eb      	lsls	r3, r5, #3
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f7f9 fe0c 	bl	80016dc <__aeabi_dmul>
 8007ac4:	0033      	movs	r3, r6
 8007ac6:	1064      	asrs	r4, r4, #1
 8007ac8:	3501      	adds	r5, #1
 8007aca:	e75f      	b.n	800798c <_dtoa_r+0x3a0>
 8007acc:	003e      	movs	r6, r7
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	e784      	b.n	80079dc <_dtoa_r+0x3f0>
 8007ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ad4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	4b74      	ldr	r3, [pc, #464]	; (8007cac <_dtoa_r+0x6c0>)
 8007ada:	00d2      	lsls	r2, r2, #3
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d049      	beq.n	8007b7a <_dtoa_r+0x58e>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	4978      	ldr	r1, [pc, #480]	; (8007ccc <_dtoa_r+0x6e0>)
 8007aea:	f7f9 f9ed 	bl	8000ec8 <__aeabi_ddiv>
 8007aee:	002b      	movs	r3, r5
 8007af0:	0022      	movs	r2, r4
 8007af2:	f7fa f865 	bl	8001bc0 <__aeabi_dsub>
 8007af6:	9b08      	ldr	r3, [sp, #32]
 8007af8:	900e      	str	r0, [sp, #56]	; 0x38
 8007afa:	910f      	str	r1, [sp, #60]	; 0x3c
 8007afc:	9315      	str	r3, [sp, #84]	; 0x54
 8007afe:	9806      	ldr	r0, [sp, #24]
 8007b00:	9907      	ldr	r1, [sp, #28]
 8007b02:	f7fa fbc1 	bl	8002288 <__aeabi_d2iz>
 8007b06:	0004      	movs	r4, r0
 8007b08:	f7fa fbf4 	bl	80022f4 <__aeabi_i2d>
 8007b0c:	0002      	movs	r2, r0
 8007b0e:	000b      	movs	r3, r1
 8007b10:	9806      	ldr	r0, [sp, #24]
 8007b12:	9907      	ldr	r1, [sp, #28]
 8007b14:	f7fa f854 	bl	8001bc0 <__aeabi_dsub>
 8007b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b1a:	3430      	adds	r4, #48	; 0x30
 8007b1c:	1c5d      	adds	r5, r3, #1
 8007b1e:	701c      	strb	r4, [r3, #0]
 8007b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b24:	9006      	str	r0, [sp, #24]
 8007b26:	9107      	str	r1, [sp, #28]
 8007b28:	f7f8 fc8a 	bl	8000440 <__aeabi_dcmplt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d16c      	bne.n	8007c0a <_dtoa_r+0x61e>
 8007b30:	9a06      	ldr	r2, [sp, #24]
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	2000      	movs	r0, #0
 8007b36:	495e      	ldr	r1, [pc, #376]	; (8007cb0 <_dtoa_r+0x6c4>)
 8007b38:	f7fa f842 	bl	8001bc0 <__aeabi_dsub>
 8007b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b40:	f7f8 fc7e 	bl	8000440 <__aeabi_dcmplt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d000      	beq.n	8007b4a <_dtoa_r+0x55e>
 8007b48:	e0c3      	b.n	8007cd2 <_dtoa_r+0x6e6>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b4e:	1aeb      	subs	r3, r5, r3
 8007b50:	429a      	cmp	r2, r3
 8007b52:	dc00      	bgt.n	8007b56 <_dtoa_r+0x56a>
 8007b54:	e777      	b.n	8007a46 <_dtoa_r+0x45a>
 8007b56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4b55      	ldr	r3, [pc, #340]	; (8007cb4 <_dtoa_r+0x6c8>)
 8007b5e:	f7f9 fdbd 	bl	80016dc <__aeabi_dmul>
 8007b62:	2200      	movs	r2, #0
 8007b64:	900e      	str	r0, [sp, #56]	; 0x38
 8007b66:	910f      	str	r1, [sp, #60]	; 0x3c
 8007b68:	9806      	ldr	r0, [sp, #24]
 8007b6a:	9907      	ldr	r1, [sp, #28]
 8007b6c:	4b51      	ldr	r3, [pc, #324]	; (8007cb4 <_dtoa_r+0x6c8>)
 8007b6e:	f7f9 fdb5 	bl	80016dc <__aeabi_dmul>
 8007b72:	9515      	str	r5, [sp, #84]	; 0x54
 8007b74:	9006      	str	r0, [sp, #24]
 8007b76:	9107      	str	r1, [sp, #28]
 8007b78:	e7c1      	b.n	8007afe <_dtoa_r+0x512>
 8007b7a:	0020      	movs	r0, r4
 8007b7c:	0029      	movs	r1, r5
 8007b7e:	f7f9 fdad 	bl	80016dc <__aeabi_dmul>
 8007b82:	9c08      	ldr	r4, [sp, #32]
 8007b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b86:	0023      	movs	r3, r4
 8007b88:	4694      	mov	ip, r2
 8007b8a:	900e      	str	r0, [sp, #56]	; 0x38
 8007b8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8007b8e:	4463      	add	r3, ip
 8007b90:	9315      	str	r3, [sp, #84]	; 0x54
 8007b92:	9806      	ldr	r0, [sp, #24]
 8007b94:	9907      	ldr	r1, [sp, #28]
 8007b96:	f7fa fb77 	bl	8002288 <__aeabi_d2iz>
 8007b9a:	0005      	movs	r5, r0
 8007b9c:	f7fa fbaa 	bl	80022f4 <__aeabi_i2d>
 8007ba0:	000b      	movs	r3, r1
 8007ba2:	0002      	movs	r2, r0
 8007ba4:	9806      	ldr	r0, [sp, #24]
 8007ba6:	9907      	ldr	r1, [sp, #28]
 8007ba8:	f7fa f80a 	bl	8001bc0 <__aeabi_dsub>
 8007bac:	3530      	adds	r5, #48	; 0x30
 8007bae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bb0:	7025      	strb	r5, [r4, #0]
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	9006      	str	r0, [sp, #24]
 8007bb6:	9107      	str	r1, [sp, #28]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d12a      	bne.n	8007c12 <_dtoa_r+0x626>
 8007bbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007bbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bc0:	9a08      	ldr	r2, [sp, #32]
 8007bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bc4:	4694      	mov	ip, r2
 8007bc6:	4463      	add	r3, ip
 8007bc8:	2200      	movs	r2, #0
 8007bca:	001d      	movs	r5, r3
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <_dtoa_r+0x6e0>)
 8007bce:	f7f8 fe5f 	bl	8000890 <__aeabi_dadd>
 8007bd2:	0002      	movs	r2, r0
 8007bd4:	000b      	movs	r3, r1
 8007bd6:	9806      	ldr	r0, [sp, #24]
 8007bd8:	9907      	ldr	r1, [sp, #28]
 8007bda:	f7f8 fc45 	bl	8000468 <__aeabi_dcmpgt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d000      	beq.n	8007be4 <_dtoa_r+0x5f8>
 8007be2:	e076      	b.n	8007cd2 <_dtoa_r+0x6e6>
 8007be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be8:	2000      	movs	r0, #0
 8007bea:	4938      	ldr	r1, [pc, #224]	; (8007ccc <_dtoa_r+0x6e0>)
 8007bec:	f7f9 ffe8 	bl	8001bc0 <__aeabi_dsub>
 8007bf0:	0002      	movs	r2, r0
 8007bf2:	000b      	movs	r3, r1
 8007bf4:	9806      	ldr	r0, [sp, #24]
 8007bf6:	9907      	ldr	r1, [sp, #28]
 8007bf8:	f7f8 fc22 	bl	8000440 <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d100      	bne.n	8007c02 <_dtoa_r+0x616>
 8007c00:	e721      	b.n	8007a46 <_dtoa_r+0x45a>
 8007c02:	1e6b      	subs	r3, r5, #1
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	2a30      	cmp	r2, #48	; 0x30
 8007c08:	d001      	beq.n	8007c0e <_dtoa_r+0x622>
 8007c0a:	0037      	movs	r7, r6
 8007c0c:	e03f      	b.n	8007c8e <_dtoa_r+0x6a2>
 8007c0e:	001d      	movs	r5, r3
 8007c10:	e7f7      	b.n	8007c02 <_dtoa_r+0x616>
 8007c12:	9806      	ldr	r0, [sp, #24]
 8007c14:	9907      	ldr	r1, [sp, #28]
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <_dtoa_r+0x6c8>)
 8007c1a:	f7f9 fd5f 	bl	80016dc <__aeabi_dmul>
 8007c1e:	9006      	str	r0, [sp, #24]
 8007c20:	9107      	str	r1, [sp, #28]
 8007c22:	e7b6      	b.n	8007b92 <_dtoa_r+0x5a6>
 8007c24:	9e08      	ldr	r6, [sp, #32]
 8007c26:	9a04      	ldr	r2, [sp, #16]
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	9806      	ldr	r0, [sp, #24]
 8007c2c:	9907      	ldr	r1, [sp, #28]
 8007c2e:	f7f9 f94b 	bl	8000ec8 <__aeabi_ddiv>
 8007c32:	f7fa fb29 	bl	8002288 <__aeabi_d2iz>
 8007c36:	0004      	movs	r4, r0
 8007c38:	f7fa fb5c 	bl	80022f4 <__aeabi_i2d>
 8007c3c:	9a04      	ldr	r2, [sp, #16]
 8007c3e:	9b05      	ldr	r3, [sp, #20]
 8007c40:	f7f9 fd4c 	bl	80016dc <__aeabi_dmul>
 8007c44:	0002      	movs	r2, r0
 8007c46:	000b      	movs	r3, r1
 8007c48:	9806      	ldr	r0, [sp, #24]
 8007c4a:	9907      	ldr	r1, [sp, #28]
 8007c4c:	f7f9 ffb8 	bl	8001bc0 <__aeabi_dsub>
 8007c50:	0023      	movs	r3, r4
 8007c52:	3330      	adds	r3, #48	; 0x30
 8007c54:	7033      	strb	r3, [r6, #0]
 8007c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	1c75      	adds	r5, r6, #1
 8007c5c:	1aeb      	subs	r3, r5, r3
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d148      	bne.n	8007cf4 <_dtoa_r+0x708>
 8007c62:	0002      	movs	r2, r0
 8007c64:	000b      	movs	r3, r1
 8007c66:	f7f8 fe13 	bl	8000890 <__aeabi_dadd>
 8007c6a:	9a04      	ldr	r2, [sp, #16]
 8007c6c:	9b05      	ldr	r3, [sp, #20]
 8007c6e:	9006      	str	r0, [sp, #24]
 8007c70:	9107      	str	r1, [sp, #28]
 8007c72:	f7f8 fbf9 	bl	8000468 <__aeabi_dcmpgt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d12a      	bne.n	8007cd0 <_dtoa_r+0x6e4>
 8007c7a:	9a04      	ldr	r2, [sp, #16]
 8007c7c:	9b05      	ldr	r3, [sp, #20]
 8007c7e:	9806      	ldr	r0, [sp, #24]
 8007c80:	9907      	ldr	r1, [sp, #28]
 8007c82:	f7f8 fbd7 	bl	8000434 <__aeabi_dcmpeq>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d001      	beq.n	8007c8e <_dtoa_r+0x6a2>
 8007c8a:	07e3      	lsls	r3, r4, #31
 8007c8c:	d420      	bmi.n	8007cd0 <_dtoa_r+0x6e4>
 8007c8e:	9903      	ldr	r1, [sp, #12]
 8007c90:	9802      	ldr	r0, [sp, #8]
 8007c92:	f000 ff0b 	bl	8008aac <_Bfree>
 8007c96:	2300      	movs	r3, #0
 8007c98:	702b      	strb	r3, [r5, #0]
 8007c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c9c:	3701      	adds	r7, #1
 8007c9e:	601f      	str	r7, [r3, #0]
 8007ca0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d100      	bne.n	8007ca8 <_dtoa_r+0x6bc>
 8007ca6:	e4e6      	b.n	8007676 <_dtoa_r+0x8a>
 8007ca8:	601d      	str	r5, [r3, #0]
 8007caa:	e4e4      	b.n	8007676 <_dtoa_r+0x8a>
 8007cac:	0800a188 	.word	0x0800a188
 8007cb0:	3ff00000 	.word	0x3ff00000
 8007cb4:	40240000 	.word	0x40240000
 8007cb8:	401c0000 	.word	0x401c0000
 8007cbc:	fcc00000 	.word	0xfcc00000
 8007cc0:	40140000 	.word	0x40140000
 8007cc4:	7cc00000 	.word	0x7cc00000
 8007cc8:	0800a160 	.word	0x0800a160
 8007ccc:	3fe00000 	.word	0x3fe00000
 8007cd0:	003e      	movs	r6, r7
 8007cd2:	1e6b      	subs	r3, r5, #1
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	2a39      	cmp	r2, #57	; 0x39
 8007cd8:	d106      	bne.n	8007ce8 <_dtoa_r+0x6fc>
 8007cda:	9a08      	ldr	r2, [sp, #32]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d107      	bne.n	8007cf0 <_dtoa_r+0x704>
 8007ce0:	2330      	movs	r3, #48	; 0x30
 8007ce2:	7013      	strb	r3, [r2, #0]
 8007ce4:	0013      	movs	r3, r2
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	3201      	adds	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e78c      	b.n	8007c0a <_dtoa_r+0x61e>
 8007cf0:	001d      	movs	r5, r3
 8007cf2:	e7ee      	b.n	8007cd2 <_dtoa_r+0x6e6>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4ba4      	ldr	r3, [pc, #656]	; (8007f88 <_dtoa_r+0x99c>)
 8007cf8:	f7f9 fcf0 	bl	80016dc <__aeabi_dmul>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9006      	str	r0, [sp, #24]
 8007d02:	9107      	str	r1, [sp, #28]
 8007d04:	002e      	movs	r6, r5
 8007d06:	f7f8 fb95 	bl	8000434 <__aeabi_dcmpeq>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d08b      	beq.n	8007c26 <_dtoa_r+0x63a>
 8007d0e:	e7be      	b.n	8007c8e <_dtoa_r+0x6a2>
 8007d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d100      	bne.n	8007d18 <_dtoa_r+0x72c>
 8007d16:	e0da      	b.n	8007ece <_dtoa_r+0x8e2>
 8007d18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d1a:	2a01      	cmp	r2, #1
 8007d1c:	dd00      	ble.n	8007d20 <_dtoa_r+0x734>
 8007d1e:	e0bd      	b.n	8007e9c <_dtoa_r+0x8b0>
 8007d20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d100      	bne.n	8007d28 <_dtoa_r+0x73c>
 8007d26:	e0b5      	b.n	8007e94 <_dtoa_r+0x8a8>
 8007d28:	4a98      	ldr	r2, [pc, #608]	; (8007f8c <_dtoa_r+0x9a0>)
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	9d04      	ldr	r5, [sp, #16]
 8007d2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d32:	2101      	movs	r1, #1
 8007d34:	18d2      	adds	r2, r2, r3
 8007d36:	920a      	str	r2, [sp, #40]	; 0x28
 8007d38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d3a:	9802      	ldr	r0, [sp, #8]
 8007d3c:	18d3      	adds	r3, r2, r3
 8007d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d40:	f000 ff92 	bl	8008c68 <__i2b>
 8007d44:	0006      	movs	r6, r0
 8007d46:	2c00      	cmp	r4, #0
 8007d48:	dd0e      	ble.n	8007d68 <_dtoa_r+0x77c>
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd0b      	ble.n	8007d68 <_dtoa_r+0x77c>
 8007d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d52:	0023      	movs	r3, r4
 8007d54:	4294      	cmp	r4, r2
 8007d56:	dd00      	ble.n	8007d5a <_dtoa_r+0x76e>
 8007d58:	0013      	movs	r3, r2
 8007d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d5c:	1ae4      	subs	r4, r4, r3
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	920a      	str	r2, [sp, #40]	; 0x28
 8007d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01f      	beq.n	8007dae <_dtoa_r+0x7c2>
 8007d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d100      	bne.n	8007d76 <_dtoa_r+0x78a>
 8007d74:	e0af      	b.n	8007ed6 <_dtoa_r+0x8ea>
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	d011      	beq.n	8007d9e <_dtoa_r+0x7b2>
 8007d7a:	0031      	movs	r1, r6
 8007d7c:	002a      	movs	r2, r5
 8007d7e:	9802      	ldr	r0, [sp, #8]
 8007d80:	f001 f80a 	bl	8008d98 <__pow5mult>
 8007d84:	9a03      	ldr	r2, [sp, #12]
 8007d86:	0001      	movs	r1, r0
 8007d88:	0006      	movs	r6, r0
 8007d8a:	9802      	ldr	r0, [sp, #8]
 8007d8c:	f000 ff75 	bl	8008c7a <__multiply>
 8007d90:	9903      	ldr	r1, [sp, #12]
 8007d92:	9010      	str	r0, [sp, #64]	; 0x40
 8007d94:	9802      	ldr	r0, [sp, #8]
 8007d96:	f000 fe89 	bl	8008aac <_Bfree>
 8007d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	1b5a      	subs	r2, r3, r5
 8007da2:	d004      	beq.n	8007dae <_dtoa_r+0x7c2>
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	9802      	ldr	r0, [sp, #8]
 8007da8:	f000 fff6 	bl	8008d98 <__pow5mult>
 8007dac:	9003      	str	r0, [sp, #12]
 8007dae:	2101      	movs	r1, #1
 8007db0:	9802      	ldr	r0, [sp, #8]
 8007db2:	f000 ff59 	bl	8008c68 <__i2b>
 8007db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007db8:	9004      	str	r0, [sp, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d100      	bne.n	8007dc0 <_dtoa_r+0x7d4>
 8007dbe:	e1e3      	b.n	8008188 <_dtoa_r+0xb9c>
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	0001      	movs	r1, r0
 8007dc4:	9802      	ldr	r0, [sp, #8]
 8007dc6:	f000 ffe7 	bl	8008d98 <__pow5mult>
 8007dca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dcc:	9004      	str	r0, [sp, #16]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	dd00      	ble.n	8007dd4 <_dtoa_r+0x7e8>
 8007dd2:	e082      	b.n	8007eda <_dtoa_r+0x8ee>
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	d10e      	bne.n	8007dfa <_dtoa_r+0x80e>
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	031b      	lsls	r3, r3, #12
 8007de0:	42ab      	cmp	r3, r5
 8007de2:	d10a      	bne.n	8007dfa <_dtoa_r+0x80e>
 8007de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007de6:	9a07      	ldr	r2, [sp, #28]
 8007de8:	4213      	tst	r3, r2
 8007dea:	d006      	beq.n	8007dfa <_dtoa_r+0x80e>
 8007dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dee:	3501      	adds	r5, #1
 8007df0:	3301      	adds	r3, #1
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df6:	3301      	adds	r3, #1
 8007df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d16c      	bne.n	8007edc <_dtoa_r+0x8f0>
 8007e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e04:	1818      	adds	r0, r3, r0
 8007e06:	231f      	movs	r3, #31
 8007e08:	4018      	ands	r0, r3
 8007e0a:	d07e      	beq.n	8007f0a <_dtoa_r+0x91e>
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	1a1b      	subs	r3, r3, r0
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	dd70      	ble.n	8007ef6 <_dtoa_r+0x90a>
 8007e14:	231c      	movs	r3, #28
 8007e16:	1a18      	subs	r0, r3, r0
 8007e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1a:	1824      	adds	r4, r4, r0
 8007e1c:	181b      	adds	r3, r3, r0
 8007e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e22:	181b      	adds	r3, r3, r0
 8007e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dd05      	ble.n	8007e38 <_dtoa_r+0x84c>
 8007e2c:	001a      	movs	r2, r3
 8007e2e:	9903      	ldr	r1, [sp, #12]
 8007e30:	9802      	ldr	r0, [sp, #8]
 8007e32:	f001 f803 	bl	8008e3c <__lshift>
 8007e36:	9003      	str	r0, [sp, #12]
 8007e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd05      	ble.n	8007e4a <_dtoa_r+0x85e>
 8007e3e:	001a      	movs	r2, r3
 8007e40:	9904      	ldr	r1, [sp, #16]
 8007e42:	9802      	ldr	r0, [sp, #8]
 8007e44:	f000 fffa 	bl	8008e3c <__lshift>
 8007e48:	9004      	str	r0, [sp, #16]
 8007e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d05e      	beq.n	8007f0e <_dtoa_r+0x922>
 8007e50:	9904      	ldr	r1, [sp, #16]
 8007e52:	9803      	ldr	r0, [sp, #12]
 8007e54:	f001 f844 	bl	8008ee0 <__mcmp>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	da58      	bge.n	8007f0e <_dtoa_r+0x922>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	220a      	movs	r2, #10
 8007e60:	9903      	ldr	r1, [sp, #12]
 8007e62:	9802      	ldr	r0, [sp, #8]
 8007e64:	f000 fe3b 	bl	8008ade <__multadd>
 8007e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e6a:	3f01      	subs	r7, #1
 8007e6c:	9003      	str	r0, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d100      	bne.n	8007e74 <_dtoa_r+0x888>
 8007e72:	e190      	b.n	8008196 <_dtoa_r+0xbaa>
 8007e74:	2300      	movs	r3, #0
 8007e76:	0031      	movs	r1, r6
 8007e78:	220a      	movs	r2, #10
 8007e7a:	9802      	ldr	r0, [sp, #8]
 8007e7c:	f000 fe2f 	bl	8008ade <__multadd>
 8007e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e82:	0006      	movs	r6, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd00      	ble.n	8007e8a <_dtoa_r+0x89e>
 8007e88:	e088      	b.n	8007f9c <_dtoa_r+0x9b0>
 8007e8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	dc00      	bgt.n	8007e92 <_dtoa_r+0x8a6>
 8007e90:	e084      	b.n	8007f9c <_dtoa_r+0x9b0>
 8007e92:	e044      	b.n	8007f1e <_dtoa_r+0x932>
 8007e94:	2336      	movs	r3, #54	; 0x36
 8007e96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	e747      	b.n	8007d2c <_dtoa_r+0x740>
 8007e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9e:	1e5d      	subs	r5, r3, #1
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	42ab      	cmp	r3, r5
 8007ea4:	db08      	blt.n	8007eb8 <_dtoa_r+0x8cc>
 8007ea6:	1b5d      	subs	r5, r3, r5
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da0c      	bge.n	8007ec8 <_dtoa_r+0x8dc>
 8007eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb2:	1a9c      	subs	r4, r3, r2
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e73b      	b.n	8007d30 <_dtoa_r+0x744>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	9504      	str	r5, [sp, #16]
 8007ebc:	1aea      	subs	r2, r5, r3
 8007ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	9311      	str	r3, [sp, #68]	; 0x44
 8007ec6:	e7ef      	b.n	8007ea8 <_dtoa_r+0x8bc>
 8007ec8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ecc:	e730      	b.n	8007d30 <_dtoa_r+0x744>
 8007ece:	9d04      	ldr	r5, [sp, #16]
 8007ed0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ed2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007ed4:	e737      	b.n	8007d46 <_dtoa_r+0x75a>
 8007ed6:	9a04      	ldr	r2, [sp, #16]
 8007ed8:	e764      	b.n	8007da4 <_dtoa_r+0x7b8>
 8007eda:	2500      	movs	r5, #0
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	9a04      	ldr	r2, [sp, #16]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	18d3      	adds	r3, r2, r3
 8007eea:	6858      	ldr	r0, [r3, #4]
 8007eec:	f000 fe73 	bl	8008bd6 <__hi0bits>
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	1a18      	subs	r0, r3, r0
 8007ef4:	e785      	b.n	8007e02 <_dtoa_r+0x816>
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d095      	beq.n	8007e26 <_dtoa_r+0x83a>
 8007efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007efc:	331c      	adds	r3, #28
 8007efe:	18d2      	adds	r2, r2, r3
 8007f00:	920a      	str	r2, [sp, #40]	; 0x28
 8007f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f04:	18e4      	adds	r4, r4, r3
 8007f06:	18d3      	adds	r3, r2, r3
 8007f08:	e78c      	b.n	8007e24 <_dtoa_r+0x838>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	e7f5      	b.n	8007efa <_dtoa_r+0x90e>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc3d      	bgt.n	8007f90 <_dtoa_r+0x9a4>
 8007f14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dd3a      	ble.n	8007f90 <_dtoa_r+0x9a4>
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10c      	bne.n	8007f3e <_dtoa_r+0x952>
 8007f24:	9904      	ldr	r1, [sp, #16]
 8007f26:	2205      	movs	r2, #5
 8007f28:	9802      	ldr	r0, [sp, #8]
 8007f2a:	f000 fdd8 	bl	8008ade <__multadd>
 8007f2e:	9004      	str	r0, [sp, #16]
 8007f30:	0001      	movs	r1, r0
 8007f32:	9803      	ldr	r0, [sp, #12]
 8007f34:	f000 ffd4 	bl	8008ee0 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	dd00      	ble.n	8007f3e <_dtoa_r+0x952>
 8007f3c:	e5af      	b.n	8007a9e <_dtoa_r+0x4b2>
 8007f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f40:	9d08      	ldr	r5, [sp, #32]
 8007f42:	43df      	mvns	r7, r3
 8007f44:	2300      	movs	r3, #0
 8007f46:	9309      	str	r3, [sp, #36]	; 0x24
 8007f48:	9904      	ldr	r1, [sp, #16]
 8007f4a:	9802      	ldr	r0, [sp, #8]
 8007f4c:	f000 fdae 	bl	8008aac <_Bfree>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d100      	bne.n	8007f56 <_dtoa_r+0x96a>
 8007f54:	e69b      	b.n	8007c8e <_dtoa_r+0x6a2>
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <_dtoa_r+0x97c>
 8007f5c:	42b3      	cmp	r3, r6
 8007f5e:	d003      	beq.n	8007f68 <_dtoa_r+0x97c>
 8007f60:	0019      	movs	r1, r3
 8007f62:	9802      	ldr	r0, [sp, #8]
 8007f64:	f000 fda2 	bl	8008aac <_Bfree>
 8007f68:	0031      	movs	r1, r6
 8007f6a:	9802      	ldr	r0, [sp, #8]
 8007f6c:	f000 fd9e 	bl	8008aac <_Bfree>
 8007f70:	e68d      	b.n	8007c8e <_dtoa_r+0x6a2>
 8007f72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	001e      	movs	r6, r3
 8007f78:	e7e1      	b.n	8007f3e <_dtoa_r+0x952>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e7fa      	b.n	8007f74 <_dtoa_r+0x988>
 8007f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f80:	0037      	movs	r7, r6
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	001e      	movs	r6, r3
 8007f86:	e58a      	b.n	8007a9e <_dtoa_r+0x4b2>
 8007f88:	40240000 	.word	0x40240000
 8007f8c:	00000433 	.word	0x00000433
 8007f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d100      	bne.n	8007f98 <_dtoa_r+0x9ac>
 8007f96:	e0b2      	b.n	80080fe <_dtoa_r+0xb12>
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f9c:	2c00      	cmp	r4, #0
 8007f9e:	dd05      	ble.n	8007fac <_dtoa_r+0x9c0>
 8007fa0:	0031      	movs	r1, r6
 8007fa2:	0022      	movs	r2, r4
 8007fa4:	9802      	ldr	r0, [sp, #8]
 8007fa6:	f000 ff49 	bl	8008e3c <__lshift>
 8007faa:	0006      	movs	r6, r0
 8007fac:	0030      	movs	r0, r6
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	d011      	beq.n	8007fd6 <_dtoa_r+0x9ea>
 8007fb2:	6871      	ldr	r1, [r6, #4]
 8007fb4:	9802      	ldr	r0, [sp, #8]
 8007fb6:	f000 fd41 	bl	8008a3c <_Balloc>
 8007fba:	0031      	movs	r1, r6
 8007fbc:	0004      	movs	r4, r0
 8007fbe:	6933      	ldr	r3, [r6, #16]
 8007fc0:	310c      	adds	r1, #12
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	0092      	lsls	r2, r2, #2
 8007fc6:	300c      	adds	r0, #12
 8007fc8:	f000 fd2f 	bl	8008a2a <memcpy>
 8007fcc:	2201      	movs	r2, #1
 8007fce:	0021      	movs	r1, r4
 8007fd0:	9802      	ldr	r0, [sp, #8]
 8007fd2:	f000 ff33 	bl	8008e3c <__lshift>
 8007fd6:	9609      	str	r6, [sp, #36]	; 0x24
 8007fd8:	0006      	movs	r6, r0
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007fde:	9904      	ldr	r1, [sp, #16]
 8007fe0:	9803      	ldr	r0, [sp, #12]
 8007fe2:	f7ff fa7d 	bl	80074e0 <quorem>
 8007fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fe8:	900d      	str	r0, [sp, #52]	; 0x34
 8007fea:	0004      	movs	r4, r0
 8007fec:	9803      	ldr	r0, [sp, #12]
 8007fee:	f000 ff77 	bl	8008ee0 <__mcmp>
 8007ff2:	0032      	movs	r2, r6
 8007ff4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ff6:	9904      	ldr	r1, [sp, #16]
 8007ff8:	9802      	ldr	r0, [sp, #8]
 8007ffa:	f000 ff8b 	bl	8008f14 <__mdiff>
 8007ffe:	2301      	movs	r3, #1
 8008000:	930b      	str	r3, [sp, #44]	; 0x2c
 8008002:	68c3      	ldr	r3, [r0, #12]
 8008004:	3430      	adds	r4, #48	; 0x30
 8008006:	0005      	movs	r5, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <_dtoa_r+0xa2a>
 800800c:	0001      	movs	r1, r0
 800800e:	9803      	ldr	r0, [sp, #12]
 8008010:	f000 ff66 	bl	8008ee0 <__mcmp>
 8008014:	900b      	str	r0, [sp, #44]	; 0x2c
 8008016:	0029      	movs	r1, r5
 8008018:	9802      	ldr	r0, [sp, #8]
 800801a:	f000 fd47 	bl	8008aac <_Bfree>
 800801e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008020:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008022:	4313      	orrs	r3, r2
 8008024:	d10e      	bne.n	8008044 <_dtoa_r+0xa58>
 8008026:	9a06      	ldr	r2, [sp, #24]
 8008028:	3301      	adds	r3, #1
 800802a:	4213      	tst	r3, r2
 800802c:	d10a      	bne.n	8008044 <_dtoa_r+0xa58>
 800802e:	2c39      	cmp	r4, #57	; 0x39
 8008030:	d026      	beq.n	8008080 <_dtoa_r+0xa94>
 8008032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	dd01      	ble.n	800803c <_dtoa_r+0xa50>
 8008038:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800803a:	3431      	adds	r4, #49	; 0x31
 800803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803e:	1c5d      	adds	r5, r3, #1
 8008040:	701c      	strb	r4, [r3, #0]
 8008042:	e781      	b.n	8007f48 <_dtoa_r+0x95c>
 8008044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	db07      	blt.n	800805a <_dtoa_r+0xa6e>
 800804a:	001d      	movs	r5, r3
 800804c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800804e:	431d      	orrs	r5, r3
 8008050:	d122      	bne.n	8008098 <_dtoa_r+0xaac>
 8008052:	2301      	movs	r3, #1
 8008054:	9a06      	ldr	r2, [sp, #24]
 8008056:	4213      	tst	r3, r2
 8008058:	d11e      	bne.n	8008098 <_dtoa_r+0xaac>
 800805a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	dded      	ble.n	800803c <_dtoa_r+0xa50>
 8008060:	9903      	ldr	r1, [sp, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	9802      	ldr	r0, [sp, #8]
 8008066:	f000 fee9 	bl	8008e3c <__lshift>
 800806a:	9904      	ldr	r1, [sp, #16]
 800806c:	9003      	str	r0, [sp, #12]
 800806e:	f000 ff37 	bl	8008ee0 <__mcmp>
 8008072:	2800      	cmp	r0, #0
 8008074:	dc02      	bgt.n	800807c <_dtoa_r+0xa90>
 8008076:	d1e1      	bne.n	800803c <_dtoa_r+0xa50>
 8008078:	07e3      	lsls	r3, r4, #31
 800807a:	d5df      	bpl.n	800803c <_dtoa_r+0xa50>
 800807c:	2c39      	cmp	r4, #57	; 0x39
 800807e:	d1db      	bne.n	8008038 <_dtoa_r+0xa4c>
 8008080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008084:	1c5d      	adds	r5, r3, #1
 8008086:	2339      	movs	r3, #57	; 0x39
 8008088:	7013      	strb	r3, [r2, #0]
 800808a:	1e6b      	subs	r3, r5, #1
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	2a39      	cmp	r2, #57	; 0x39
 8008090:	d067      	beq.n	8008162 <_dtoa_r+0xb76>
 8008092:	3201      	adds	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e757      	b.n	8007f48 <_dtoa_r+0x95c>
 8008098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809a:	1c5d      	adds	r5, r3, #1
 800809c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd04      	ble.n	80080ac <_dtoa_r+0xac0>
 80080a2:	2c39      	cmp	r4, #57	; 0x39
 80080a4:	d0ec      	beq.n	8008080 <_dtoa_r+0xa94>
 80080a6:	3401      	adds	r4, #1
 80080a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080aa:	e7c9      	b.n	8008040 <_dtoa_r+0xa54>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b0:	701c      	strb	r4, [r3, #0]
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	1aeb      	subs	r3, r5, r3
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d03e      	beq.n	8008138 <_dtoa_r+0xb4c>
 80080ba:	2300      	movs	r3, #0
 80080bc:	220a      	movs	r2, #10
 80080be:	9903      	ldr	r1, [sp, #12]
 80080c0:	9802      	ldr	r0, [sp, #8]
 80080c2:	f000 fd0c 	bl	8008ade <__multadd>
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	9003      	str	r0, [sp, #12]
 80080ca:	42b3      	cmp	r3, r6
 80080cc:	d109      	bne.n	80080e2 <_dtoa_r+0xaf6>
 80080ce:	2300      	movs	r3, #0
 80080d0:	220a      	movs	r2, #10
 80080d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080d4:	9802      	ldr	r0, [sp, #8]
 80080d6:	f000 fd02 	bl	8008ade <__multadd>
 80080da:	9009      	str	r0, [sp, #36]	; 0x24
 80080dc:	0006      	movs	r6, r0
 80080de:	950a      	str	r5, [sp, #40]	; 0x28
 80080e0:	e77d      	b.n	8007fde <_dtoa_r+0x9f2>
 80080e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080e4:	2300      	movs	r3, #0
 80080e6:	220a      	movs	r2, #10
 80080e8:	9802      	ldr	r0, [sp, #8]
 80080ea:	f000 fcf8 	bl	8008ade <__multadd>
 80080ee:	2300      	movs	r3, #0
 80080f0:	9009      	str	r0, [sp, #36]	; 0x24
 80080f2:	220a      	movs	r2, #10
 80080f4:	0031      	movs	r1, r6
 80080f6:	9802      	ldr	r0, [sp, #8]
 80080f8:	f000 fcf1 	bl	8008ade <__multadd>
 80080fc:	e7ee      	b.n	80080dc <_dtoa_r+0xaf0>
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	930c      	str	r3, [sp, #48]	; 0x30
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	9306      	str	r3, [sp, #24]
 8008106:	9904      	ldr	r1, [sp, #16]
 8008108:	9803      	ldr	r0, [sp, #12]
 800810a:	f7ff f9e9 	bl	80074e0 <quorem>
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	3030      	adds	r0, #48	; 0x30
 8008112:	1c5d      	adds	r5, r3, #1
 8008114:	7018      	strb	r0, [r3, #0]
 8008116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008118:	9b08      	ldr	r3, [sp, #32]
 800811a:	0004      	movs	r4, r0
 800811c:	1aeb      	subs	r3, r5, r3
 800811e:	429a      	cmp	r2, r3
 8008120:	dd08      	ble.n	8008134 <_dtoa_r+0xb48>
 8008122:	2300      	movs	r3, #0
 8008124:	220a      	movs	r2, #10
 8008126:	9903      	ldr	r1, [sp, #12]
 8008128:	9802      	ldr	r0, [sp, #8]
 800812a:	f000 fcd8 	bl	8008ade <__multadd>
 800812e:	9506      	str	r5, [sp, #24]
 8008130:	9003      	str	r0, [sp, #12]
 8008132:	e7e8      	b.n	8008106 <_dtoa_r+0xb1a>
 8008134:	2300      	movs	r3, #0
 8008136:	9309      	str	r3, [sp, #36]	; 0x24
 8008138:	9903      	ldr	r1, [sp, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	9802      	ldr	r0, [sp, #8]
 800813e:	f000 fe7d 	bl	8008e3c <__lshift>
 8008142:	9904      	ldr	r1, [sp, #16]
 8008144:	9003      	str	r0, [sp, #12]
 8008146:	f000 fecb 	bl	8008ee0 <__mcmp>
 800814a:	2800      	cmp	r0, #0
 800814c:	dc9d      	bgt.n	800808a <_dtoa_r+0xa9e>
 800814e:	d101      	bne.n	8008154 <_dtoa_r+0xb68>
 8008150:	07e3      	lsls	r3, r4, #31
 8008152:	d49a      	bmi.n	800808a <_dtoa_r+0xa9e>
 8008154:	1e6b      	subs	r3, r5, #1
 8008156:	781a      	ldrb	r2, [r3, #0]
 8008158:	2a30      	cmp	r2, #48	; 0x30
 800815a:	d000      	beq.n	800815e <_dtoa_r+0xb72>
 800815c:	e6f4      	b.n	8007f48 <_dtoa_r+0x95c>
 800815e:	001d      	movs	r5, r3
 8008160:	e7f8      	b.n	8008154 <_dtoa_r+0xb68>
 8008162:	9a08      	ldr	r2, [sp, #32]
 8008164:	429a      	cmp	r2, r3
 8008166:	d103      	bne.n	8008170 <_dtoa_r+0xb84>
 8008168:	2331      	movs	r3, #49	; 0x31
 800816a:	3701      	adds	r7, #1
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	e6eb      	b.n	8007f48 <_dtoa_r+0x95c>
 8008170:	001d      	movs	r5, r3
 8008172:	e78a      	b.n	800808a <_dtoa_r+0xa9e>
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <_dtoa_r+0xbb8>)
 8008176:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <_dtoa_r+0xbbc>)
 800817c:	2a00      	cmp	r2, #0
 800817e:	d001      	beq.n	8008184 <_dtoa_r+0xb98>
 8008180:	f7ff fa77 	bl	8007672 <_dtoa_r+0x86>
 8008184:	f7ff fa77 	bl	8007676 <_dtoa_r+0x8a>
 8008188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800818a:	2b01      	cmp	r3, #1
 800818c:	dc00      	bgt.n	8008190 <_dtoa_r+0xba4>
 800818e:	e621      	b.n	8007dd4 <_dtoa_r+0x7e8>
 8008190:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008192:	2001      	movs	r0, #1
 8008194:	e635      	b.n	8007e02 <_dtoa_r+0x816>
 8008196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	dcb2      	bgt.n	8008102 <_dtoa_r+0xb16>
 800819c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800819e:	2b02      	cmp	r3, #2
 80081a0:	ddaf      	ble.n	8008102 <_dtoa_r+0xb16>
 80081a2:	e6bc      	b.n	8007f1e <_dtoa_r+0x932>
 80081a4:	0800a0e0 	.word	0x0800a0e0
 80081a8:	0800a0e8 	.word	0x0800a0e8

080081ac <std>:
 80081ac:	2300      	movs	r3, #0
 80081ae:	b510      	push	{r4, lr}
 80081b0:	0004      	movs	r4, r0
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	6043      	str	r3, [r0, #4]
 80081b6:	6083      	str	r3, [r0, #8]
 80081b8:	8181      	strh	r1, [r0, #12]
 80081ba:	6643      	str	r3, [r0, #100]	; 0x64
 80081bc:	81c2      	strh	r2, [r0, #14]
 80081be:	6103      	str	r3, [r0, #16]
 80081c0:	6143      	str	r3, [r0, #20]
 80081c2:	6183      	str	r3, [r0, #24]
 80081c4:	0019      	movs	r1, r3
 80081c6:	2208      	movs	r2, #8
 80081c8:	305c      	adds	r0, #92	; 0x5c
 80081ca:	f7fd fc07 	bl	80059dc <memset>
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <std+0x38>)
 80081d0:	6224      	str	r4, [r4, #32]
 80081d2:	6263      	str	r3, [r4, #36]	; 0x24
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <std+0x3c>)
 80081d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <std+0x40>)
 80081da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081dc:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <std+0x44>)
 80081de:	6323      	str	r3, [r4, #48]	; 0x30
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	080098f5 	.word	0x080098f5
 80081e8:	0800991d 	.word	0x0800991d
 80081ec:	08009955 	.word	0x08009955
 80081f0:	08009981 	.word	0x08009981

080081f4 <_cleanup_r>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	4902      	ldr	r1, [pc, #8]	; (8008200 <_cleanup_r+0xc>)
 80081f8:	f000 f88c 	bl	8008314 <_fwalk_reent>
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	08009cc1 	.word	0x08009cc1

08008204 <__sfmoreglue>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	2568      	movs	r5, #104	; 0x68
 8008208:	1e4a      	subs	r2, r1, #1
 800820a:	4355      	muls	r5, r2
 800820c:	000e      	movs	r6, r1
 800820e:	0029      	movs	r1, r5
 8008210:	3174      	adds	r1, #116	; 0x74
 8008212:	f001 f861 	bl	80092d8 <_malloc_r>
 8008216:	1e04      	subs	r4, r0, #0
 8008218:	d008      	beq.n	800822c <__sfmoreglue+0x28>
 800821a:	2100      	movs	r1, #0
 800821c:	002a      	movs	r2, r5
 800821e:	6001      	str	r1, [r0, #0]
 8008220:	6046      	str	r6, [r0, #4]
 8008222:	300c      	adds	r0, #12
 8008224:	60a0      	str	r0, [r4, #8]
 8008226:	3268      	adds	r2, #104	; 0x68
 8008228:	f7fd fbd8 	bl	80059dc <memset>
 800822c:	0020      	movs	r0, r4
 800822e:	bd70      	pop	{r4, r5, r6, pc}

08008230 <__sinit>:
 8008230:	6983      	ldr	r3, [r0, #24]
 8008232:	b513      	push	{r0, r1, r4, lr}
 8008234:	0004      	movs	r4, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d128      	bne.n	800828c <__sinit+0x5c>
 800823a:	6483      	str	r3, [r0, #72]	; 0x48
 800823c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800823e:	6503      	str	r3, [r0, #80]	; 0x50
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <__sinit+0x60>)
 8008242:	4a14      	ldr	r2, [pc, #80]	; (8008294 <__sinit+0x64>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6282      	str	r2, [r0, #40]	; 0x28
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	4298      	cmp	r0, r3
 800824c:	d101      	bne.n	8008252 <__sinit+0x22>
 800824e:	2301      	movs	r3, #1
 8008250:	6183      	str	r3, [r0, #24]
 8008252:	0020      	movs	r0, r4
 8008254:	f000 f820 	bl	8008298 <__sfp>
 8008258:	6060      	str	r0, [r4, #4]
 800825a:	0020      	movs	r0, r4
 800825c:	f000 f81c 	bl	8008298 <__sfp>
 8008260:	60a0      	str	r0, [r4, #8]
 8008262:	0020      	movs	r0, r4
 8008264:	f000 f818 	bl	8008298 <__sfp>
 8008268:	2200      	movs	r2, #0
 800826a:	60e0      	str	r0, [r4, #12]
 800826c:	2104      	movs	r1, #4
 800826e:	6860      	ldr	r0, [r4, #4]
 8008270:	f7ff ff9c 	bl	80081ac <std>
 8008274:	2201      	movs	r2, #1
 8008276:	2109      	movs	r1, #9
 8008278:	68a0      	ldr	r0, [r4, #8]
 800827a:	f7ff ff97 	bl	80081ac <std>
 800827e:	2202      	movs	r2, #2
 8008280:	2112      	movs	r1, #18
 8008282:	68e0      	ldr	r0, [r4, #12]
 8008284:	f7ff ff92 	bl	80081ac <std>
 8008288:	2301      	movs	r3, #1
 800828a:	61a3      	str	r3, [r4, #24]
 800828c:	bd13      	pop	{r0, r1, r4, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	0800a050 	.word	0x0800a050
 8008294:	080081f5 	.word	0x080081f5

08008298 <__sfp>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	4b1c      	ldr	r3, [pc, #112]	; (800830c <__sfp+0x74>)
 800829c:	0007      	movs	r7, r0
 800829e:	681e      	ldr	r6, [r3, #0]
 80082a0:	69b3      	ldr	r3, [r6, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <__sfp+0x14>
 80082a6:	0030      	movs	r0, r6
 80082a8:	f7ff ffc2 	bl	8008230 <__sinit>
 80082ac:	3648      	adds	r6, #72	; 0x48
 80082ae:	68b4      	ldr	r4, [r6, #8]
 80082b0:	6873      	ldr	r3, [r6, #4]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	d504      	bpl.n	80082c0 <__sfp+0x28>
 80082b6:	6833      	ldr	r3, [r6, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <__sfp+0x34>
 80082bc:	6836      	ldr	r6, [r6, #0]
 80082be:	e7f6      	b.n	80082ae <__sfp+0x16>
 80082c0:	220c      	movs	r2, #12
 80082c2:	5ea5      	ldrsh	r5, [r4, r2]
 80082c4:	2d00      	cmp	r5, #0
 80082c6:	d00d      	beq.n	80082e4 <__sfp+0x4c>
 80082c8:	3468      	adds	r4, #104	; 0x68
 80082ca:	e7f2      	b.n	80082b2 <__sfp+0x1a>
 80082cc:	2104      	movs	r1, #4
 80082ce:	0038      	movs	r0, r7
 80082d0:	f7ff ff98 	bl	8008204 <__sfmoreglue>
 80082d4:	6030      	str	r0, [r6, #0]
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1f0      	bne.n	80082bc <__sfp+0x24>
 80082da:	230c      	movs	r3, #12
 80082dc:	0004      	movs	r4, r0
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	0020      	movs	r0, r4
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e4:	0020      	movs	r0, r4
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <__sfp+0x78>)
 80082e8:	6665      	str	r5, [r4, #100]	; 0x64
 80082ea:	6025      	str	r5, [r4, #0]
 80082ec:	6065      	str	r5, [r4, #4]
 80082ee:	60a5      	str	r5, [r4, #8]
 80082f0:	60e3      	str	r3, [r4, #12]
 80082f2:	6125      	str	r5, [r4, #16]
 80082f4:	6165      	str	r5, [r4, #20]
 80082f6:	61a5      	str	r5, [r4, #24]
 80082f8:	2208      	movs	r2, #8
 80082fa:	0029      	movs	r1, r5
 80082fc:	305c      	adds	r0, #92	; 0x5c
 80082fe:	f7fd fb6d 	bl	80059dc <memset>
 8008302:	6365      	str	r5, [r4, #52]	; 0x34
 8008304:	63a5      	str	r5, [r4, #56]	; 0x38
 8008306:	64a5      	str	r5, [r4, #72]	; 0x48
 8008308:	64e5      	str	r5, [r4, #76]	; 0x4c
 800830a:	e7e9      	b.n	80082e0 <__sfp+0x48>
 800830c:	0800a050 	.word	0x0800a050
 8008310:	ffff0001 	.word	0xffff0001

08008314 <_fwalk_reent>:
 8008314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008316:	0004      	movs	r4, r0
 8008318:	0007      	movs	r7, r0
 800831a:	2600      	movs	r6, #0
 800831c:	9101      	str	r1, [sp, #4]
 800831e:	3448      	adds	r4, #72	; 0x48
 8008320:	2c00      	cmp	r4, #0
 8008322:	d101      	bne.n	8008328 <_fwalk_reent+0x14>
 8008324:	0030      	movs	r0, r6
 8008326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	68a5      	ldr	r5, [r4, #8]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	d501      	bpl.n	800833a <_fwalk_reent+0x26>
 8008336:	6824      	ldr	r4, [r4, #0]
 8008338:	e7f2      	b.n	8008320 <_fwalk_reent+0xc>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d908      	bls.n	8008352 <_fwalk_reent+0x3e>
 8008340:	220e      	movs	r2, #14
 8008342:	5eab      	ldrsh	r3, [r5, r2]
 8008344:	3301      	adds	r3, #1
 8008346:	d004      	beq.n	8008352 <_fwalk_reent+0x3e>
 8008348:	0029      	movs	r1, r5
 800834a:	0038      	movs	r0, r7
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	4798      	blx	r3
 8008350:	4306      	orrs	r6, r0
 8008352:	3568      	adds	r5, #104	; 0x68
 8008354:	e7eb      	b.n	800832e <_fwalk_reent+0x1a>

08008356 <rshift>:
 8008356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008358:	0004      	movs	r4, r0
 800835a:	6905      	ldr	r5, [r0, #16]
 800835c:	3414      	adds	r4, #20
 800835e:	114b      	asrs	r3, r1, #5
 8008360:	0026      	movs	r6, r4
 8008362:	429d      	cmp	r5, r3
 8008364:	dd14      	ble.n	8008390 <rshift+0x3a>
 8008366:	221f      	movs	r2, #31
 8008368:	00ad      	lsls	r5, r5, #2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4011      	ands	r1, r2
 800836e:	1965      	adds	r5, r4, r5
 8008370:	18e3      	adds	r3, r4, r3
 8008372:	0022      	movs	r2, r4
 8008374:	2900      	cmp	r1, #0
 8008376:	d01e      	beq.n	80083b6 <rshift+0x60>
 8008378:	cb04      	ldmia	r3!, {r2}
 800837a:	2720      	movs	r7, #32
 800837c:	40ca      	lsrs	r2, r1
 800837e:	46a4      	mov	ip, r4
 8008380:	1a7f      	subs	r7, r7, r1
 8008382:	4666      	mov	r6, ip
 8008384:	429d      	cmp	r5, r3
 8008386:	d80b      	bhi.n	80083a0 <rshift+0x4a>
 8008388:	6032      	str	r2, [r6, #0]
 800838a:	2a00      	cmp	r2, #0
 800838c:	d000      	beq.n	8008390 <rshift+0x3a>
 800838e:	3604      	adds	r6, #4
 8008390:	1b33      	subs	r3, r6, r4
 8008392:	109b      	asrs	r3, r3, #2
 8008394:	6103      	str	r3, [r0, #16]
 8008396:	42a6      	cmp	r6, r4
 8008398:	d101      	bne.n	800839e <rshift+0x48>
 800839a:	2300      	movs	r3, #0
 800839c:	6143      	str	r3, [r0, #20]
 800839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a0:	681e      	ldr	r6, [r3, #0]
 80083a2:	40be      	lsls	r6, r7
 80083a4:	4332      	orrs	r2, r6
 80083a6:	4666      	mov	r6, ip
 80083a8:	c604      	stmia	r6!, {r2}
 80083aa:	cb04      	ldmia	r3!, {r2}
 80083ac:	46b4      	mov	ip, r6
 80083ae:	40ca      	lsrs	r2, r1
 80083b0:	e7e7      	b.n	8008382 <rshift+0x2c>
 80083b2:	cb02      	ldmia	r3!, {r1}
 80083b4:	c202      	stmia	r2!, {r1}
 80083b6:	0016      	movs	r6, r2
 80083b8:	429d      	cmp	r5, r3
 80083ba:	d8fa      	bhi.n	80083b2 <rshift+0x5c>
 80083bc:	e7e8      	b.n	8008390 <rshift+0x3a>

080083be <__hexdig_fun>:
 80083be:	0003      	movs	r3, r0
 80083c0:	3b30      	subs	r3, #48	; 0x30
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d803      	bhi.n	80083ce <__hexdig_fun+0x10>
 80083c6:	3820      	subs	r0, #32
 80083c8:	b2c3      	uxtb	r3, r0
 80083ca:	0018      	movs	r0, r3
 80083cc:	4770      	bx	lr
 80083ce:	0003      	movs	r3, r0
 80083d0:	3b61      	subs	r3, #97	; 0x61
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	d801      	bhi.n	80083da <__hexdig_fun+0x1c>
 80083d6:	3847      	subs	r0, #71	; 0x47
 80083d8:	e7f6      	b.n	80083c8 <__hexdig_fun+0xa>
 80083da:	0002      	movs	r2, r0
 80083dc:	3a41      	subs	r2, #65	; 0x41
 80083de:	2300      	movs	r3, #0
 80083e0:	2a05      	cmp	r2, #5
 80083e2:	d8f2      	bhi.n	80083ca <__hexdig_fun+0xc>
 80083e4:	3827      	subs	r0, #39	; 0x27
 80083e6:	e7ef      	b.n	80083c8 <__hexdig_fun+0xa>

080083e8 <__gethex>:
 80083e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ea:	b08d      	sub	sp, #52	; 0x34
 80083ec:	9005      	str	r0, [sp, #20]
 80083ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80083f0:	9109      	str	r1, [sp, #36]	; 0x24
 80083f2:	9202      	str	r2, [sp, #8]
 80083f4:	930a      	str	r3, [sp, #40]	; 0x28
 80083f6:	f000 fae2 	bl	80089be <__localeconv_l>
 80083fa:	6803      	ldr	r3, [r0, #0]
 80083fc:	0018      	movs	r0, r3
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f7f7 fe80 	bl	8000104 <strlen>
 8008404:	2202      	movs	r2, #2
 8008406:	9b07      	ldr	r3, [sp, #28]
 8008408:	4252      	negs	r2, r2
 800840a:	181b      	adds	r3, r3, r0
 800840c:	3b01      	subs	r3, #1
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	9004      	str	r0, [sp, #16]
 8008412:	930b      	str	r3, [sp, #44]	; 0x2c
 8008414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	1c8b      	adds	r3, r1, #2
 800841a:	1a52      	subs	r2, r2, r1
 800841c:	18d1      	adds	r1, r2, r3
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	9108      	str	r1, [sp, #32]
 8008422:	9901      	ldr	r1, [sp, #4]
 8008424:	3301      	adds	r3, #1
 8008426:	7808      	ldrb	r0, [r1, #0]
 8008428:	2830      	cmp	r0, #48	; 0x30
 800842a:	d0f7      	beq.n	800841c <__gethex+0x34>
 800842c:	f7ff ffc7 	bl	80083be <__hexdig_fun>
 8008430:	1e07      	subs	r7, r0, #0
 8008432:	d000      	beq.n	8008436 <__gethex+0x4e>
 8008434:	e06f      	b.n	8008516 <__gethex+0x12e>
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	9907      	ldr	r1, [sp, #28]
 800843a:	9801      	ldr	r0, [sp, #4]
 800843c:	f001 faa6 	bl	800998c <strncmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	d000      	beq.n	8008446 <__gethex+0x5e>
 8008444:	e06d      	b.n	8008522 <__gethex+0x13a>
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	9a04      	ldr	r2, [sp, #16]
 800844a:	189c      	adds	r4, r3, r2
 800844c:	7820      	ldrb	r0, [r4, #0]
 800844e:	f7ff ffb6 	bl	80083be <__hexdig_fun>
 8008452:	2800      	cmp	r0, #0
 8008454:	d069      	beq.n	800852a <__gethex+0x142>
 8008456:	9401      	str	r4, [sp, #4]
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	7818      	ldrb	r0, [r3, #0]
 800845c:	2830      	cmp	r0, #48	; 0x30
 800845e:	d009      	beq.n	8008474 <__gethex+0x8c>
 8008460:	f7ff ffad 	bl	80083be <__hexdig_fun>
 8008464:	4243      	negs	r3, r0
 8008466:	4143      	adcs	r3, r0
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	2301      	movs	r3, #1
 800846c:	0026      	movs	r6, r4
 800846e:	9308      	str	r3, [sp, #32]
 8008470:	9c01      	ldr	r4, [sp, #4]
 8008472:	e004      	b.n	800847e <__gethex+0x96>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	3301      	adds	r3, #1
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	e7ed      	b.n	8008458 <__gethex+0x70>
 800847c:	3401      	adds	r4, #1
 800847e:	7820      	ldrb	r0, [r4, #0]
 8008480:	f7ff ff9d 	bl	80083be <__hexdig_fun>
 8008484:	2800      	cmp	r0, #0
 8008486:	d1f9      	bne.n	800847c <__gethex+0x94>
 8008488:	9a04      	ldr	r2, [sp, #16]
 800848a:	9907      	ldr	r1, [sp, #28]
 800848c:	0020      	movs	r0, r4
 800848e:	f001 fa7d 	bl	800998c <strncmp>
 8008492:	2800      	cmp	r0, #0
 8008494:	d109      	bne.n	80084aa <__gethex+0xc2>
 8008496:	2e00      	cmp	r6, #0
 8008498:	d10a      	bne.n	80084b0 <__gethex+0xc8>
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	18e4      	adds	r4, r4, r3
 800849e:	0026      	movs	r6, r4
 80084a0:	7820      	ldrb	r0, [r4, #0]
 80084a2:	f7ff ff8c 	bl	80083be <__hexdig_fun>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d139      	bne.n	800851e <__gethex+0x136>
 80084aa:	2700      	movs	r7, #0
 80084ac:	42be      	cmp	r6, r7
 80084ae:	d001      	beq.n	80084b4 <__gethex+0xcc>
 80084b0:	1b37      	subs	r7, r6, r4
 80084b2:	00bf      	lsls	r7, r7, #2
 80084b4:	7823      	ldrb	r3, [r4, #0]
 80084b6:	2b50      	cmp	r3, #80	; 0x50
 80084b8:	d001      	beq.n	80084be <__gethex+0xd6>
 80084ba:	2b70      	cmp	r3, #112	; 0x70
 80084bc:	d142      	bne.n	8008544 <__gethex+0x15c>
 80084be:	7863      	ldrb	r3, [r4, #1]
 80084c0:	2b2b      	cmp	r3, #43	; 0x2b
 80084c2:	d034      	beq.n	800852e <__gethex+0x146>
 80084c4:	2b2d      	cmp	r3, #45	; 0x2d
 80084c6:	d036      	beq.n	8008536 <__gethex+0x14e>
 80084c8:	2300      	movs	r3, #0
 80084ca:	1c66      	adds	r6, r4, #1
 80084cc:	9306      	str	r3, [sp, #24]
 80084ce:	7830      	ldrb	r0, [r6, #0]
 80084d0:	f7ff ff75 	bl	80083be <__hexdig_fun>
 80084d4:	1e43      	subs	r3, r0, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b18      	cmp	r3, #24
 80084da:	d833      	bhi.n	8008544 <__gethex+0x15c>
 80084dc:	3810      	subs	r0, #16
 80084de:	0005      	movs	r5, r0
 80084e0:	3601      	adds	r6, #1
 80084e2:	7830      	ldrb	r0, [r6, #0]
 80084e4:	f7ff ff6b 	bl	80083be <__hexdig_fun>
 80084e8:	1e43      	subs	r3, r0, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b18      	cmp	r3, #24
 80084ee:	d924      	bls.n	800853a <__gethex+0x152>
 80084f0:	9b06      	ldr	r3, [sp, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d000      	beq.n	80084f8 <__gethex+0x110>
 80084f6:	426d      	negs	r5, r5
 80084f8:	197f      	adds	r7, r7, r5
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	601e      	str	r6, [r3, #0]
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d021      	beq.n	8008548 <__gethex+0x160>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	2606      	movs	r6, #6
 8008508:	425a      	negs	r2, r3
 800850a:	4153      	adcs	r3, r2
 800850c:	425b      	negs	r3, r3
 800850e:	401e      	ands	r6, r3
 8008510:	0030      	movs	r0, r6
 8008512:	b00d      	add	sp, #52	; 0x34
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	2300      	movs	r3, #0
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	001e      	movs	r6, r3
 800851c:	e7a8      	b.n	8008470 <__gethex+0x88>
 800851e:	3401      	adds	r4, #1
 8008520:	e7be      	b.n	80084a0 <__gethex+0xb8>
 8008522:	9c01      	ldr	r4, [sp, #4]
 8008524:	2301      	movs	r3, #1
 8008526:	9303      	str	r3, [sp, #12]
 8008528:	e7c4      	b.n	80084b4 <__gethex+0xcc>
 800852a:	0007      	movs	r7, r0
 800852c:	e7fa      	b.n	8008524 <__gethex+0x13c>
 800852e:	2300      	movs	r3, #0
 8008530:	9306      	str	r3, [sp, #24]
 8008532:	1ca6      	adds	r6, r4, #2
 8008534:	e7cb      	b.n	80084ce <__gethex+0xe6>
 8008536:	2301      	movs	r3, #1
 8008538:	e7fa      	b.n	8008530 <__gethex+0x148>
 800853a:	230a      	movs	r3, #10
 800853c:	435d      	muls	r5, r3
 800853e:	182d      	adds	r5, r5, r0
 8008540:	3d10      	subs	r5, #16
 8008542:	e7cd      	b.n	80084e0 <__gethex+0xf8>
 8008544:	0026      	movs	r6, r4
 8008546:	e7d8      	b.n	80084fa <__gethex+0x112>
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	9903      	ldr	r1, [sp, #12]
 800854c:	1ae3      	subs	r3, r4, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b07      	cmp	r3, #7
 8008552:	dc47      	bgt.n	80085e4 <__gethex+0x1fc>
 8008554:	9805      	ldr	r0, [sp, #20]
 8008556:	f000 fa71 	bl	8008a3c <_Balloc>
 800855a:	0003      	movs	r3, r0
 800855c:	3314      	adds	r3, #20
 800855e:	9303      	str	r3, [sp, #12]
 8008560:	9308      	str	r3, [sp, #32]
 8008562:	2300      	movs	r3, #0
 8008564:	0005      	movs	r5, r0
 8008566:	001e      	movs	r6, r3
 8008568:	9306      	str	r3, [sp, #24]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	42a3      	cmp	r3, r4
 800856e:	d33c      	bcc.n	80085ea <__gethex+0x202>
 8008570:	9c08      	ldr	r4, [sp, #32]
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	c440      	stmia	r4!, {r6}
 8008576:	1ae4      	subs	r4, r4, r3
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	612c      	str	r4, [r5, #16]
 800857c:	0030      	movs	r0, r6
 800857e:	f000 fb2a 	bl	8008bd6 <__hi0bits>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	0164      	lsls	r4, r4, #5
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	1a26      	subs	r6, r4, r0
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	429e      	cmp	r6, r3
 800858e:	dd5f      	ble.n	8008650 <__gethex+0x268>
 8008590:	1af6      	subs	r6, r6, r3
 8008592:	0031      	movs	r1, r6
 8008594:	0028      	movs	r0, r5
 8008596:	f000 fe24 	bl	80091e2 <__any_on>
 800859a:	1e04      	subs	r4, r0, #0
 800859c:	d00f      	beq.n	80085be <__gethex+0x1d6>
 800859e:	2401      	movs	r4, #1
 80085a0:	211f      	movs	r1, #31
 80085a2:	0020      	movs	r0, r4
 80085a4:	1e73      	subs	r3, r6, #1
 80085a6:	4019      	ands	r1, r3
 80085a8:	4088      	lsls	r0, r1
 80085aa:	0001      	movs	r1, r0
 80085ac:	115a      	asrs	r2, r3, #5
 80085ae:	9803      	ldr	r0, [sp, #12]
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	5812      	ldr	r2, [r2, r0]
 80085b4:	420a      	tst	r2, r1
 80085b6:	d002      	beq.n	80085be <__gethex+0x1d6>
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	dc41      	bgt.n	8008640 <__gethex+0x258>
 80085bc:	2402      	movs	r4, #2
 80085be:	0031      	movs	r1, r6
 80085c0:	0028      	movs	r0, r5
 80085c2:	f7ff fec8 	bl	8008356 <rshift>
 80085c6:	19bf      	adds	r7, r7, r6
 80085c8:	9b02      	ldr	r3, [sp, #8]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	42bb      	cmp	r3, r7
 80085d0:	da4e      	bge.n	8008670 <__gethex+0x288>
 80085d2:	0029      	movs	r1, r5
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	f000 fa69 	bl	8008aac <_Bfree>
 80085da:	2300      	movs	r3, #0
 80085dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085de:	26a3      	movs	r6, #163	; 0xa3
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e795      	b.n	8008510 <__gethex+0x128>
 80085e4:	3101      	adds	r1, #1
 80085e6:	105b      	asrs	r3, r3, #1
 80085e8:	e7b2      	b.n	8008550 <__gethex+0x168>
 80085ea:	1e63      	subs	r3, r4, #1
 80085ec:	9309      	str	r3, [sp, #36]	; 0x24
 80085ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d015      	beq.n	8008622 <__gethex+0x23a>
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d105      	bne.n	8008608 <__gethex+0x220>
 80085fc:	9b08      	ldr	r3, [sp, #32]
 80085fe:	601e      	str	r6, [r3, #0]
 8008600:	2600      	movs	r6, #0
 8008602:	3304      	adds	r3, #4
 8008604:	9308      	str	r3, [sp, #32]
 8008606:	9606      	str	r6, [sp, #24]
 8008608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860a:	7818      	ldrb	r0, [r3, #0]
 800860c:	f7ff fed7 	bl	80083be <__hexdig_fun>
 8008610:	230f      	movs	r3, #15
 8008612:	4018      	ands	r0, r3
 8008614:	9b06      	ldr	r3, [sp, #24]
 8008616:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008618:	4098      	lsls	r0, r3
 800861a:	3304      	adds	r3, #4
 800861c:	4306      	orrs	r6, r0
 800861e:	9306      	str	r3, [sp, #24]
 8008620:	e7a3      	b.n	800856a <__gethex+0x182>
 8008622:	2301      	movs	r3, #1
 8008624:	9a04      	ldr	r2, [sp, #16]
 8008626:	1a9c      	subs	r4, r3, r2
 8008628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862a:	191c      	adds	r4, r3, r4
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	429c      	cmp	r4, r3
 8008630:	d3e1      	bcc.n	80085f6 <__gethex+0x20e>
 8008632:	9907      	ldr	r1, [sp, #28]
 8008634:	0020      	movs	r0, r4
 8008636:	f001 f9a9 	bl	800998c <strncmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	d1db      	bne.n	80085f6 <__gethex+0x20e>
 800863e:	e794      	b.n	800856a <__gethex+0x182>
 8008640:	1eb1      	subs	r1, r6, #2
 8008642:	0028      	movs	r0, r5
 8008644:	f000 fdcd 	bl	80091e2 <__any_on>
 8008648:	2800      	cmp	r0, #0
 800864a:	d0b7      	beq.n	80085bc <__gethex+0x1d4>
 800864c:	2403      	movs	r4, #3
 800864e:	e7b6      	b.n	80085be <__gethex+0x1d6>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	2400      	movs	r4, #0
 8008654:	429e      	cmp	r6, r3
 8008656:	dab7      	bge.n	80085c8 <__gethex+0x1e0>
 8008658:	1b9e      	subs	r6, r3, r6
 800865a:	0029      	movs	r1, r5
 800865c:	0032      	movs	r2, r6
 800865e:	9805      	ldr	r0, [sp, #20]
 8008660:	f000 fbec 	bl	8008e3c <__lshift>
 8008664:	0003      	movs	r3, r0
 8008666:	3314      	adds	r3, #20
 8008668:	0005      	movs	r5, r0
 800866a:	1bbf      	subs	r7, r7, r6
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	e7ab      	b.n	80085c8 <__gethex+0x1e0>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	685e      	ldr	r6, [r3, #4]
 8008674:	42be      	cmp	r6, r7
 8008676:	dd6b      	ble.n	8008750 <__gethex+0x368>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	1bf6      	subs	r6, r6, r7
 800867c:	42b3      	cmp	r3, r6
 800867e:	dc32      	bgt.n	80086e6 <__gethex+0x2fe>
 8008680:	9b02      	ldr	r3, [sp, #8]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d026      	beq.n	80086d6 <__gethex+0x2ee>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d028      	beq.n	80086de <__gethex+0x2f6>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d119      	bne.n	80086c4 <__gethex+0x2dc>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	42b3      	cmp	r3, r6
 8008694:	d116      	bne.n	80086c4 <__gethex+0x2dc>
 8008696:	2b01      	cmp	r3, #1
 8008698:	dc0d      	bgt.n	80086b6 <__gethex+0x2ce>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	2662      	movs	r6, #98	; 0x62
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	9a01      	ldr	r2, [sp, #4]
 80086a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	2301      	movs	r3, #1
 80086aa:	9a03      	ldr	r2, [sp, #12]
 80086ac:	612b      	str	r3, [r5, #16]
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086b2:	601d      	str	r5, [r3, #0]
 80086b4:	e72c      	b.n	8008510 <__gethex+0x128>
 80086b6:	9901      	ldr	r1, [sp, #4]
 80086b8:	0028      	movs	r0, r5
 80086ba:	3901      	subs	r1, #1
 80086bc:	f000 fd91 	bl	80091e2 <__any_on>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1ea      	bne.n	800869a <__gethex+0x2b2>
 80086c4:	0029      	movs	r1, r5
 80086c6:	9805      	ldr	r0, [sp, #20]
 80086c8:	f000 f9f0 	bl	8008aac <_Bfree>
 80086cc:	2300      	movs	r3, #0
 80086ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086d0:	2650      	movs	r6, #80	; 0x50
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e71c      	b.n	8008510 <__gethex+0x128>
 80086d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0de      	beq.n	800869a <__gethex+0x2b2>
 80086dc:	e7f2      	b.n	80086c4 <__gethex+0x2dc>
 80086de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1da      	bne.n	800869a <__gethex+0x2b2>
 80086e4:	e7ee      	b.n	80086c4 <__gethex+0x2dc>
 80086e6:	1e77      	subs	r7, r6, #1
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	d12f      	bne.n	800874c <__gethex+0x364>
 80086ec:	2f00      	cmp	r7, #0
 80086ee:	d004      	beq.n	80086fa <__gethex+0x312>
 80086f0:	0039      	movs	r1, r7
 80086f2:	0028      	movs	r0, r5
 80086f4:	f000 fd75 	bl	80091e2 <__any_on>
 80086f8:	0004      	movs	r4, r0
 80086fa:	231f      	movs	r3, #31
 80086fc:	117a      	asrs	r2, r7, #5
 80086fe:	401f      	ands	r7, r3
 8008700:	3b1e      	subs	r3, #30
 8008702:	40bb      	lsls	r3, r7
 8008704:	9903      	ldr	r1, [sp, #12]
 8008706:	0092      	lsls	r2, r2, #2
 8008708:	5852      	ldr	r2, [r2, r1]
 800870a:	421a      	tst	r2, r3
 800870c:	d001      	beq.n	8008712 <__gethex+0x32a>
 800870e:	2302      	movs	r3, #2
 8008710:	431c      	orrs	r4, r3
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	0031      	movs	r1, r6
 8008716:	1b9b      	subs	r3, r3, r6
 8008718:	2602      	movs	r6, #2
 800871a:	0028      	movs	r0, r5
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	f7ff fe1a 	bl	8008356 <rshift>
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	685f      	ldr	r7, [r3, #4]
 8008726:	2c00      	cmp	r4, #0
 8008728:	d040      	beq.n	80087ac <__gethex+0x3c4>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d010      	beq.n	8008754 <__gethex+0x36c>
 8008732:	2b03      	cmp	r3, #3
 8008734:	d012      	beq.n	800875c <__gethex+0x374>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d106      	bne.n	8008748 <__gethex+0x360>
 800873a:	07a2      	lsls	r2, r4, #30
 800873c:	d504      	bpl.n	8008748 <__gethex+0x360>
 800873e:	9a03      	ldr	r2, [sp, #12]
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	4314      	orrs	r4, r2
 8008744:	421c      	tst	r4, r3
 8008746:	d10c      	bne.n	8008762 <__gethex+0x37a>
 8008748:	2310      	movs	r3, #16
 800874a:	e02e      	b.n	80087aa <__gethex+0x3c2>
 800874c:	2401      	movs	r4, #1
 800874e:	e7d4      	b.n	80086fa <__gethex+0x312>
 8008750:	2601      	movs	r6, #1
 8008752:	e7e8      	b.n	8008726 <__gethex+0x33e>
 8008754:	2301      	movs	r3, #1
 8008756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	9313      	str	r3, [sp, #76]	; 0x4c
 800875c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f2      	beq.n	8008748 <__gethex+0x360>
 8008762:	692c      	ldr	r4, [r5, #16]
 8008764:	00a3      	lsls	r3, r4, #2
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	002b      	movs	r3, r5
 800876a:	00a2      	lsls	r2, r4, #2
 800876c:	3314      	adds	r3, #20
 800876e:	1899      	adds	r1, r3, r2
 8008770:	2200      	movs	r2, #0
 8008772:	4694      	mov	ip, r2
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	1c50      	adds	r0, r2, #1
 8008778:	d01d      	beq.n	80087b6 <__gethex+0x3ce>
 800877a:	3201      	adds	r2, #1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	002b      	movs	r3, r5
 8008780:	3314      	adds	r3, #20
 8008782:	2e02      	cmp	r6, #2
 8008784:	d13a      	bne.n	80087fc <__gethex+0x414>
 8008786:	9a02      	ldr	r2, [sp, #8]
 8008788:	9901      	ldr	r1, [sp, #4]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	3a01      	subs	r2, #1
 800878e:	428a      	cmp	r2, r1
 8008790:	d10a      	bne.n	80087a8 <__gethex+0x3c0>
 8008792:	114a      	asrs	r2, r1, #5
 8008794:	211f      	movs	r1, #31
 8008796:	9801      	ldr	r0, [sp, #4]
 8008798:	0092      	lsls	r2, r2, #2
 800879a:	4001      	ands	r1, r0
 800879c:	2001      	movs	r0, #1
 800879e:	0004      	movs	r4, r0
 80087a0:	408c      	lsls	r4, r1
 80087a2:	58d3      	ldr	r3, [r2, r3]
 80087a4:	4223      	tst	r3, r4
 80087a6:	d148      	bne.n	800883a <__gethex+0x452>
 80087a8:	2320      	movs	r3, #32
 80087aa:	431e      	orrs	r6, r3
 80087ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ae:	601d      	str	r5, [r3, #0]
 80087b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b2:	601f      	str	r7, [r3, #0]
 80087b4:	e6ac      	b.n	8008510 <__gethex+0x128>
 80087b6:	4662      	mov	r2, ip
 80087b8:	c304      	stmia	r3!, {r2}
 80087ba:	4299      	cmp	r1, r3
 80087bc:	d8da      	bhi.n	8008774 <__gethex+0x38c>
 80087be:	68ab      	ldr	r3, [r5, #8]
 80087c0:	429c      	cmp	r4, r3
 80087c2:	db12      	blt.n	80087ea <__gethex+0x402>
 80087c4:	686b      	ldr	r3, [r5, #4]
 80087c6:	9805      	ldr	r0, [sp, #20]
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	f000 f937 	bl	8008a3c <_Balloc>
 80087ce:	0029      	movs	r1, r5
 80087d0:	692b      	ldr	r3, [r5, #16]
 80087d2:	9003      	str	r0, [sp, #12]
 80087d4:	1c9a      	adds	r2, r3, #2
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	310c      	adds	r1, #12
 80087da:	300c      	adds	r0, #12
 80087dc:	f000 f925 	bl	8008a2a <memcpy>
 80087e0:	0029      	movs	r1, r5
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	f000 f962 	bl	8008aac <_Bfree>
 80087e8:	9d03      	ldr	r5, [sp, #12]
 80087ea:	692b      	ldr	r3, [r5, #16]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	612a      	str	r2, [r5, #16]
 80087f0:	2201      	movs	r2, #1
 80087f2:	3304      	adds	r3, #4
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	18eb      	adds	r3, r5, r3
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	e7c0      	b.n	800877e <__gethex+0x396>
 80087fc:	692a      	ldr	r2, [r5, #16]
 80087fe:	42a2      	cmp	r2, r4
 8008800:	dd0a      	ble.n	8008818 <__gethex+0x430>
 8008802:	2101      	movs	r1, #1
 8008804:	0028      	movs	r0, r5
 8008806:	f7ff fda6 	bl	8008356 <rshift>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	3701      	adds	r7, #1
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	2601      	movs	r6, #1
 8008812:	42bb      	cmp	r3, r7
 8008814:	dac8      	bge.n	80087a8 <__gethex+0x3c0>
 8008816:	e6dc      	b.n	80085d2 <__gethex+0x1ea>
 8008818:	241f      	movs	r4, #31
 800881a:	9a01      	ldr	r2, [sp, #4]
 800881c:	2601      	movs	r6, #1
 800881e:	4022      	ands	r2, r4
 8008820:	1e14      	subs	r4, r2, #0
 8008822:	d0c1      	beq.n	80087a8 <__gethex+0x3c0>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	189b      	adds	r3, r3, r2
 8008828:	3b04      	subs	r3, #4
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	f000 f9d3 	bl	8008bd6 <__hi0bits>
 8008830:	2120      	movs	r1, #32
 8008832:	1b0c      	subs	r4, r1, r4
 8008834:	42a0      	cmp	r0, r4
 8008836:	dbe4      	blt.n	8008802 <__gethex+0x41a>
 8008838:	e7b6      	b.n	80087a8 <__gethex+0x3c0>
 800883a:	0006      	movs	r6, r0
 800883c:	e7b4      	b.n	80087a8 <__gethex+0x3c0>

0800883e <L_shift>:
 800883e:	2308      	movs	r3, #8
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	2520      	movs	r5, #32
 8008844:	1a9a      	subs	r2, r3, r2
 8008846:	0092      	lsls	r2, r2, #2
 8008848:	1aad      	subs	r5, r5, r2
 800884a:	6843      	ldr	r3, [r0, #4]
 800884c:	6806      	ldr	r6, [r0, #0]
 800884e:	001c      	movs	r4, r3
 8008850:	40ac      	lsls	r4, r5
 8008852:	40d3      	lsrs	r3, r2
 8008854:	4334      	orrs	r4, r6
 8008856:	6004      	str	r4, [r0, #0]
 8008858:	6043      	str	r3, [r0, #4]
 800885a:	3004      	adds	r0, #4
 800885c:	4288      	cmp	r0, r1
 800885e:	d3f4      	bcc.n	800884a <L_shift+0xc>
 8008860:	bd70      	pop	{r4, r5, r6, pc}

08008862 <__match>:
 8008862:	b530      	push	{r4, r5, lr}
 8008864:	6803      	ldr	r3, [r0, #0]
 8008866:	780c      	ldrb	r4, [r1, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	2c00      	cmp	r4, #0
 800886c:	d102      	bne.n	8008874 <__match+0x12>
 800886e:	6003      	str	r3, [r0, #0]
 8008870:	2001      	movs	r0, #1
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	0015      	movs	r5, r2
 8008878:	3d41      	subs	r5, #65	; 0x41
 800887a:	2d19      	cmp	r5, #25
 800887c:	d800      	bhi.n	8008880 <__match+0x1e>
 800887e:	3220      	adds	r2, #32
 8008880:	3101      	adds	r1, #1
 8008882:	42a2      	cmp	r2, r4
 8008884:	d0ef      	beq.n	8008866 <__match+0x4>
 8008886:	2000      	movs	r0, #0
 8008888:	e7f3      	b.n	8008872 <__match+0x10>

0800888a <__hexnan>:
 800888a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800888c:	b08b      	sub	sp, #44	; 0x2c
 800888e:	9201      	str	r2, [sp, #4]
 8008890:	680a      	ldr	r2, [r1, #0]
 8008892:	9901      	ldr	r1, [sp, #4]
 8008894:	1153      	asrs	r3, r2, #5
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	18cb      	adds	r3, r1, r3
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	231f      	movs	r3, #31
 800889e:	401a      	ands	r2, r3
 80088a0:	9008      	str	r0, [sp, #32]
 80088a2:	9206      	str	r2, [sp, #24]
 80088a4:	d002      	beq.n	80088ac <__hexnan+0x22>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3304      	adds	r3, #4
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	2500      	movs	r5, #0
 80088b0:	1f1e      	subs	r6, r3, #4
 80088b2:	0037      	movs	r7, r6
 80088b4:	0034      	movs	r4, r6
 80088b6:	9b08      	ldr	r3, [sp, #32]
 80088b8:	6035      	str	r5, [r6, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9507      	str	r5, [sp, #28]
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	9502      	str	r5, [sp, #8]
 80088c2:	9b05      	ldr	r3, [sp, #20]
 80088c4:	3301      	adds	r3, #1
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	9303      	str	r3, [sp, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d028      	beq.n	8008924 <__hexnan+0x9a>
 80088d2:	9803      	ldr	r0, [sp, #12]
 80088d4:	f7ff fd73 	bl	80083be <__hexdig_fun>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d145      	bne.n	8008968 <__hexnan+0xde>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d819      	bhi.n	8008916 <__hexnan+0x8c>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	9a07      	ldr	r2, [sp, #28]
 80088e6:	4293      	cmp	r3, r2
 80088e8:	dd12      	ble.n	8008910 <__hexnan+0x86>
 80088ea:	42bc      	cmp	r4, r7
 80088ec:	d206      	bcs.n	80088fc <__hexnan+0x72>
 80088ee:	2d07      	cmp	r5, #7
 80088f0:	dc04      	bgt.n	80088fc <__hexnan+0x72>
 80088f2:	002a      	movs	r2, r5
 80088f4:	0039      	movs	r1, r7
 80088f6:	0020      	movs	r0, r4
 80088f8:	f7ff ffa1 	bl	800883e <L_shift>
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	2508      	movs	r5, #8
 8008900:	429c      	cmp	r4, r3
 8008902:	d905      	bls.n	8008910 <__hexnan+0x86>
 8008904:	1f27      	subs	r7, r4, #4
 8008906:	2500      	movs	r5, #0
 8008908:	003c      	movs	r4, r7
 800890a:	9b02      	ldr	r3, [sp, #8]
 800890c:	603d      	str	r5, [r7, #0]
 800890e:	9307      	str	r3, [sp, #28]
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	e7d5      	b.n	80088c2 <__hexnan+0x38>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	2b29      	cmp	r3, #41	; 0x29
 800891a:	d14a      	bne.n	80089b2 <__hexnan+0x128>
 800891c:	9b05      	ldr	r3, [sp, #20]
 800891e:	9a08      	ldr	r2, [sp, #32]
 8008920:	3302      	adds	r3, #2
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d043      	beq.n	80089b2 <__hexnan+0x128>
 800892a:	42bc      	cmp	r4, r7
 800892c:	d206      	bcs.n	800893c <__hexnan+0xb2>
 800892e:	2d07      	cmp	r5, #7
 8008930:	dc04      	bgt.n	800893c <__hexnan+0xb2>
 8008932:	002a      	movs	r2, r5
 8008934:	0039      	movs	r1, r7
 8008936:	0020      	movs	r0, r4
 8008938:	f7ff ff81 	bl	800883e <L_shift>
 800893c:	9b01      	ldr	r3, [sp, #4]
 800893e:	429c      	cmp	r4, r3
 8008940:	d926      	bls.n	8008990 <__hexnan+0x106>
 8008942:	cc04      	ldmia	r4!, {r2}
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	3304      	adds	r3, #4
 8008948:	42a6      	cmp	r6, r4
 800894a:	d2fa      	bcs.n	8008942 <__hexnan+0xb8>
 800894c:	2200      	movs	r2, #0
 800894e:	c304      	stmia	r3!, {r2}
 8008950:	429e      	cmp	r6, r3
 8008952:	d2fc      	bcs.n	800894e <__hexnan+0xc4>
 8008954:	6833      	ldr	r3, [r6, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d104      	bne.n	8008964 <__hexnan+0xda>
 800895a:	9b01      	ldr	r3, [sp, #4]
 800895c:	429e      	cmp	r6, r3
 800895e:	d126      	bne.n	80089ae <__hexnan+0x124>
 8008960:	2301      	movs	r3, #1
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	2005      	movs	r0, #5
 8008966:	e025      	b.n	80089b4 <__hexnan+0x12a>
 8008968:	9b02      	ldr	r3, [sp, #8]
 800896a:	3501      	adds	r5, #1
 800896c:	3301      	adds	r3, #1
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	2d08      	cmp	r5, #8
 8008972:	dd06      	ble.n	8008982 <__hexnan+0xf8>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	429c      	cmp	r4, r3
 8008978:	d9ca      	bls.n	8008910 <__hexnan+0x86>
 800897a:	2300      	movs	r3, #0
 800897c:	2501      	movs	r5, #1
 800897e:	3c04      	subs	r4, #4
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	220f      	movs	r2, #15
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	4010      	ands	r0, r2
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	4318      	orrs	r0, r3
 800898c:	6020      	str	r0, [r4, #0]
 800898e:	e7bf      	b.n	8008910 <__hexnan+0x86>
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0de      	beq.n	8008954 <__hexnan+0xca>
 8008996:	2120      	movs	r1, #32
 8008998:	9a06      	ldr	r2, [sp, #24]
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	1a89      	subs	r1, r1, r2
 800899e:	2201      	movs	r2, #1
 80089a0:	4252      	negs	r2, r2
 80089a2:	40ca      	lsrs	r2, r1
 80089a4:	3b04      	subs	r3, #4
 80089a6:	6819      	ldr	r1, [r3, #0]
 80089a8:	400a      	ands	r2, r1
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e7d2      	b.n	8008954 <__hexnan+0xca>
 80089ae:	3e04      	subs	r6, #4
 80089b0:	e7d0      	b.n	8008954 <__hexnan+0xca>
 80089b2:	2004      	movs	r0, #4
 80089b4:	b00b      	add	sp, #44	; 0x2c
 80089b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089b8 <__locale_ctype_ptr_l>:
 80089b8:	30ec      	adds	r0, #236	; 0xec
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	4770      	bx	lr

080089be <__localeconv_l>:
 80089be:	30f0      	adds	r0, #240	; 0xf0
 80089c0:	4770      	bx	lr
	...

080089c4 <_localeconv_r>:
 80089c4:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <_localeconv_r+0x10>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a18      	ldr	r0, [r3, #32]
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d100      	bne.n	80089d0 <_localeconv_r+0xc>
 80089ce:	4802      	ldr	r0, [pc, #8]	; (80089d8 <_localeconv_r+0x14>)
 80089d0:	30f0      	adds	r0, #240	; 0xf0
 80089d2:	4770      	bx	lr
 80089d4:	20000010 	.word	0x20000010
 80089d8:	20000074 	.word	0x20000074

080089dc <malloc>:
 80089dc:	b510      	push	{r4, lr}
 80089de:	4b03      	ldr	r3, [pc, #12]	; (80089ec <malloc+0x10>)
 80089e0:	0001      	movs	r1, r0
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	f000 fc78 	bl	80092d8 <_malloc_r>
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	20000010 	.word	0x20000010

080089f0 <__ascii_mbtowc>:
 80089f0:	b082      	sub	sp, #8
 80089f2:	2900      	cmp	r1, #0
 80089f4:	d100      	bne.n	80089f8 <__ascii_mbtowc+0x8>
 80089f6:	a901      	add	r1, sp, #4
 80089f8:	1e10      	subs	r0, r2, #0
 80089fa:	d006      	beq.n	8008a0a <__ascii_mbtowc+0x1a>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <__ascii_mbtowc+0x1e>
 8008a00:	7813      	ldrb	r3, [r2, #0]
 8008a02:	600b      	str	r3, [r1, #0]
 8008a04:	7810      	ldrb	r0, [r2, #0]
 8008a06:	1e43      	subs	r3, r0, #1
 8008a08:	4198      	sbcs	r0, r3
 8008a0a:	b002      	add	sp, #8
 8008a0c:	4770      	bx	lr
 8008a0e:	2002      	movs	r0, #2
 8008a10:	4240      	negs	r0, r0
 8008a12:	e7fa      	b.n	8008a0a <__ascii_mbtowc+0x1a>

08008a14 <memchr>:
 8008a14:	b2c9      	uxtb	r1, r1
 8008a16:	1882      	adds	r2, r0, r2
 8008a18:	4290      	cmp	r0, r2
 8008a1a:	d101      	bne.n	8008a20 <memchr+0xc>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4770      	bx	lr
 8008a20:	7803      	ldrb	r3, [r0, #0]
 8008a22:	428b      	cmp	r3, r1
 8008a24:	d0fb      	beq.n	8008a1e <memchr+0xa>
 8008a26:	3001      	adds	r0, #1
 8008a28:	e7f6      	b.n	8008a18 <memchr+0x4>

08008a2a <memcpy>:
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d100      	bne.n	8008a34 <memcpy+0xa>
 8008a32:	bd10      	pop	{r4, pc}
 8008a34:	5ccc      	ldrb	r4, [r1, r3]
 8008a36:	54c4      	strb	r4, [r0, r3]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	e7f8      	b.n	8008a2e <memcpy+0x4>

08008a3c <_Balloc>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a40:	0004      	movs	r4, r0
 8008a42:	000d      	movs	r5, r1
 8008a44:	2e00      	cmp	r6, #0
 8008a46:	d107      	bne.n	8008a58 <_Balloc+0x1c>
 8008a48:	2010      	movs	r0, #16
 8008a4a:	f7ff ffc7 	bl	80089dc <malloc>
 8008a4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a50:	6046      	str	r6, [r0, #4]
 8008a52:	6086      	str	r6, [r0, #8]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a5a:	68f3      	ldr	r3, [r6, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d013      	beq.n	8008a88 <_Balloc+0x4c>
 8008a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a62:	00aa      	lsls	r2, r5, #2
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d118      	bne.n	8008aa0 <_Balloc+0x64>
 8008a6e:	2101      	movs	r1, #1
 8008a70:	000e      	movs	r6, r1
 8008a72:	40ae      	lsls	r6, r5
 8008a74:	1d72      	adds	r2, r6, #5
 8008a76:	0092      	lsls	r2, r2, #2
 8008a78:	0020      	movs	r0, r4
 8008a7a:	f000 fbd4 	bl	8009226 <_calloc_r>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d00c      	beq.n	8008a9c <_Balloc+0x60>
 8008a82:	6045      	str	r5, [r0, #4]
 8008a84:	6086      	str	r6, [r0, #8]
 8008a86:	e00d      	b.n	8008aa4 <_Balloc+0x68>
 8008a88:	2221      	movs	r2, #33	; 0x21
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	0020      	movs	r0, r4
 8008a8e:	f000 fbca 	bl	8009226 <_calloc_r>
 8008a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a94:	60f0      	str	r0, [r6, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e1      	bne.n	8008a60 <_Balloc+0x24>
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	6802      	ldr	r2, [r0, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6103      	str	r3, [r0, #16]
 8008aa8:	60c3      	str	r3, [r0, #12]
 8008aaa:	e7f8      	b.n	8008a9e <_Balloc+0x62>

08008aac <_Bfree>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ab0:	0006      	movs	r6, r0
 8008ab2:	000d      	movs	r5, r1
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	d107      	bne.n	8008ac8 <_Bfree+0x1c>
 8008ab8:	2010      	movs	r0, #16
 8008aba:	f7ff ff8f 	bl	80089dc <malloc>
 8008abe:	6270      	str	r0, [r6, #36]	; 0x24
 8008ac0:	6044      	str	r4, [r0, #4]
 8008ac2:	6084      	str	r4, [r0, #8]
 8008ac4:	6004      	str	r4, [r0, #0]
 8008ac6:	60c4      	str	r4, [r0, #12]
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	d007      	beq.n	8008adc <_Bfree+0x30>
 8008acc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ace:	686a      	ldr	r2, [r5, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	189b      	adds	r3, r3, r2
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	602a      	str	r2, [r5, #0]
 8008ada:	601d      	str	r5, [r3, #0]
 8008adc:	bd70      	pop	{r4, r5, r6, pc}

08008ade <__multadd>:
 8008ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae0:	001e      	movs	r6, r3
 8008ae2:	2314      	movs	r3, #20
 8008ae4:	469c      	mov	ip, r3
 8008ae6:	0007      	movs	r7, r0
 8008ae8:	000c      	movs	r4, r1
 8008aea:	2000      	movs	r0, #0
 8008aec:	690d      	ldr	r5, [r1, #16]
 8008aee:	448c      	add	ip, r1
 8008af0:	4663      	mov	r3, ip
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3001      	adds	r0, #1
 8008af6:	b299      	uxth	r1, r3
 8008af8:	4663      	mov	r3, ip
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4351      	muls	r1, r2
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	4353      	muls	r3, r2
 8008b02:	1989      	adds	r1, r1, r6
 8008b04:	0c0e      	lsrs	r6, r1, #16
 8008b06:	199b      	adds	r3, r3, r6
 8008b08:	b289      	uxth	r1, r1
 8008b0a:	0c1e      	lsrs	r6, r3, #16
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	185b      	adds	r3, r3, r1
 8008b10:	4661      	mov	r1, ip
 8008b12:	c108      	stmia	r1!, {r3}
 8008b14:	468c      	mov	ip, r1
 8008b16:	4285      	cmp	r5, r0
 8008b18:	dcea      	bgt.n	8008af0 <__multadd+0x12>
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d01b      	beq.n	8008b56 <__multadd+0x78>
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	dc12      	bgt.n	8008b4a <__multadd+0x6c>
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	0038      	movs	r0, r7
 8008b28:	1c59      	adds	r1, r3, #1
 8008b2a:	f7ff ff87 	bl	8008a3c <_Balloc>
 8008b2e:	0021      	movs	r1, r4
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	9001      	str	r0, [sp, #4]
 8008b34:	1c9a      	adds	r2, r3, #2
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	310c      	adds	r1, #12
 8008b3a:	300c      	adds	r0, #12
 8008b3c:	f7ff ff75 	bl	8008a2a <memcpy>
 8008b40:	0021      	movs	r1, r4
 8008b42:	0038      	movs	r0, r7
 8008b44:	f7ff ffb2 	bl	8008aac <_Bfree>
 8008b48:	9c01      	ldr	r4, [sp, #4]
 8008b4a:	1d2b      	adds	r3, r5, #4
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	18e3      	adds	r3, r4, r3
 8008b50:	3501      	adds	r5, #1
 8008b52:	605e      	str	r6, [r3, #4]
 8008b54:	6125      	str	r5, [r4, #16]
 8008b56:	0020      	movs	r0, r4
 8008b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008b5a <__s2b>:
 8008b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b5c:	0006      	movs	r6, r0
 8008b5e:	0018      	movs	r0, r3
 8008b60:	000c      	movs	r4, r1
 8008b62:	3008      	adds	r0, #8
 8008b64:	2109      	movs	r1, #9
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	0015      	movs	r5, r2
 8008b6a:	f7f7 fb67 	bl	800023c <__divsi3>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	2100      	movs	r1, #0
 8008b72:	4283      	cmp	r3, r0
 8008b74:	db1f      	blt.n	8008bb6 <__s2b+0x5c>
 8008b76:	0030      	movs	r0, r6
 8008b78:	f7ff ff60 	bl	8008a3c <_Balloc>
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	6143      	str	r3, [r0, #20]
 8008b80:	2301      	movs	r3, #1
 8008b82:	6103      	str	r3, [r0, #16]
 8008b84:	2d09      	cmp	r5, #9
 8008b86:	dd19      	ble.n	8008bbc <__s2b+0x62>
 8008b88:	0023      	movs	r3, r4
 8008b8a:	3309      	adds	r3, #9
 8008b8c:	001f      	movs	r7, r3
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	1964      	adds	r4, r4, r5
 8008b92:	783b      	ldrb	r3, [r7, #0]
 8008b94:	0001      	movs	r1, r0
 8008b96:	3b30      	subs	r3, #48	; 0x30
 8008b98:	220a      	movs	r2, #10
 8008b9a:	0030      	movs	r0, r6
 8008b9c:	3701      	adds	r7, #1
 8008b9e:	f7ff ff9e 	bl	8008ade <__multadd>
 8008ba2:	42a7      	cmp	r7, r4
 8008ba4:	d1f5      	bne.n	8008b92 <__s2b+0x38>
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	195c      	adds	r4, r3, r5
 8008baa:	3c08      	subs	r4, #8
 8008bac:	002f      	movs	r7, r5
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	429f      	cmp	r7, r3
 8008bb2:	db06      	blt.n	8008bc2 <__s2b+0x68>
 8008bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	3101      	adds	r1, #1
 8008bba:	e7da      	b.n	8008b72 <__s2b+0x18>
 8008bbc:	340a      	adds	r4, #10
 8008bbe:	2509      	movs	r5, #9
 8008bc0:	e7f4      	b.n	8008bac <__s2b+0x52>
 8008bc2:	1b63      	subs	r3, r4, r5
 8008bc4:	5ddb      	ldrb	r3, [r3, r7]
 8008bc6:	0001      	movs	r1, r0
 8008bc8:	3b30      	subs	r3, #48	; 0x30
 8008bca:	220a      	movs	r2, #10
 8008bcc:	0030      	movs	r0, r6
 8008bce:	f7ff ff86 	bl	8008ade <__multadd>
 8008bd2:	3701      	adds	r7, #1
 8008bd4:	e7eb      	b.n	8008bae <__s2b+0x54>

08008bd6 <__hi0bits>:
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	0c02      	lsrs	r2, r0, #16
 8008bda:	2000      	movs	r0, #0
 8008bdc:	4282      	cmp	r2, r0
 8008bde:	d101      	bne.n	8008be4 <__hi0bits+0xe>
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	3010      	adds	r0, #16
 8008be4:	0e1a      	lsrs	r2, r3, #24
 8008be6:	d101      	bne.n	8008bec <__hi0bits+0x16>
 8008be8:	3008      	adds	r0, #8
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	0f1a      	lsrs	r2, r3, #28
 8008bee:	d101      	bne.n	8008bf4 <__hi0bits+0x1e>
 8008bf0:	3004      	adds	r0, #4
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	0f9a      	lsrs	r2, r3, #30
 8008bf6:	d101      	bne.n	8008bfc <__hi0bits+0x26>
 8008bf8:	3002      	adds	r0, #2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	db03      	blt.n	8008c08 <__hi0bits+0x32>
 8008c00:	3001      	adds	r0, #1
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	d400      	bmi.n	8008c08 <__hi0bits+0x32>
 8008c06:	2020      	movs	r0, #32
 8008c08:	4770      	bx	lr

08008c0a <__lo0bits>:
 8008c0a:	2207      	movs	r2, #7
 8008c0c:	6803      	ldr	r3, [r0, #0]
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	0001      	movs	r1, r0
 8008c12:	401a      	ands	r2, r3
 8008c14:	d00d      	beq.n	8008c32 <__lo0bits+0x28>
 8008c16:	2401      	movs	r4, #1
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4223      	tst	r3, r4
 8008c1c:	d105      	bne.n	8008c2a <__lo0bits+0x20>
 8008c1e:	3002      	adds	r0, #2
 8008c20:	4203      	tst	r3, r0
 8008c22:	d003      	beq.n	8008c2c <__lo0bits+0x22>
 8008c24:	40e3      	lsrs	r3, r4
 8008c26:	0020      	movs	r0, r4
 8008c28:	600b      	str	r3, [r1, #0]
 8008c2a:	bd10      	pop	{r4, pc}
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	600b      	str	r3, [r1, #0]
 8008c30:	e7fb      	b.n	8008c2a <__lo0bits+0x20>
 8008c32:	b29c      	uxth	r4, r3
 8008c34:	0010      	movs	r0, r2
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	d101      	bne.n	8008c3e <__lo0bits+0x34>
 8008c3a:	2010      	movs	r0, #16
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	d101      	bne.n	8008c48 <__lo0bits+0x3e>
 8008c44:	3008      	adds	r0, #8
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	071a      	lsls	r2, r3, #28
 8008c4a:	d101      	bne.n	8008c50 <__lo0bits+0x46>
 8008c4c:	3004      	adds	r0, #4
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	079a      	lsls	r2, r3, #30
 8008c52:	d101      	bne.n	8008c58 <__lo0bits+0x4e>
 8008c54:	3002      	adds	r0, #2
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	07da      	lsls	r2, r3, #31
 8008c5a:	d4e8      	bmi.n	8008c2e <__lo0bits+0x24>
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	d001      	beq.n	8008c64 <__lo0bits+0x5a>
 8008c60:	3001      	adds	r0, #1
 8008c62:	e7e4      	b.n	8008c2e <__lo0bits+0x24>
 8008c64:	2020      	movs	r0, #32
 8008c66:	e7e0      	b.n	8008c2a <__lo0bits+0x20>

08008c68 <__i2b>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	000c      	movs	r4, r1
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	f7ff fee5 	bl	8008a3c <_Balloc>
 8008c72:	2301      	movs	r3, #1
 8008c74:	6144      	str	r4, [r0, #20]
 8008c76:	6103      	str	r3, [r0, #16]
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <__multiply>:
 8008c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7c:	690b      	ldr	r3, [r1, #16]
 8008c7e:	0014      	movs	r4, r2
 8008c80:	6912      	ldr	r2, [r2, #16]
 8008c82:	b089      	sub	sp, #36	; 0x24
 8008c84:	000d      	movs	r5, r1
 8008c86:	4293      	cmp	r3, r2
 8008c88:	da01      	bge.n	8008c8e <__multiply+0x14>
 8008c8a:	0025      	movs	r5, r4
 8008c8c:	000c      	movs	r4, r1
 8008c8e:	692f      	ldr	r7, [r5, #16]
 8008c90:	6926      	ldr	r6, [r4, #16]
 8008c92:	6869      	ldr	r1, [r5, #4]
 8008c94:	19bb      	adds	r3, r7, r6
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68ab      	ldr	r3, [r5, #8]
 8008c9a:	19ba      	adds	r2, r7, r6
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	da00      	bge.n	8008ca2 <__multiply+0x28>
 8008ca0:	3101      	adds	r1, #1
 8008ca2:	f7ff fecb 	bl	8008a3c <_Balloc>
 8008ca6:	0002      	movs	r2, r0
 8008ca8:	19bb      	adds	r3, r7, r6
 8008caa:	3214      	adds	r2, #20
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	18d3      	adds	r3, r2, r3
 8008cb0:	469c      	mov	ip, r3
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	0013      	movs	r3, r2
 8008cb6:	9004      	str	r0, [sp, #16]
 8008cb8:	4563      	cmp	r3, ip
 8008cba:	d31d      	bcc.n	8008cf8 <__multiply+0x7e>
 8008cbc:	3514      	adds	r5, #20
 8008cbe:	00bf      	lsls	r7, r7, #2
 8008cc0:	19eb      	adds	r3, r5, r7
 8008cc2:	3414      	adds	r4, #20
 8008cc4:	00b6      	lsls	r6, r6, #2
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	19a3      	adds	r3, r4, r6
 8008cca:	9503      	str	r5, [sp, #12]
 8008ccc:	9401      	str	r4, [sp, #4]
 8008cce:	9307      	str	r3, [sp, #28]
 8008cd0:	9b07      	ldr	r3, [sp, #28]
 8008cd2:	9901      	ldr	r1, [sp, #4]
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	d311      	bcc.n	8008cfc <__multiply+0x82>
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	dd06      	ble.n	8008cec <__multiply+0x72>
 8008cde:	2304      	movs	r3, #4
 8008ce0:	425b      	negs	r3, r3
 8008ce2:	449c      	add	ip, r3
 8008ce4:	4663      	mov	r3, ip
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d051      	beq.n	8008d90 <__multiply+0x116>
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	9a02      	ldr	r2, [sp, #8]
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	611a      	str	r2, [r3, #16]
 8008cf4:	b009      	add	sp, #36	; 0x24
 8008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf8:	c302      	stmia	r3!, {r1}
 8008cfa:	e7dd      	b.n	8008cb8 <__multiply+0x3e>
 8008cfc:	9b01      	ldr	r3, [sp, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	b298      	uxth	r0, r3
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d01c      	beq.n	8008d40 <__multiply+0xc6>
 8008d06:	0015      	movs	r5, r2
 8008d08:	2600      	movs	r6, #0
 8008d0a:	9f03      	ldr	r7, [sp, #12]
 8008d0c:	cf02      	ldmia	r7!, {r1}
 8008d0e:	682c      	ldr	r4, [r5, #0]
 8008d10:	b28b      	uxth	r3, r1
 8008d12:	4343      	muls	r3, r0
 8008d14:	0c09      	lsrs	r1, r1, #16
 8008d16:	4341      	muls	r1, r0
 8008d18:	b2a4      	uxth	r4, r4
 8008d1a:	191b      	adds	r3, r3, r4
 8008d1c:	199b      	adds	r3, r3, r6
 8008d1e:	000e      	movs	r6, r1
 8008d20:	6829      	ldr	r1, [r5, #0]
 8008d22:	9506      	str	r5, [sp, #24]
 8008d24:	0c09      	lsrs	r1, r1, #16
 8008d26:	1871      	adds	r1, r6, r1
 8008d28:	0c1e      	lsrs	r6, r3, #16
 8008d2a:	1989      	adds	r1, r1, r6
 8008d2c:	0c0e      	lsrs	r6, r1, #16
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	0409      	lsls	r1, r1, #16
 8008d32:	430b      	orrs	r3, r1
 8008d34:	c508      	stmia	r5!, {r3}
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	42bb      	cmp	r3, r7
 8008d3a:	d8e7      	bhi.n	8008d0c <__multiply+0x92>
 8008d3c:	9b06      	ldr	r3, [sp, #24]
 8008d3e:	605e      	str	r6, [r3, #4]
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0c1d      	lsrs	r5, r3, #16
 8008d46:	d01e      	beq.n	8008d86 <__multiply+0x10c>
 8008d48:	0010      	movs	r0, r2
 8008d4a:	2700      	movs	r7, #0
 8008d4c:	6813      	ldr	r3, [r2, #0]
 8008d4e:	9e03      	ldr	r6, [sp, #12]
 8008d50:	6831      	ldr	r1, [r6, #0]
 8008d52:	6804      	ldr	r4, [r0, #0]
 8008d54:	b289      	uxth	r1, r1
 8008d56:	4369      	muls	r1, r5
 8008d58:	0c24      	lsrs	r4, r4, #16
 8008d5a:	1909      	adds	r1, r1, r4
 8008d5c:	19c9      	adds	r1, r1, r7
 8008d5e:	040f      	lsls	r7, r1, #16
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	433b      	orrs	r3, r7
 8008d64:	6003      	str	r3, [r0, #0]
 8008d66:	ce80      	ldmia	r6!, {r7}
 8008d68:	6843      	ldr	r3, [r0, #4]
 8008d6a:	0c3f      	lsrs	r7, r7, #16
 8008d6c:	436f      	muls	r7, r5
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	0c09      	lsrs	r1, r1, #16
 8008d74:	185b      	adds	r3, r3, r1
 8008d76:	9905      	ldr	r1, [sp, #20]
 8008d78:	9006      	str	r0, [sp, #24]
 8008d7a:	0c1f      	lsrs	r7, r3, #16
 8008d7c:	3004      	adds	r0, #4
 8008d7e:	42b1      	cmp	r1, r6
 8008d80:	d8e6      	bhi.n	8008d50 <__multiply+0xd6>
 8008d82:	9906      	ldr	r1, [sp, #24]
 8008d84:	604b      	str	r3, [r1, #4]
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	3204      	adds	r2, #4
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	e79f      	b.n	8008cd0 <__multiply+0x56>
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	e79f      	b.n	8008cd8 <__multiply+0x5e>

08008d98 <__pow5mult>:
 8008d98:	2303      	movs	r3, #3
 8008d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	0005      	movs	r5, r0
 8008da0:	000e      	movs	r6, r1
 8008da2:	0014      	movs	r4, r2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <__pow5mult+0x22>
 8008da8:	4922      	ldr	r1, [pc, #136]	; (8008e34 <__pow5mult+0x9c>)
 8008daa:	3b01      	subs	r3, #1
 8008dac:	009a      	lsls	r2, r3, #2
 8008dae:	5852      	ldr	r2, [r2, r1]
 8008db0:	2300      	movs	r3, #0
 8008db2:	0031      	movs	r1, r6
 8008db4:	f7ff fe93 	bl	8008ade <__multadd>
 8008db8:	0006      	movs	r6, r0
 8008dba:	10a3      	asrs	r3, r4, #2
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	d036      	beq.n	8008e2e <__pow5mult+0x96>
 8008dc0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	d107      	bne.n	8008dd6 <__pow5mult+0x3e>
 8008dc6:	2010      	movs	r0, #16
 8008dc8:	f7ff fe08 	bl	80089dc <malloc>
 8008dcc:	6268      	str	r0, [r5, #36]	; 0x24
 8008dce:	6044      	str	r4, [r0, #4]
 8008dd0:	6084      	str	r4, [r0, #8]
 8008dd2:	6004      	str	r4, [r0, #0]
 8008dd4:	60c4      	str	r4, [r0, #12]
 8008dd6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008dd8:	68bc      	ldr	r4, [r7, #8]
 8008dda:	2c00      	cmp	r4, #0
 8008ddc:	d107      	bne.n	8008dee <__pow5mult+0x56>
 8008dde:	4916      	ldr	r1, [pc, #88]	; (8008e38 <__pow5mult+0xa0>)
 8008de0:	0028      	movs	r0, r5
 8008de2:	f7ff ff41 	bl	8008c68 <__i2b>
 8008de6:	2300      	movs	r3, #0
 8008de8:	0004      	movs	r4, r0
 8008dea:	60b8      	str	r0, [r7, #8]
 8008dec:	6003      	str	r3, [r0, #0]
 8008dee:	2201      	movs	r2, #1
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	4213      	tst	r3, r2
 8008df4:	d00a      	beq.n	8008e0c <__pow5mult+0x74>
 8008df6:	0031      	movs	r1, r6
 8008df8:	0022      	movs	r2, r4
 8008dfa:	0028      	movs	r0, r5
 8008dfc:	f7ff ff3d 	bl	8008c7a <__multiply>
 8008e00:	0007      	movs	r7, r0
 8008e02:	0031      	movs	r1, r6
 8008e04:	0028      	movs	r0, r5
 8008e06:	f7ff fe51 	bl	8008aac <_Bfree>
 8008e0a:	003e      	movs	r6, r7
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	105b      	asrs	r3, r3, #1
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	d00c      	beq.n	8008e2e <__pow5mult+0x96>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d107      	bne.n	8008e2a <__pow5mult+0x92>
 8008e1a:	0022      	movs	r2, r4
 8008e1c:	0021      	movs	r1, r4
 8008e1e:	0028      	movs	r0, r5
 8008e20:	f7ff ff2b 	bl	8008c7a <__multiply>
 8008e24:	2300      	movs	r3, #0
 8008e26:	6020      	str	r0, [r4, #0]
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	0004      	movs	r4, r0
 8008e2c:	e7df      	b.n	8008dee <__pow5mult+0x56>
 8008e2e:	0030      	movs	r0, r6
 8008e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	0800a250 	.word	0x0800a250
 8008e38:	00000271 	.word	0x00000271

08008e3c <__lshift>:
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	000d      	movs	r5, r1
 8008e40:	0017      	movs	r7, r2
 8008e42:	692b      	ldr	r3, [r5, #16]
 8008e44:	1154      	asrs	r4, r2, #5
 8008e46:	b085      	sub	sp, #20
 8008e48:	18e3      	adds	r3, r4, r3
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	6849      	ldr	r1, [r1, #4]
 8008e52:	68ab      	ldr	r3, [r5, #8]
 8008e54:	9002      	str	r0, [sp, #8]
 8008e56:	9a00      	ldr	r2, [sp, #0]
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	db35      	blt.n	8008ec8 <__lshift+0x8c>
 8008e5c:	9802      	ldr	r0, [sp, #8]
 8008e5e:	f7ff fded 	bl	8008a3c <_Balloc>
 8008e62:	2300      	movs	r3, #0
 8008e64:	0002      	movs	r2, r0
 8008e66:	0006      	movs	r6, r0
 8008e68:	0019      	movs	r1, r3
 8008e6a:	3214      	adds	r2, #20
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	db2e      	blt.n	8008ece <__lshift+0x92>
 8008e70:	43e3      	mvns	r3, r4
 8008e72:	17db      	asrs	r3, r3, #31
 8008e74:	401c      	ands	r4, r3
 8008e76:	002b      	movs	r3, r5
 8008e78:	00a4      	lsls	r4, r4, #2
 8008e7a:	1914      	adds	r4, r2, r4
 8008e7c:	692a      	ldr	r2, [r5, #16]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	0092      	lsls	r2, r2, #2
 8008e82:	189a      	adds	r2, r3, r2
 8008e84:	4694      	mov	ip, r2
 8008e86:	221f      	movs	r2, #31
 8008e88:	4017      	ands	r7, r2
 8008e8a:	d024      	beq.n	8008ed6 <__lshift+0x9a>
 8008e8c:	3201      	adds	r2, #1
 8008e8e:	1bd2      	subs	r2, r2, r7
 8008e90:	9203      	str	r2, [sp, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	0020      	movs	r0, r4
 8008e98:	40b9      	lsls	r1, r7
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	c404      	stmia	r4!, {r2}
 8008e9e:	cb04      	ldmia	r3!, {r2}
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	40ca      	lsrs	r2, r1
 8008ea4:	459c      	cmp	ip, r3
 8008ea6:	d8f5      	bhi.n	8008e94 <__lshift+0x58>
 8008ea8:	6042      	str	r2, [r0, #4]
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	d002      	beq.n	8008eb4 <__lshift+0x78>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	9b00      	ldr	r3, [sp, #0]
 8008eb6:	9802      	ldr	r0, [sp, #8]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	6133      	str	r3, [r6, #16]
 8008ebc:	0029      	movs	r1, r5
 8008ebe:	f7ff fdf5 	bl	8008aac <_Bfree>
 8008ec2:	0030      	movs	r0, r6
 8008ec4:	b005      	add	sp, #20
 8008ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec8:	3101      	adds	r1, #1
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	e7c3      	b.n	8008e56 <__lshift+0x1a>
 8008ece:	0098      	lsls	r0, r3, #2
 8008ed0:	5011      	str	r1, [r2, r0]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	e7ca      	b.n	8008e6c <__lshift+0x30>
 8008ed6:	cb04      	ldmia	r3!, {r2}
 8008ed8:	c404      	stmia	r4!, {r2}
 8008eda:	459c      	cmp	ip, r3
 8008edc:	d8fb      	bhi.n	8008ed6 <__lshift+0x9a>
 8008ede:	e7e9      	b.n	8008eb4 <__lshift+0x78>

08008ee0 <__mcmp>:
 8008ee0:	690a      	ldr	r2, [r1, #16]
 8008ee2:	6903      	ldr	r3, [r0, #16]
 8008ee4:	b530      	push	{r4, r5, lr}
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	d10d      	bne.n	8008f06 <__mcmp+0x26>
 8008eea:	0092      	lsls	r2, r2, #2
 8008eec:	3014      	adds	r0, #20
 8008eee:	3114      	adds	r1, #20
 8008ef0:	1884      	adds	r4, r0, r2
 8008ef2:	1889      	adds	r1, r1, r2
 8008ef4:	3c04      	subs	r4, #4
 8008ef6:	3904      	subs	r1, #4
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	680a      	ldr	r2, [r1, #0]
 8008efc:	4295      	cmp	r5, r2
 8008efe:	d004      	beq.n	8008f0a <__mcmp+0x2a>
 8008f00:	2301      	movs	r3, #1
 8008f02:	4295      	cmp	r5, r2
 8008f04:	d304      	bcc.n	8008f10 <__mcmp+0x30>
 8008f06:	0018      	movs	r0, r3
 8008f08:	bd30      	pop	{r4, r5, pc}
 8008f0a:	42a0      	cmp	r0, r4
 8008f0c:	d3f2      	bcc.n	8008ef4 <__mcmp+0x14>
 8008f0e:	e7fa      	b.n	8008f06 <__mcmp+0x26>
 8008f10:	425b      	negs	r3, r3
 8008f12:	e7f8      	b.n	8008f06 <__mcmp+0x26>

08008f14 <__mdiff>:
 8008f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f16:	000d      	movs	r5, r1
 8008f18:	b085      	sub	sp, #20
 8008f1a:	0007      	movs	r7, r0
 8008f1c:	0011      	movs	r1, r2
 8008f1e:	0028      	movs	r0, r5
 8008f20:	0014      	movs	r4, r2
 8008f22:	f7ff ffdd 	bl	8008ee0 <__mcmp>
 8008f26:	1e06      	subs	r6, r0, #0
 8008f28:	d108      	bne.n	8008f3c <__mdiff+0x28>
 8008f2a:	0001      	movs	r1, r0
 8008f2c:	0038      	movs	r0, r7
 8008f2e:	f7ff fd85 	bl	8008a3c <_Balloc>
 8008f32:	2301      	movs	r3, #1
 8008f34:	6146      	str	r6, [r0, #20]
 8008f36:	6103      	str	r3, [r0, #16]
 8008f38:	b005      	add	sp, #20
 8008f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	2800      	cmp	r0, #0
 8008f42:	db04      	blt.n	8008f4e <__mdiff+0x3a>
 8008f44:	0023      	movs	r3, r4
 8008f46:	002c      	movs	r4, r5
 8008f48:	001d      	movs	r5, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	6861      	ldr	r1, [r4, #4]
 8008f50:	0038      	movs	r0, r7
 8008f52:	f7ff fd73 	bl	8008a3c <_Balloc>
 8008f56:	002f      	movs	r7, r5
 8008f58:	2200      	movs	r2, #0
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	6926      	ldr	r6, [r4, #16]
 8008f5e:	60c3      	str	r3, [r0, #12]
 8008f60:	3414      	adds	r4, #20
 8008f62:	00b3      	lsls	r3, r6, #2
 8008f64:	18e3      	adds	r3, r4, r3
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	692b      	ldr	r3, [r5, #16]
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	18fb      	adds	r3, r7, r3
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	0003      	movs	r3, r0
 8008f74:	4694      	mov	ip, r2
 8008f76:	3314      	adds	r3, #20
 8008f78:	cc20      	ldmia	r4!, {r5}
 8008f7a:	cf04      	ldmia	r7!, {r2}
 8008f7c:	9201      	str	r2, [sp, #4]
 8008f7e:	b2aa      	uxth	r2, r5
 8008f80:	4494      	add	ip, r2
 8008f82:	466a      	mov	r2, sp
 8008f84:	4661      	mov	r1, ip
 8008f86:	8892      	ldrh	r2, [r2, #4]
 8008f88:	0c2d      	lsrs	r5, r5, #16
 8008f8a:	1a8a      	subs	r2, r1, r2
 8008f8c:	9901      	ldr	r1, [sp, #4]
 8008f8e:	0c09      	lsrs	r1, r1, #16
 8008f90:	1a69      	subs	r1, r5, r1
 8008f92:	1415      	asrs	r5, r2, #16
 8008f94:	1949      	adds	r1, r1, r5
 8008f96:	140d      	asrs	r5, r1, #16
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	0409      	lsls	r1, r1, #16
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	9a03      	ldr	r2, [sp, #12]
 8008fa2:	46ac      	mov	ip, r5
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	42ba      	cmp	r2, r7
 8008fa8:	d8e6      	bhi.n	8008f78 <__mdiff+0x64>
 8008faa:	9902      	ldr	r1, [sp, #8]
 8008fac:	001a      	movs	r2, r3
 8008fae:	428c      	cmp	r4, r1
 8008fb0:	d305      	bcc.n	8008fbe <__mdiff+0xaa>
 8008fb2:	3a04      	subs	r2, #4
 8008fb4:	6813      	ldr	r3, [r2, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00e      	beq.n	8008fd8 <__mdiff+0xc4>
 8008fba:	6106      	str	r6, [r0, #16]
 8008fbc:	e7bc      	b.n	8008f38 <__mdiff+0x24>
 8008fbe:	cc04      	ldmia	r4!, {r2}
 8008fc0:	b291      	uxth	r1, r2
 8008fc2:	4461      	add	r1, ip
 8008fc4:	140d      	asrs	r5, r1, #16
 8008fc6:	0c12      	lsrs	r2, r2, #16
 8008fc8:	1952      	adds	r2, r2, r5
 8008fca:	1415      	asrs	r5, r2, #16
 8008fcc:	b289      	uxth	r1, r1
 8008fce:	0412      	lsls	r2, r2, #16
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	46ac      	mov	ip, r5
 8008fd4:	c304      	stmia	r3!, {r2}
 8008fd6:	e7e8      	b.n	8008faa <__mdiff+0x96>
 8008fd8:	3e01      	subs	r6, #1
 8008fda:	e7ea      	b.n	8008fb2 <__mdiff+0x9e>

08008fdc <__ulp>:
 8008fdc:	000b      	movs	r3, r1
 8008fde:	4910      	ldr	r1, [pc, #64]	; (8009020 <__ulp+0x44>)
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4019      	ands	r1, r3
 8008fe4:	4b0f      	ldr	r3, [pc, #60]	; (8009024 <__ulp+0x48>)
 8008fe6:	18c9      	adds	r1, r1, r3
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	dd04      	ble.n	8008ff6 <__ulp+0x1a>
 8008fec:	2200      	movs	r2, #0
 8008fee:	000b      	movs	r3, r1
 8008ff0:	0010      	movs	r0, r2
 8008ff2:	0019      	movs	r1, r3
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	4249      	negs	r1, r1
 8008ff8:	1509      	asrs	r1, r1, #20
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2913      	cmp	r1, #19
 8009000:	dc04      	bgt.n	800900c <__ulp+0x30>
 8009002:	2080      	movs	r0, #128	; 0x80
 8009004:	0300      	lsls	r0, r0, #12
 8009006:	4108      	asrs	r0, r1
 8009008:	0003      	movs	r3, r0
 800900a:	e7f1      	b.n	8008ff0 <__ulp+0x14>
 800900c:	3914      	subs	r1, #20
 800900e:	2001      	movs	r0, #1
 8009010:	291e      	cmp	r1, #30
 8009012:	dc02      	bgt.n	800901a <__ulp+0x3e>
 8009014:	241f      	movs	r4, #31
 8009016:	1a61      	subs	r1, r4, r1
 8009018:	4088      	lsls	r0, r1
 800901a:	0002      	movs	r2, r0
 800901c:	e7e8      	b.n	8008ff0 <__ulp+0x14>
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	fcc00000 	.word	0xfcc00000

08009028 <__b2d>:
 8009028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902a:	0006      	movs	r6, r0
 800902c:	6903      	ldr	r3, [r0, #16]
 800902e:	3614      	adds	r6, #20
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	18f3      	adds	r3, r6, r3
 8009034:	1f1d      	subs	r5, r3, #4
 8009036:	682c      	ldr	r4, [r5, #0]
 8009038:	000f      	movs	r7, r1
 800903a:	0020      	movs	r0, r4
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	f7ff fdca 	bl	8008bd6 <__hi0bits>
 8009042:	2320      	movs	r3, #32
 8009044:	1a1b      	subs	r3, r3, r0
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	491c      	ldr	r1, [pc, #112]	; (80090bc <__b2d+0x94>)
 800904a:	280a      	cmp	r0, #10
 800904c:	dc16      	bgt.n	800907c <__b2d+0x54>
 800904e:	230b      	movs	r3, #11
 8009050:	0027      	movs	r7, r4
 8009052:	1a1b      	subs	r3, r3, r0
 8009054:	40df      	lsrs	r7, r3
 8009056:	4339      	orrs	r1, r7
 8009058:	469c      	mov	ip, r3
 800905a:	000b      	movs	r3, r1
 800905c:	2100      	movs	r1, #0
 800905e:	42ae      	cmp	r6, r5
 8009060:	d202      	bcs.n	8009068 <__b2d+0x40>
 8009062:	9901      	ldr	r1, [sp, #4]
 8009064:	3908      	subs	r1, #8
 8009066:	6809      	ldr	r1, [r1, #0]
 8009068:	3015      	adds	r0, #21
 800906a:	4084      	lsls	r4, r0
 800906c:	4660      	mov	r0, ip
 800906e:	40c1      	lsrs	r1, r0
 8009070:	430c      	orrs	r4, r1
 8009072:	0022      	movs	r2, r4
 8009074:	0010      	movs	r0, r2
 8009076:	0019      	movs	r1, r3
 8009078:	b003      	add	sp, #12
 800907a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907c:	2700      	movs	r7, #0
 800907e:	42ae      	cmp	r6, r5
 8009080:	d202      	bcs.n	8009088 <__b2d+0x60>
 8009082:	9d01      	ldr	r5, [sp, #4]
 8009084:	3d08      	subs	r5, #8
 8009086:	682f      	ldr	r7, [r5, #0]
 8009088:	380b      	subs	r0, #11
 800908a:	4684      	mov	ip, r0
 800908c:	1e03      	subs	r3, r0, #0
 800908e:	d012      	beq.n	80090b6 <__b2d+0x8e>
 8009090:	409c      	lsls	r4, r3
 8009092:	2020      	movs	r0, #32
 8009094:	4321      	orrs	r1, r4
 8009096:	003c      	movs	r4, r7
 8009098:	1ac0      	subs	r0, r0, r3
 800909a:	40c4      	lsrs	r4, r0
 800909c:	4321      	orrs	r1, r4
 800909e:	000b      	movs	r3, r1
 80090a0:	2100      	movs	r1, #0
 80090a2:	42b5      	cmp	r5, r6
 80090a4:	d901      	bls.n	80090aa <__b2d+0x82>
 80090a6:	3d04      	subs	r5, #4
 80090a8:	6829      	ldr	r1, [r5, #0]
 80090aa:	4664      	mov	r4, ip
 80090ac:	40c1      	lsrs	r1, r0
 80090ae:	40a7      	lsls	r7, r4
 80090b0:	430f      	orrs	r7, r1
 80090b2:	003a      	movs	r2, r7
 80090b4:	e7de      	b.n	8009074 <__b2d+0x4c>
 80090b6:	4321      	orrs	r1, r4
 80090b8:	000b      	movs	r3, r1
 80090ba:	e7fa      	b.n	80090b2 <__b2d+0x8a>
 80090bc:	3ff00000 	.word	0x3ff00000

080090c0 <__d2b>:
 80090c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c2:	001d      	movs	r5, r3
 80090c4:	2101      	movs	r1, #1
 80090c6:	0014      	movs	r4, r2
 80090c8:	9f08      	ldr	r7, [sp, #32]
 80090ca:	f7ff fcb7 	bl	8008a3c <_Balloc>
 80090ce:	032b      	lsls	r3, r5, #12
 80090d0:	006d      	lsls	r5, r5, #1
 80090d2:	0006      	movs	r6, r0
 80090d4:	0b1b      	lsrs	r3, r3, #12
 80090d6:	0d6d      	lsrs	r5, r5, #21
 80090d8:	d124      	bne.n	8009124 <__d2b+0x64>
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d027      	beq.n	8009130 <__d2b+0x70>
 80090e0:	4668      	mov	r0, sp
 80090e2:	9400      	str	r4, [sp, #0]
 80090e4:	f7ff fd91 	bl	8008c0a <__lo0bits>
 80090e8:	9c00      	ldr	r4, [sp, #0]
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d01e      	beq.n	800912c <__d2b+0x6c>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	2120      	movs	r1, #32
 80090f2:	001a      	movs	r2, r3
 80090f4:	1a09      	subs	r1, r1, r0
 80090f6:	408a      	lsls	r2, r1
 80090f8:	40c3      	lsrs	r3, r0
 80090fa:	4322      	orrs	r2, r4
 80090fc:	6172      	str	r2, [r6, #20]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	9c01      	ldr	r4, [sp, #4]
 8009102:	61b4      	str	r4, [r6, #24]
 8009104:	1e63      	subs	r3, r4, #1
 8009106:	419c      	sbcs	r4, r3
 8009108:	3401      	adds	r4, #1
 800910a:	6134      	str	r4, [r6, #16]
 800910c:	2d00      	cmp	r5, #0
 800910e:	d018      	beq.n	8009142 <__d2b+0x82>
 8009110:	4b12      	ldr	r3, [pc, #72]	; (800915c <__d2b+0x9c>)
 8009112:	18ed      	adds	r5, r5, r3
 8009114:	2335      	movs	r3, #53	; 0x35
 8009116:	182d      	adds	r5, r5, r0
 8009118:	603d      	str	r5, [r7, #0]
 800911a:	1a18      	subs	r0, r3, r0
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	6018      	str	r0, [r3, #0]
 8009120:	0030      	movs	r0, r6
 8009122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009124:	2280      	movs	r2, #128	; 0x80
 8009126:	0352      	lsls	r2, r2, #13
 8009128:	4313      	orrs	r3, r2
 800912a:	e7d6      	b.n	80090da <__d2b+0x1a>
 800912c:	6174      	str	r4, [r6, #20]
 800912e:	e7e7      	b.n	8009100 <__d2b+0x40>
 8009130:	a801      	add	r0, sp, #4
 8009132:	f7ff fd6a 	bl	8008c0a <__lo0bits>
 8009136:	2401      	movs	r4, #1
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	6134      	str	r4, [r6, #16]
 800913c:	6173      	str	r3, [r6, #20]
 800913e:	3020      	adds	r0, #32
 8009140:	e7e4      	b.n	800910c <__d2b+0x4c>
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <__d2b+0xa0>)
 8009144:	18c0      	adds	r0, r0, r3
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <__d2b+0xa4>)
 8009148:	6038      	str	r0, [r7, #0]
 800914a:	18e3      	adds	r3, r4, r3
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	18f3      	adds	r3, r6, r3
 8009150:	6958      	ldr	r0, [r3, #20]
 8009152:	f7ff fd40 	bl	8008bd6 <__hi0bits>
 8009156:	0164      	lsls	r4, r4, #5
 8009158:	1a20      	subs	r0, r4, r0
 800915a:	e7df      	b.n	800911c <__d2b+0x5c>
 800915c:	fffffbcd 	.word	0xfffffbcd
 8009160:	fffffbce 	.word	0xfffffbce
 8009164:	3fffffff 	.word	0x3fffffff

08009168 <__ratio>:
 8009168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916a:	b085      	sub	sp, #20
 800916c:	000f      	movs	r7, r1
 800916e:	a902      	add	r1, sp, #8
 8009170:	0006      	movs	r6, r0
 8009172:	f7ff ff59 	bl	8009028 <__b2d>
 8009176:	0004      	movs	r4, r0
 8009178:	000d      	movs	r5, r1
 800917a:	0038      	movs	r0, r7
 800917c:	a903      	add	r1, sp, #12
 800917e:	9400      	str	r4, [sp, #0]
 8009180:	9501      	str	r5, [sp, #4]
 8009182:	f7ff ff51 	bl	8009028 <__b2d>
 8009186:	6936      	ldr	r6, [r6, #16]
 8009188:	693f      	ldr	r7, [r7, #16]
 800918a:	0002      	movs	r2, r0
 800918c:	1bf7      	subs	r7, r6, r7
 800918e:	017e      	lsls	r6, r7, #5
 8009190:	46b4      	mov	ip, r6
 8009192:	9f03      	ldr	r7, [sp, #12]
 8009194:	9e02      	ldr	r6, [sp, #8]
 8009196:	000b      	movs	r3, r1
 8009198:	1bf6      	subs	r6, r6, r7
 800919a:	4466      	add	r6, ip
 800919c:	0537      	lsls	r7, r6, #20
 800919e:	2e00      	cmp	r6, #0
 80091a0:	dd07      	ble.n	80091b2 <__ratio+0x4a>
 80091a2:	1979      	adds	r1, r7, r5
 80091a4:	9101      	str	r1, [sp, #4]
 80091a6:	9800      	ldr	r0, [sp, #0]
 80091a8:	9901      	ldr	r1, [sp, #4]
 80091aa:	f7f7 fe8d 	bl	8000ec8 <__aeabi_ddiv>
 80091ae:	b005      	add	sp, #20
 80091b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b2:	1bcb      	subs	r3, r1, r7
 80091b4:	e7f7      	b.n	80091a6 <__ratio+0x3e>

080091b6 <__copybits>:
 80091b6:	0013      	movs	r3, r2
 80091b8:	3901      	subs	r1, #1
 80091ba:	b510      	push	{r4, lr}
 80091bc:	1149      	asrs	r1, r1, #5
 80091be:	6912      	ldr	r2, [r2, #16]
 80091c0:	3101      	adds	r1, #1
 80091c2:	0089      	lsls	r1, r1, #2
 80091c4:	3314      	adds	r3, #20
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	1841      	adds	r1, r0, r1
 80091ca:	189a      	adds	r2, r3, r2
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d803      	bhi.n	80091d8 <__copybits+0x22>
 80091d0:	2300      	movs	r3, #0
 80091d2:	4281      	cmp	r1, r0
 80091d4:	d803      	bhi.n	80091de <__copybits+0x28>
 80091d6:	bd10      	pop	{r4, pc}
 80091d8:	cb10      	ldmia	r3!, {r4}
 80091da:	c010      	stmia	r0!, {r4}
 80091dc:	e7f6      	b.n	80091cc <__copybits+0x16>
 80091de:	c008      	stmia	r0!, {r3}
 80091e0:	e7f7      	b.n	80091d2 <__copybits+0x1c>

080091e2 <__any_on>:
 80091e2:	0002      	movs	r2, r0
 80091e4:	6900      	ldr	r0, [r0, #16]
 80091e6:	b510      	push	{r4, lr}
 80091e8:	3214      	adds	r2, #20
 80091ea:	114b      	asrs	r3, r1, #5
 80091ec:	4298      	cmp	r0, r3
 80091ee:	db12      	blt.n	8009216 <__any_on+0x34>
 80091f0:	dd0b      	ble.n	800920a <__any_on+0x28>
 80091f2:	201f      	movs	r0, #31
 80091f4:	4001      	ands	r1, r0
 80091f6:	d008      	beq.n	800920a <__any_on+0x28>
 80091f8:	0098      	lsls	r0, r3, #2
 80091fa:	5884      	ldr	r4, [r0, r2]
 80091fc:	0020      	movs	r0, r4
 80091fe:	40c8      	lsrs	r0, r1
 8009200:	4088      	lsls	r0, r1
 8009202:	0001      	movs	r1, r0
 8009204:	2001      	movs	r0, #1
 8009206:	428c      	cmp	r4, r1
 8009208:	d104      	bne.n	8009214 <__any_on+0x32>
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	18d3      	adds	r3, r2, r3
 800920e:	4293      	cmp	r3, r2
 8009210:	d803      	bhi.n	800921a <__any_on+0x38>
 8009212:	2000      	movs	r0, #0
 8009214:	bd10      	pop	{r4, pc}
 8009216:	0003      	movs	r3, r0
 8009218:	e7f7      	b.n	800920a <__any_on+0x28>
 800921a:	3b04      	subs	r3, #4
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	2900      	cmp	r1, #0
 8009220:	d0f5      	beq.n	800920e <__any_on+0x2c>
 8009222:	2001      	movs	r0, #1
 8009224:	e7f6      	b.n	8009214 <__any_on+0x32>

08009226 <_calloc_r>:
 8009226:	434a      	muls	r2, r1
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	0011      	movs	r1, r2
 800922c:	0014      	movs	r4, r2
 800922e:	f000 f853 	bl	80092d8 <_malloc_r>
 8009232:	1e05      	subs	r5, r0, #0
 8009234:	d003      	beq.n	800923e <_calloc_r+0x18>
 8009236:	0022      	movs	r2, r4
 8009238:	2100      	movs	r1, #0
 800923a:	f7fc fbcf 	bl	80059dc <memset>
 800923e:	0028      	movs	r0, r5
 8009240:	bd70      	pop	{r4, r5, r6, pc}
	...

08009244 <_free_r>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	0005      	movs	r5, r0
 8009248:	2900      	cmp	r1, #0
 800924a:	d010      	beq.n	800926e <_free_r+0x2a>
 800924c:	1f0c      	subs	r4, r1, #4
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	da00      	bge.n	8009256 <_free_r+0x12>
 8009254:	18e4      	adds	r4, r4, r3
 8009256:	0028      	movs	r0, r5
 8009258:	f000 fdf1 	bl	8009e3e <__malloc_lock>
 800925c:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <_free_r+0x90>)
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <_free_r+0x2c>
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	6014      	str	r4, [r2, #0]
 8009268:	0028      	movs	r0, r5
 800926a:	f000 fde9 	bl	8009e40 <__malloc_unlock>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	42a3      	cmp	r3, r4
 8009272:	d909      	bls.n	8009288 <_free_r+0x44>
 8009274:	6821      	ldr	r1, [r4, #0]
 8009276:	1860      	adds	r0, r4, r1
 8009278:	4283      	cmp	r3, r0
 800927a:	d1f3      	bne.n	8009264 <_free_r+0x20>
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	1841      	adds	r1, r0, r1
 8009282:	6021      	str	r1, [r4, #0]
 8009284:	e7ee      	b.n	8009264 <_free_r+0x20>
 8009286:	0013      	movs	r3, r2
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	2a00      	cmp	r2, #0
 800928c:	d001      	beq.n	8009292 <_free_r+0x4e>
 800928e:	42a2      	cmp	r2, r4
 8009290:	d9f9      	bls.n	8009286 <_free_r+0x42>
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	1858      	adds	r0, r3, r1
 8009296:	42a0      	cmp	r0, r4
 8009298:	d10b      	bne.n	80092b2 <_free_r+0x6e>
 800929a:	6820      	ldr	r0, [r4, #0]
 800929c:	1809      	adds	r1, r1, r0
 800929e:	1858      	adds	r0, r3, r1
 80092a0:	6019      	str	r1, [r3, #0]
 80092a2:	4282      	cmp	r2, r0
 80092a4:	d1e0      	bne.n	8009268 <_free_r+0x24>
 80092a6:	6810      	ldr	r0, [r2, #0]
 80092a8:	6852      	ldr	r2, [r2, #4]
 80092aa:	1841      	adds	r1, r0, r1
 80092ac:	6019      	str	r1, [r3, #0]
 80092ae:	605a      	str	r2, [r3, #4]
 80092b0:	e7da      	b.n	8009268 <_free_r+0x24>
 80092b2:	42a0      	cmp	r0, r4
 80092b4:	d902      	bls.n	80092bc <_free_r+0x78>
 80092b6:	230c      	movs	r3, #12
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	e7d5      	b.n	8009268 <_free_r+0x24>
 80092bc:	6821      	ldr	r1, [r4, #0]
 80092be:	1860      	adds	r0, r4, r1
 80092c0:	4282      	cmp	r2, r0
 80092c2:	d103      	bne.n	80092cc <_free_r+0x88>
 80092c4:	6810      	ldr	r0, [r2, #0]
 80092c6:	6852      	ldr	r2, [r2, #4]
 80092c8:	1841      	adds	r1, r0, r1
 80092ca:	6021      	str	r1, [r4, #0]
 80092cc:	6062      	str	r2, [r4, #4]
 80092ce:	605c      	str	r4, [r3, #4]
 80092d0:	e7ca      	b.n	8009268 <_free_r+0x24>
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	20000204 	.word	0x20000204

080092d8 <_malloc_r>:
 80092d8:	2303      	movs	r3, #3
 80092da:	b570      	push	{r4, r5, r6, lr}
 80092dc:	1ccd      	adds	r5, r1, #3
 80092de:	439d      	bics	r5, r3
 80092e0:	3508      	adds	r5, #8
 80092e2:	0006      	movs	r6, r0
 80092e4:	2d0c      	cmp	r5, #12
 80092e6:	d21e      	bcs.n	8009326 <_malloc_r+0x4e>
 80092e8:	250c      	movs	r5, #12
 80092ea:	42a9      	cmp	r1, r5
 80092ec:	d81d      	bhi.n	800932a <_malloc_r+0x52>
 80092ee:	0030      	movs	r0, r6
 80092f0:	f000 fda5 	bl	8009e3e <__malloc_lock>
 80092f4:	4a25      	ldr	r2, [pc, #148]	; (800938c <_malloc_r+0xb4>)
 80092f6:	6814      	ldr	r4, [r2, #0]
 80092f8:	0021      	movs	r1, r4
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d119      	bne.n	8009332 <_malloc_r+0x5a>
 80092fe:	4c24      	ldr	r4, [pc, #144]	; (8009390 <_malloc_r+0xb8>)
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <_malloc_r+0x36>
 8009306:	0030      	movs	r0, r6
 8009308:	f000 fae2 	bl	80098d0 <_sbrk_r>
 800930c:	6020      	str	r0, [r4, #0]
 800930e:	0029      	movs	r1, r5
 8009310:	0030      	movs	r0, r6
 8009312:	f000 fadd 	bl	80098d0 <_sbrk_r>
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	d12b      	bne.n	8009372 <_malloc_r+0x9a>
 800931a:	230c      	movs	r3, #12
 800931c:	0030      	movs	r0, r6
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	f000 fd8e 	bl	8009e40 <__malloc_unlock>
 8009324:	e003      	b.n	800932e <_malloc_r+0x56>
 8009326:	2d00      	cmp	r5, #0
 8009328:	dadf      	bge.n	80092ea <_malloc_r+0x12>
 800932a:	230c      	movs	r3, #12
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	2000      	movs	r0, #0
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	680b      	ldr	r3, [r1, #0]
 8009334:	1b5b      	subs	r3, r3, r5
 8009336:	d419      	bmi.n	800936c <_malloc_r+0x94>
 8009338:	2b0b      	cmp	r3, #11
 800933a:	d903      	bls.n	8009344 <_malloc_r+0x6c>
 800933c:	600b      	str	r3, [r1, #0]
 800933e:	18cc      	adds	r4, r1, r3
 8009340:	6025      	str	r5, [r4, #0]
 8009342:	e003      	b.n	800934c <_malloc_r+0x74>
 8009344:	684b      	ldr	r3, [r1, #4]
 8009346:	428c      	cmp	r4, r1
 8009348:	d10d      	bne.n	8009366 <_malloc_r+0x8e>
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	0030      	movs	r0, r6
 800934e:	f000 fd77 	bl	8009e40 <__malloc_unlock>
 8009352:	0020      	movs	r0, r4
 8009354:	2207      	movs	r2, #7
 8009356:	300b      	adds	r0, #11
 8009358:	1d23      	adds	r3, r4, #4
 800935a:	4390      	bics	r0, r2
 800935c:	1ac3      	subs	r3, r0, r3
 800935e:	d0e7      	beq.n	8009330 <_malloc_r+0x58>
 8009360:	425a      	negs	r2, r3
 8009362:	50e2      	str	r2, [r4, r3]
 8009364:	e7e4      	b.n	8009330 <_malloc_r+0x58>
 8009366:	6063      	str	r3, [r4, #4]
 8009368:	000c      	movs	r4, r1
 800936a:	e7ef      	b.n	800934c <_malloc_r+0x74>
 800936c:	000c      	movs	r4, r1
 800936e:	6849      	ldr	r1, [r1, #4]
 8009370:	e7c3      	b.n	80092fa <_malloc_r+0x22>
 8009372:	2303      	movs	r3, #3
 8009374:	1cc4      	adds	r4, r0, #3
 8009376:	439c      	bics	r4, r3
 8009378:	42a0      	cmp	r0, r4
 800937a:	d0e1      	beq.n	8009340 <_malloc_r+0x68>
 800937c:	1a21      	subs	r1, r4, r0
 800937e:	0030      	movs	r0, r6
 8009380:	f000 faa6 	bl	80098d0 <_sbrk_r>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d1db      	bne.n	8009340 <_malloc_r+0x68>
 8009388:	e7c7      	b.n	800931a <_malloc_r+0x42>
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	20000204 	.word	0x20000204
 8009390:	20000208 	.word	0x20000208

08009394 <__ssputs_r>:
 8009394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009396:	688e      	ldr	r6, [r1, #8]
 8009398:	b085      	sub	sp, #20
 800939a:	0007      	movs	r7, r0
 800939c:	000c      	movs	r4, r1
 800939e:	9203      	str	r2, [sp, #12]
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	429e      	cmp	r6, r3
 80093a4:	d83c      	bhi.n	8009420 <__ssputs_r+0x8c>
 80093a6:	2390      	movs	r3, #144	; 0x90
 80093a8:	898a      	ldrh	r2, [r1, #12]
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	421a      	tst	r2, r3
 80093ae:	d034      	beq.n	800941a <__ssputs_r+0x86>
 80093b0:	2503      	movs	r5, #3
 80093b2:	6909      	ldr	r1, [r1, #16]
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	1a5b      	subs	r3, r3, r1
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	6963      	ldr	r3, [r4, #20]
 80093bc:	9802      	ldr	r0, [sp, #8]
 80093be:	435d      	muls	r5, r3
 80093c0:	0feb      	lsrs	r3, r5, #31
 80093c2:	195d      	adds	r5, r3, r5
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	106d      	asrs	r5, r5, #1
 80093c8:	3301      	adds	r3, #1
 80093ca:	181b      	adds	r3, r3, r0
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	d900      	bls.n	80093d2 <__ssputs_r+0x3e>
 80093d0:	001d      	movs	r5, r3
 80093d2:	0553      	lsls	r3, r2, #21
 80093d4:	d532      	bpl.n	800943c <__ssputs_r+0xa8>
 80093d6:	0029      	movs	r1, r5
 80093d8:	0038      	movs	r0, r7
 80093da:	f7ff ff7d 	bl	80092d8 <_malloc_r>
 80093de:	1e06      	subs	r6, r0, #0
 80093e0:	d109      	bne.n	80093f6 <__ssputs_r+0x62>
 80093e2:	230c      	movs	r3, #12
 80093e4:	603b      	str	r3, [r7, #0]
 80093e6:	2340      	movs	r3, #64	; 0x40
 80093e8:	2001      	movs	r0, #1
 80093ea:	89a2      	ldrh	r2, [r4, #12]
 80093ec:	4240      	negs	r0, r0
 80093ee:	4313      	orrs	r3, r2
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	b005      	add	sp, #20
 80093f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f6:	9a02      	ldr	r2, [sp, #8]
 80093f8:	6921      	ldr	r1, [r4, #16]
 80093fa:	f7ff fb16 	bl	8008a2a <memcpy>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	4a14      	ldr	r2, [pc, #80]	; (8009454 <__ssputs_r+0xc0>)
 8009402:	401a      	ands	r2, r3
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	4313      	orrs	r3, r2
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	9b02      	ldr	r3, [sp, #8]
 800940c:	6126      	str	r6, [r4, #16]
 800940e:	18f6      	adds	r6, r6, r3
 8009410:	6026      	str	r6, [r4, #0]
 8009412:	6165      	str	r5, [r4, #20]
 8009414:	9e01      	ldr	r6, [sp, #4]
 8009416:	1aed      	subs	r5, r5, r3
 8009418:	60a5      	str	r5, [r4, #8]
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	429e      	cmp	r6, r3
 800941e:	d900      	bls.n	8009422 <__ssputs_r+0x8e>
 8009420:	9e01      	ldr	r6, [sp, #4]
 8009422:	0032      	movs	r2, r6
 8009424:	9903      	ldr	r1, [sp, #12]
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	f000 fcf6 	bl	8009e18 <memmove>
 800942c:	68a3      	ldr	r3, [r4, #8]
 800942e:	2000      	movs	r0, #0
 8009430:	1b9b      	subs	r3, r3, r6
 8009432:	60a3      	str	r3, [r4, #8]
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	199e      	adds	r6, r3, r6
 8009438:	6026      	str	r6, [r4, #0]
 800943a:	e7da      	b.n	80093f2 <__ssputs_r+0x5e>
 800943c:	002a      	movs	r2, r5
 800943e:	0038      	movs	r0, r7
 8009440:	f000 fcff 	bl	8009e42 <_realloc_r>
 8009444:	1e06      	subs	r6, r0, #0
 8009446:	d1e0      	bne.n	800940a <__ssputs_r+0x76>
 8009448:	6921      	ldr	r1, [r4, #16]
 800944a:	0038      	movs	r0, r7
 800944c:	f7ff fefa 	bl	8009244 <_free_r>
 8009450:	e7c7      	b.n	80093e2 <__ssputs_r+0x4e>
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	fffffb7f 	.word	0xfffffb7f

08009458 <_svfiprintf_r>:
 8009458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945a:	b0a1      	sub	sp, #132	; 0x84
 800945c:	9003      	str	r0, [sp, #12]
 800945e:	001d      	movs	r5, r3
 8009460:	898b      	ldrh	r3, [r1, #12]
 8009462:	000f      	movs	r7, r1
 8009464:	0016      	movs	r6, r2
 8009466:	061b      	lsls	r3, r3, #24
 8009468:	d511      	bpl.n	800948e <_svfiprintf_r+0x36>
 800946a:	690b      	ldr	r3, [r1, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10e      	bne.n	800948e <_svfiprintf_r+0x36>
 8009470:	2140      	movs	r1, #64	; 0x40
 8009472:	f7ff ff31 	bl	80092d8 <_malloc_r>
 8009476:	6038      	str	r0, [r7, #0]
 8009478:	6138      	str	r0, [r7, #16]
 800947a:	2800      	cmp	r0, #0
 800947c:	d105      	bne.n	800948a <_svfiprintf_r+0x32>
 800947e:	230c      	movs	r3, #12
 8009480:	9a03      	ldr	r2, [sp, #12]
 8009482:	3801      	subs	r0, #1
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	b021      	add	sp, #132	; 0x84
 8009488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948a:	2340      	movs	r3, #64	; 0x40
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	2300      	movs	r3, #0
 8009490:	ac08      	add	r4, sp, #32
 8009492:	6163      	str	r3, [r4, #20]
 8009494:	3320      	adds	r3, #32
 8009496:	7663      	strb	r3, [r4, #25]
 8009498:	3310      	adds	r3, #16
 800949a:	76a3      	strb	r3, [r4, #26]
 800949c:	9507      	str	r5, [sp, #28]
 800949e:	0035      	movs	r5, r6
 80094a0:	782b      	ldrb	r3, [r5, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <_svfiprintf_r+0x52>
 80094a6:	2b25      	cmp	r3, #37	; 0x25
 80094a8:	d146      	bne.n	8009538 <_svfiprintf_r+0xe0>
 80094aa:	1bab      	subs	r3, r5, r6
 80094ac:	9305      	str	r3, [sp, #20]
 80094ae:	d00c      	beq.n	80094ca <_svfiprintf_r+0x72>
 80094b0:	0032      	movs	r2, r6
 80094b2:	0039      	movs	r1, r7
 80094b4:	9803      	ldr	r0, [sp, #12]
 80094b6:	f7ff ff6d 	bl	8009394 <__ssputs_r>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d100      	bne.n	80094c0 <_svfiprintf_r+0x68>
 80094be:	e0ae      	b.n	800961e <_svfiprintf_r+0x1c6>
 80094c0:	6962      	ldr	r2, [r4, #20]
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	4694      	mov	ip, r2
 80094c6:	4463      	add	r3, ip
 80094c8:	6163      	str	r3, [r4, #20]
 80094ca:	782b      	ldrb	r3, [r5, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d100      	bne.n	80094d2 <_svfiprintf_r+0x7a>
 80094d0:	e0a5      	b.n	800961e <_svfiprintf_r+0x1c6>
 80094d2:	2201      	movs	r2, #1
 80094d4:	2300      	movs	r3, #0
 80094d6:	4252      	negs	r2, r2
 80094d8:	6062      	str	r2, [r4, #4]
 80094da:	a904      	add	r1, sp, #16
 80094dc:	3254      	adds	r2, #84	; 0x54
 80094de:	1852      	adds	r2, r2, r1
 80094e0:	1c6e      	adds	r6, r5, #1
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	60e3      	str	r3, [r4, #12]
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	7013      	strb	r3, [r2, #0]
 80094ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80094ec:	7831      	ldrb	r1, [r6, #0]
 80094ee:	2205      	movs	r2, #5
 80094f0:	4853      	ldr	r0, [pc, #332]	; (8009640 <_svfiprintf_r+0x1e8>)
 80094f2:	f7ff fa8f 	bl	8008a14 <memchr>
 80094f6:	1c75      	adds	r5, r6, #1
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d11f      	bne.n	800953c <_svfiprintf_r+0xe4>
 80094fc:	6822      	ldr	r2, [r4, #0]
 80094fe:	06d3      	lsls	r3, r2, #27
 8009500:	d504      	bpl.n	800950c <_svfiprintf_r+0xb4>
 8009502:	2353      	movs	r3, #83	; 0x53
 8009504:	a904      	add	r1, sp, #16
 8009506:	185b      	adds	r3, r3, r1
 8009508:	2120      	movs	r1, #32
 800950a:	7019      	strb	r1, [r3, #0]
 800950c:	0713      	lsls	r3, r2, #28
 800950e:	d504      	bpl.n	800951a <_svfiprintf_r+0xc2>
 8009510:	2353      	movs	r3, #83	; 0x53
 8009512:	a904      	add	r1, sp, #16
 8009514:	185b      	adds	r3, r3, r1
 8009516:	212b      	movs	r1, #43	; 0x2b
 8009518:	7019      	strb	r1, [r3, #0]
 800951a:	7833      	ldrb	r3, [r6, #0]
 800951c:	2b2a      	cmp	r3, #42	; 0x2a
 800951e:	d016      	beq.n	800954e <_svfiprintf_r+0xf6>
 8009520:	0035      	movs	r5, r6
 8009522:	2100      	movs	r1, #0
 8009524:	200a      	movs	r0, #10
 8009526:	68e3      	ldr	r3, [r4, #12]
 8009528:	782a      	ldrb	r2, [r5, #0]
 800952a:	1c6e      	adds	r6, r5, #1
 800952c:	3a30      	subs	r2, #48	; 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d94e      	bls.n	80095d0 <_svfiprintf_r+0x178>
 8009532:	2900      	cmp	r1, #0
 8009534:	d018      	beq.n	8009568 <_svfiprintf_r+0x110>
 8009536:	e010      	b.n	800955a <_svfiprintf_r+0x102>
 8009538:	3501      	adds	r5, #1
 800953a:	e7b1      	b.n	80094a0 <_svfiprintf_r+0x48>
 800953c:	4b40      	ldr	r3, [pc, #256]	; (8009640 <_svfiprintf_r+0x1e8>)
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	1ac0      	subs	r0, r0, r3
 8009542:	2301      	movs	r3, #1
 8009544:	4083      	lsls	r3, r0
 8009546:	4313      	orrs	r3, r2
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	002e      	movs	r6, r5
 800954c:	e7ce      	b.n	80094ec <_svfiprintf_r+0x94>
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	9107      	str	r1, [sp, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	db01      	blt.n	800955e <_svfiprintf_r+0x106>
 800955a:	930b      	str	r3, [sp, #44]	; 0x2c
 800955c:	e004      	b.n	8009568 <_svfiprintf_r+0x110>
 800955e:	425b      	negs	r3, r3
 8009560:	60e3      	str	r3, [r4, #12]
 8009562:	2302      	movs	r3, #2
 8009564:	4313      	orrs	r3, r2
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	782b      	ldrb	r3, [r5, #0]
 800956a:	2b2e      	cmp	r3, #46	; 0x2e
 800956c:	d10a      	bne.n	8009584 <_svfiprintf_r+0x12c>
 800956e:	786b      	ldrb	r3, [r5, #1]
 8009570:	2b2a      	cmp	r3, #42	; 0x2a
 8009572:	d135      	bne.n	80095e0 <_svfiprintf_r+0x188>
 8009574:	9b07      	ldr	r3, [sp, #28]
 8009576:	3502      	adds	r5, #2
 8009578:	1d1a      	adds	r2, r3, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	9207      	str	r2, [sp, #28]
 800957e:	2b00      	cmp	r3, #0
 8009580:	db2b      	blt.n	80095da <_svfiprintf_r+0x182>
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	4e2f      	ldr	r6, [pc, #188]	; (8009644 <_svfiprintf_r+0x1ec>)
 8009586:	7829      	ldrb	r1, [r5, #0]
 8009588:	2203      	movs	r2, #3
 800958a:	0030      	movs	r0, r6
 800958c:	f7ff fa42 	bl	8008a14 <memchr>
 8009590:	2800      	cmp	r0, #0
 8009592:	d006      	beq.n	80095a2 <_svfiprintf_r+0x14a>
 8009594:	2340      	movs	r3, #64	; 0x40
 8009596:	1b80      	subs	r0, r0, r6
 8009598:	4083      	lsls	r3, r0
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	3501      	adds	r5, #1
 800959e:	4313      	orrs	r3, r2
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	7829      	ldrb	r1, [r5, #0]
 80095a4:	2206      	movs	r2, #6
 80095a6:	4828      	ldr	r0, [pc, #160]	; (8009648 <_svfiprintf_r+0x1f0>)
 80095a8:	1c6e      	adds	r6, r5, #1
 80095aa:	7621      	strb	r1, [r4, #24]
 80095ac:	f7ff fa32 	bl	8008a14 <memchr>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d03c      	beq.n	800962e <_svfiprintf_r+0x1d6>
 80095b4:	4b25      	ldr	r3, [pc, #148]	; (800964c <_svfiprintf_r+0x1f4>)
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d125      	bne.n	8009606 <_svfiprintf_r+0x1ae>
 80095ba:	2207      	movs	r2, #7
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	3307      	adds	r3, #7
 80095c0:	4393      	bics	r3, r2
 80095c2:	3308      	adds	r3, #8
 80095c4:	9307      	str	r3, [sp, #28]
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	9a04      	ldr	r2, [sp, #16]
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	6163      	str	r3, [r4, #20]
 80095ce:	e766      	b.n	800949e <_svfiprintf_r+0x46>
 80095d0:	4343      	muls	r3, r0
 80095d2:	2101      	movs	r1, #1
 80095d4:	189b      	adds	r3, r3, r2
 80095d6:	0035      	movs	r5, r6
 80095d8:	e7a6      	b.n	8009528 <_svfiprintf_r+0xd0>
 80095da:	2301      	movs	r3, #1
 80095dc:	425b      	negs	r3, r3
 80095de:	e7d0      	b.n	8009582 <_svfiprintf_r+0x12a>
 80095e0:	2300      	movs	r3, #0
 80095e2:	200a      	movs	r0, #10
 80095e4:	001a      	movs	r2, r3
 80095e6:	3501      	adds	r5, #1
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	7829      	ldrb	r1, [r5, #0]
 80095ec:	1c6e      	adds	r6, r5, #1
 80095ee:	3930      	subs	r1, #48	; 0x30
 80095f0:	2909      	cmp	r1, #9
 80095f2:	d903      	bls.n	80095fc <_svfiprintf_r+0x1a4>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0c5      	beq.n	8009584 <_svfiprintf_r+0x12c>
 80095f8:	9209      	str	r2, [sp, #36]	; 0x24
 80095fa:	e7c3      	b.n	8009584 <_svfiprintf_r+0x12c>
 80095fc:	4342      	muls	r2, r0
 80095fe:	2301      	movs	r3, #1
 8009600:	1852      	adds	r2, r2, r1
 8009602:	0035      	movs	r5, r6
 8009604:	e7f1      	b.n	80095ea <_svfiprintf_r+0x192>
 8009606:	ab07      	add	r3, sp, #28
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	003a      	movs	r2, r7
 800960c:	4b10      	ldr	r3, [pc, #64]	; (8009650 <_svfiprintf_r+0x1f8>)
 800960e:	0021      	movs	r1, r4
 8009610:	9803      	ldr	r0, [sp, #12]
 8009612:	f7fc fa87 	bl	8005b24 <_printf_float>
 8009616:	9004      	str	r0, [sp, #16]
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	3301      	adds	r3, #1
 800961c:	d1d3      	bne.n	80095c6 <_svfiprintf_r+0x16e>
 800961e:	89bb      	ldrh	r3, [r7, #12]
 8009620:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009622:	065b      	lsls	r3, r3, #25
 8009624:	d400      	bmi.n	8009628 <_svfiprintf_r+0x1d0>
 8009626:	e72e      	b.n	8009486 <_svfiprintf_r+0x2e>
 8009628:	2001      	movs	r0, #1
 800962a:	4240      	negs	r0, r0
 800962c:	e72b      	b.n	8009486 <_svfiprintf_r+0x2e>
 800962e:	ab07      	add	r3, sp, #28
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	003a      	movs	r2, r7
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <_svfiprintf_r+0x1f8>)
 8009636:	0021      	movs	r1, r4
 8009638:	9803      	ldr	r0, [sp, #12]
 800963a:	f7fc fd2d 	bl	8006098 <_printf_i>
 800963e:	e7ea      	b.n	8009616 <_svfiprintf_r+0x1be>
 8009640:	0800a25c 	.word	0x0800a25c
 8009644:	0800a262 	.word	0x0800a262
 8009648:	0800a266 	.word	0x0800a266
 800964c:	08005b25 	.word	0x08005b25
 8009650:	08009395 	.word	0x08009395

08009654 <__sfputc_r>:
 8009654:	6893      	ldr	r3, [r2, #8]
 8009656:	b510      	push	{r4, lr}
 8009658:	3b01      	subs	r3, #1
 800965a:	6093      	str	r3, [r2, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	da04      	bge.n	800966a <__sfputc_r+0x16>
 8009660:	6994      	ldr	r4, [r2, #24]
 8009662:	42a3      	cmp	r3, r4
 8009664:	db07      	blt.n	8009676 <__sfputc_r+0x22>
 8009666:	290a      	cmp	r1, #10
 8009668:	d005      	beq.n	8009676 <__sfputc_r+0x22>
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	1c58      	adds	r0, r3, #1
 800966e:	6010      	str	r0, [r2, #0]
 8009670:	7019      	strb	r1, [r3, #0]
 8009672:	0008      	movs	r0, r1
 8009674:	bd10      	pop	{r4, pc}
 8009676:	f000 f99b 	bl	80099b0 <__swbuf_r>
 800967a:	0001      	movs	r1, r0
 800967c:	e7f9      	b.n	8009672 <__sfputc_r+0x1e>

0800967e <__sfputs_r>:
 800967e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009680:	0006      	movs	r6, r0
 8009682:	000f      	movs	r7, r1
 8009684:	0014      	movs	r4, r2
 8009686:	18d5      	adds	r5, r2, r3
 8009688:	42ac      	cmp	r4, r5
 800968a:	d101      	bne.n	8009690 <__sfputs_r+0x12>
 800968c:	2000      	movs	r0, #0
 800968e:	e007      	b.n	80096a0 <__sfputs_r+0x22>
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	003a      	movs	r2, r7
 8009694:	0030      	movs	r0, r6
 8009696:	f7ff ffdd 	bl	8009654 <__sfputc_r>
 800969a:	3401      	adds	r4, #1
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d1f3      	bne.n	8009688 <__sfputs_r+0xa>
 80096a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096a4 <_vfiprintf_r>:
 80096a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a6:	b0a1      	sub	sp, #132	; 0x84
 80096a8:	9003      	str	r0, [sp, #12]
 80096aa:	000f      	movs	r7, r1
 80096ac:	0016      	movs	r6, r2
 80096ae:	001d      	movs	r5, r3
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d005      	beq.n	80096c0 <_vfiprintf_r+0x1c>
 80096b4:	6983      	ldr	r3, [r0, #24]
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <_vfiprintf_r+0x1c>
 80096bc:	f7fe fdb8 	bl	8008230 <__sinit>
 80096c0:	4b7b      	ldr	r3, [pc, #492]	; (80098b0 <_vfiprintf_r+0x20c>)
 80096c2:	429f      	cmp	r7, r3
 80096c4:	d15c      	bne.n	8009780 <_vfiprintf_r+0xdc>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	685f      	ldr	r7, [r3, #4]
 80096ca:	89bb      	ldrh	r3, [r7, #12]
 80096cc:	071b      	lsls	r3, r3, #28
 80096ce:	d563      	bpl.n	8009798 <_vfiprintf_r+0xf4>
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d060      	beq.n	8009798 <_vfiprintf_r+0xf4>
 80096d6:	2300      	movs	r3, #0
 80096d8:	ac08      	add	r4, sp, #32
 80096da:	6163      	str	r3, [r4, #20]
 80096dc:	3320      	adds	r3, #32
 80096de:	7663      	strb	r3, [r4, #25]
 80096e0:	3310      	adds	r3, #16
 80096e2:	76a3      	strb	r3, [r4, #26]
 80096e4:	9507      	str	r5, [sp, #28]
 80096e6:	0035      	movs	r5, r6
 80096e8:	782b      	ldrb	r3, [r5, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <_vfiprintf_r+0x4e>
 80096ee:	2b25      	cmp	r3, #37	; 0x25
 80096f0:	d15c      	bne.n	80097ac <_vfiprintf_r+0x108>
 80096f2:	1bab      	subs	r3, r5, r6
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	d00c      	beq.n	8009712 <_vfiprintf_r+0x6e>
 80096f8:	0032      	movs	r2, r6
 80096fa:	0039      	movs	r1, r7
 80096fc:	9803      	ldr	r0, [sp, #12]
 80096fe:	f7ff ffbe 	bl	800967e <__sfputs_r>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d100      	bne.n	8009708 <_vfiprintf_r+0x64>
 8009706:	e0c4      	b.n	8009892 <_vfiprintf_r+0x1ee>
 8009708:	6962      	ldr	r2, [r4, #20]
 800970a:	9b05      	ldr	r3, [sp, #20]
 800970c:	4694      	mov	ip, r2
 800970e:	4463      	add	r3, ip
 8009710:	6163      	str	r3, [r4, #20]
 8009712:	782b      	ldrb	r3, [r5, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d100      	bne.n	800971a <_vfiprintf_r+0x76>
 8009718:	e0bb      	b.n	8009892 <_vfiprintf_r+0x1ee>
 800971a:	2201      	movs	r2, #1
 800971c:	2300      	movs	r3, #0
 800971e:	4252      	negs	r2, r2
 8009720:	6062      	str	r2, [r4, #4]
 8009722:	a904      	add	r1, sp, #16
 8009724:	3254      	adds	r2, #84	; 0x54
 8009726:	1852      	adds	r2, r2, r1
 8009728:	1c6e      	adds	r6, r5, #1
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	60e3      	str	r3, [r4, #12]
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	7013      	strb	r3, [r2, #0]
 8009732:	65a3      	str	r3, [r4, #88]	; 0x58
 8009734:	7831      	ldrb	r1, [r6, #0]
 8009736:	2205      	movs	r2, #5
 8009738:	485e      	ldr	r0, [pc, #376]	; (80098b4 <_vfiprintf_r+0x210>)
 800973a:	f7ff f96b 	bl	8008a14 <memchr>
 800973e:	1c75      	adds	r5, r6, #1
 8009740:	2800      	cmp	r0, #0
 8009742:	d135      	bne.n	80097b0 <_vfiprintf_r+0x10c>
 8009744:	6822      	ldr	r2, [r4, #0]
 8009746:	06d3      	lsls	r3, r2, #27
 8009748:	d504      	bpl.n	8009754 <_vfiprintf_r+0xb0>
 800974a:	2353      	movs	r3, #83	; 0x53
 800974c:	a904      	add	r1, sp, #16
 800974e:	185b      	adds	r3, r3, r1
 8009750:	2120      	movs	r1, #32
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	0713      	lsls	r3, r2, #28
 8009756:	d504      	bpl.n	8009762 <_vfiprintf_r+0xbe>
 8009758:	2353      	movs	r3, #83	; 0x53
 800975a:	a904      	add	r1, sp, #16
 800975c:	185b      	adds	r3, r3, r1
 800975e:	212b      	movs	r1, #43	; 0x2b
 8009760:	7019      	strb	r1, [r3, #0]
 8009762:	7833      	ldrb	r3, [r6, #0]
 8009764:	2b2a      	cmp	r3, #42	; 0x2a
 8009766:	d02c      	beq.n	80097c2 <_vfiprintf_r+0x11e>
 8009768:	0035      	movs	r5, r6
 800976a:	2100      	movs	r1, #0
 800976c:	200a      	movs	r0, #10
 800976e:	68e3      	ldr	r3, [r4, #12]
 8009770:	782a      	ldrb	r2, [r5, #0]
 8009772:	1c6e      	adds	r6, r5, #1
 8009774:	3a30      	subs	r2, #48	; 0x30
 8009776:	2a09      	cmp	r2, #9
 8009778:	d964      	bls.n	8009844 <_vfiprintf_r+0x1a0>
 800977a:	2900      	cmp	r1, #0
 800977c:	d02e      	beq.n	80097dc <_vfiprintf_r+0x138>
 800977e:	e026      	b.n	80097ce <_vfiprintf_r+0x12a>
 8009780:	4b4d      	ldr	r3, [pc, #308]	; (80098b8 <_vfiprintf_r+0x214>)
 8009782:	429f      	cmp	r7, r3
 8009784:	d102      	bne.n	800978c <_vfiprintf_r+0xe8>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	689f      	ldr	r7, [r3, #8]
 800978a:	e79e      	b.n	80096ca <_vfiprintf_r+0x26>
 800978c:	4b4b      	ldr	r3, [pc, #300]	; (80098bc <_vfiprintf_r+0x218>)
 800978e:	429f      	cmp	r7, r3
 8009790:	d19b      	bne.n	80096ca <_vfiprintf_r+0x26>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	68df      	ldr	r7, [r3, #12]
 8009796:	e798      	b.n	80096ca <_vfiprintf_r+0x26>
 8009798:	0039      	movs	r1, r7
 800979a:	9803      	ldr	r0, [sp, #12]
 800979c:	f000 f97e 	bl	8009a9c <__swsetup_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d098      	beq.n	80096d6 <_vfiprintf_r+0x32>
 80097a4:	2001      	movs	r0, #1
 80097a6:	4240      	negs	r0, r0
 80097a8:	b021      	add	sp, #132	; 0x84
 80097aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ac:	3501      	adds	r5, #1
 80097ae:	e79b      	b.n	80096e8 <_vfiprintf_r+0x44>
 80097b0:	4b40      	ldr	r3, [pc, #256]	; (80098b4 <_vfiprintf_r+0x210>)
 80097b2:	6822      	ldr	r2, [r4, #0]
 80097b4:	1ac0      	subs	r0, r0, r3
 80097b6:	2301      	movs	r3, #1
 80097b8:	4083      	lsls	r3, r0
 80097ba:	4313      	orrs	r3, r2
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	002e      	movs	r6, r5
 80097c0:	e7b8      	b.n	8009734 <_vfiprintf_r+0x90>
 80097c2:	9b07      	ldr	r3, [sp, #28]
 80097c4:	1d19      	adds	r1, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9107      	str	r1, [sp, #28]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db01      	blt.n	80097d2 <_vfiprintf_r+0x12e>
 80097ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d0:	e004      	b.n	80097dc <_vfiprintf_r+0x138>
 80097d2:	425b      	negs	r3, r3
 80097d4:	60e3      	str	r3, [r4, #12]
 80097d6:	2302      	movs	r3, #2
 80097d8:	4313      	orrs	r3, r2
 80097da:	6023      	str	r3, [r4, #0]
 80097dc:	782b      	ldrb	r3, [r5, #0]
 80097de:	2b2e      	cmp	r3, #46	; 0x2e
 80097e0:	d10a      	bne.n	80097f8 <_vfiprintf_r+0x154>
 80097e2:	786b      	ldrb	r3, [r5, #1]
 80097e4:	2b2a      	cmp	r3, #42	; 0x2a
 80097e6:	d135      	bne.n	8009854 <_vfiprintf_r+0x1b0>
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	3502      	adds	r5, #2
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9207      	str	r2, [sp, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	db2b      	blt.n	800984e <_vfiprintf_r+0x1aa>
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	4e31      	ldr	r6, [pc, #196]	; (80098c0 <_vfiprintf_r+0x21c>)
 80097fa:	7829      	ldrb	r1, [r5, #0]
 80097fc:	2203      	movs	r2, #3
 80097fe:	0030      	movs	r0, r6
 8009800:	f7ff f908 	bl	8008a14 <memchr>
 8009804:	2800      	cmp	r0, #0
 8009806:	d006      	beq.n	8009816 <_vfiprintf_r+0x172>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	1b80      	subs	r0, r0, r6
 800980c:	4083      	lsls	r3, r0
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	3501      	adds	r5, #1
 8009812:	4313      	orrs	r3, r2
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	7829      	ldrb	r1, [r5, #0]
 8009818:	2206      	movs	r2, #6
 800981a:	482a      	ldr	r0, [pc, #168]	; (80098c4 <_vfiprintf_r+0x220>)
 800981c:	1c6e      	adds	r6, r5, #1
 800981e:	7621      	strb	r1, [r4, #24]
 8009820:	f7ff f8f8 	bl	8008a14 <memchr>
 8009824:	2800      	cmp	r0, #0
 8009826:	d03a      	beq.n	800989e <_vfiprintf_r+0x1fa>
 8009828:	4b27      	ldr	r3, [pc, #156]	; (80098c8 <_vfiprintf_r+0x224>)
 800982a:	2b00      	cmp	r3, #0
 800982c:	d125      	bne.n	800987a <_vfiprintf_r+0x1d6>
 800982e:	2207      	movs	r2, #7
 8009830:	9b07      	ldr	r3, [sp, #28]
 8009832:	3307      	adds	r3, #7
 8009834:	4393      	bics	r3, r2
 8009836:	3308      	adds	r3, #8
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	189b      	adds	r3, r3, r2
 8009840:	6163      	str	r3, [r4, #20]
 8009842:	e750      	b.n	80096e6 <_vfiprintf_r+0x42>
 8009844:	4343      	muls	r3, r0
 8009846:	2101      	movs	r1, #1
 8009848:	189b      	adds	r3, r3, r2
 800984a:	0035      	movs	r5, r6
 800984c:	e790      	b.n	8009770 <_vfiprintf_r+0xcc>
 800984e:	2301      	movs	r3, #1
 8009850:	425b      	negs	r3, r3
 8009852:	e7d0      	b.n	80097f6 <_vfiprintf_r+0x152>
 8009854:	2300      	movs	r3, #0
 8009856:	200a      	movs	r0, #10
 8009858:	001a      	movs	r2, r3
 800985a:	3501      	adds	r5, #1
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	7829      	ldrb	r1, [r5, #0]
 8009860:	1c6e      	adds	r6, r5, #1
 8009862:	3930      	subs	r1, #48	; 0x30
 8009864:	2909      	cmp	r1, #9
 8009866:	d903      	bls.n	8009870 <_vfiprintf_r+0x1cc>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0c5      	beq.n	80097f8 <_vfiprintf_r+0x154>
 800986c:	9209      	str	r2, [sp, #36]	; 0x24
 800986e:	e7c3      	b.n	80097f8 <_vfiprintf_r+0x154>
 8009870:	4342      	muls	r2, r0
 8009872:	2301      	movs	r3, #1
 8009874:	1852      	adds	r2, r2, r1
 8009876:	0035      	movs	r5, r6
 8009878:	e7f1      	b.n	800985e <_vfiprintf_r+0x1ba>
 800987a:	ab07      	add	r3, sp, #28
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	003a      	movs	r2, r7
 8009880:	4b12      	ldr	r3, [pc, #72]	; (80098cc <_vfiprintf_r+0x228>)
 8009882:	0021      	movs	r1, r4
 8009884:	9803      	ldr	r0, [sp, #12]
 8009886:	f7fc f94d 	bl	8005b24 <_printf_float>
 800988a:	9004      	str	r0, [sp, #16]
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	d1d3      	bne.n	800983a <_vfiprintf_r+0x196>
 8009892:	89bb      	ldrh	r3, [r7, #12]
 8009894:	065b      	lsls	r3, r3, #25
 8009896:	d500      	bpl.n	800989a <_vfiprintf_r+0x1f6>
 8009898:	e784      	b.n	80097a4 <_vfiprintf_r+0x100>
 800989a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800989c:	e784      	b.n	80097a8 <_vfiprintf_r+0x104>
 800989e:	ab07      	add	r3, sp, #28
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	003a      	movs	r2, r7
 80098a4:	4b09      	ldr	r3, [pc, #36]	; (80098cc <_vfiprintf_r+0x228>)
 80098a6:	0021      	movs	r1, r4
 80098a8:	9803      	ldr	r0, [sp, #12]
 80098aa:	f7fc fbf5 	bl	8006098 <_printf_i>
 80098ae:	e7ec      	b.n	800988a <_vfiprintf_r+0x1e6>
 80098b0:	0800a110 	.word	0x0800a110
 80098b4:	0800a25c 	.word	0x0800a25c
 80098b8:	0800a130 	.word	0x0800a130
 80098bc:	0800a0f0 	.word	0x0800a0f0
 80098c0:	0800a262 	.word	0x0800a262
 80098c4:	0800a266 	.word	0x0800a266
 80098c8:	08005b25 	.word	0x08005b25
 80098cc:	0800967f 	.word	0x0800967f

080098d0 <_sbrk_r>:
 80098d0:	2300      	movs	r3, #0
 80098d2:	b570      	push	{r4, r5, r6, lr}
 80098d4:	4c06      	ldr	r4, [pc, #24]	; (80098f0 <_sbrk_r+0x20>)
 80098d6:	0005      	movs	r5, r0
 80098d8:	0008      	movs	r0, r1
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	f7f9 f9ac 	bl	8002c38 <_sbrk>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d103      	bne.n	80098ec <_sbrk_r+0x1c>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d000      	beq.n	80098ec <_sbrk_r+0x1c>
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	bd70      	pop	{r4, r5, r6, pc}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	20000314 	.word	0x20000314

080098f4 <__sread>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	000c      	movs	r4, r1
 80098f8:	250e      	movs	r5, #14
 80098fa:	5f49      	ldrsh	r1, [r1, r5]
 80098fc:	f000 fac8 	bl	8009e90 <_read_r>
 8009900:	2800      	cmp	r0, #0
 8009902:	db03      	blt.n	800990c <__sread+0x18>
 8009904:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009906:	181b      	adds	r3, r3, r0
 8009908:	6563      	str	r3, [r4, #84]	; 0x54
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	4a02      	ldr	r2, [pc, #8]	; (8009918 <__sread+0x24>)
 8009910:	4013      	ands	r3, r2
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	e7f9      	b.n	800990a <__sread+0x16>
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	ffffefff 	.word	0xffffefff

0800991c <__swrite>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	001f      	movs	r7, r3
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	0005      	movs	r5, r0
 8009924:	000c      	movs	r4, r1
 8009926:	0016      	movs	r6, r2
 8009928:	05db      	lsls	r3, r3, #23
 800992a:	d505      	bpl.n	8009938 <__swrite+0x1c>
 800992c:	230e      	movs	r3, #14
 800992e:	5ec9      	ldrsh	r1, [r1, r3]
 8009930:	2200      	movs	r2, #0
 8009932:	2302      	movs	r3, #2
 8009934:	f000 f9f0 	bl	8009d18 <_lseek_r>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	4a05      	ldr	r2, [pc, #20]	; (8009950 <__swrite+0x34>)
 800993c:	0028      	movs	r0, r5
 800993e:	4013      	ands	r3, r2
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	0032      	movs	r2, r6
 8009944:	230e      	movs	r3, #14
 8009946:	5ee1      	ldrsh	r1, [r4, r3]
 8009948:	003b      	movs	r3, r7
 800994a:	f000 f893 	bl	8009a74 <_write_r>
 800994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009950:	ffffefff 	.word	0xffffefff

08009954 <__sseek>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	000c      	movs	r4, r1
 8009958:	250e      	movs	r5, #14
 800995a:	5f49      	ldrsh	r1, [r1, r5]
 800995c:	f000 f9dc 	bl	8009d18 <_lseek_r>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	1c42      	adds	r2, r0, #1
 8009964:	d103      	bne.n	800996e <__sseek+0x1a>
 8009966:	4a05      	ldr	r2, [pc, #20]	; (800997c <__sseek+0x28>)
 8009968:	4013      	ands	r3, r2
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	2280      	movs	r2, #128	; 0x80
 8009970:	0152      	lsls	r2, r2, #5
 8009972:	4313      	orrs	r3, r2
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	6560      	str	r0, [r4, #84]	; 0x54
 8009978:	e7f8      	b.n	800996c <__sseek+0x18>
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	ffffefff 	.word	0xffffefff

08009980 <__sclose>:
 8009980:	b510      	push	{r4, lr}
 8009982:	230e      	movs	r3, #14
 8009984:	5ec9      	ldrsh	r1, [r1, r3]
 8009986:	f000 f8ff 	bl	8009b88 <_close_r>
 800998a:	bd10      	pop	{r4, pc}

0800998c <strncmp>:
 800998c:	2300      	movs	r3, #0
 800998e:	b530      	push	{r4, r5, lr}
 8009990:	429a      	cmp	r2, r3
 8009992:	d00a      	beq.n	80099aa <strncmp+0x1e>
 8009994:	3a01      	subs	r2, #1
 8009996:	5cc4      	ldrb	r4, [r0, r3]
 8009998:	5ccd      	ldrb	r5, [r1, r3]
 800999a:	42ac      	cmp	r4, r5
 800999c:	d104      	bne.n	80099a8 <strncmp+0x1c>
 800999e:	4293      	cmp	r3, r2
 80099a0:	d002      	beq.n	80099a8 <strncmp+0x1c>
 80099a2:	3301      	adds	r3, #1
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	d1f6      	bne.n	8009996 <strncmp+0xa>
 80099a8:	1b63      	subs	r3, r4, r5
 80099aa:	0018      	movs	r0, r3
 80099ac:	bd30      	pop	{r4, r5, pc}
	...

080099b0 <__swbuf_r>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	0005      	movs	r5, r0
 80099b4:	000e      	movs	r6, r1
 80099b6:	0014      	movs	r4, r2
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d004      	beq.n	80099c6 <__swbuf_r+0x16>
 80099bc:	6983      	ldr	r3, [r0, #24]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <__swbuf_r+0x16>
 80099c2:	f7fe fc35 	bl	8008230 <__sinit>
 80099c6:	4b22      	ldr	r3, [pc, #136]	; (8009a50 <__swbuf_r+0xa0>)
 80099c8:	429c      	cmp	r4, r3
 80099ca:	d12d      	bne.n	8009a28 <__swbuf_r+0x78>
 80099cc:	686c      	ldr	r4, [r5, #4]
 80099ce:	69a3      	ldr	r3, [r4, #24]
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	071b      	lsls	r3, r3, #28
 80099d6:	d531      	bpl.n	8009a3c <__swbuf_r+0x8c>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d02e      	beq.n	8009a3c <__swbuf_r+0x8c>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	6922      	ldr	r2, [r4, #16]
 80099e2:	b2f7      	uxtb	r7, r6
 80099e4:	1a98      	subs	r0, r3, r2
 80099e6:	6963      	ldr	r3, [r4, #20]
 80099e8:	b2f6      	uxtb	r6, r6
 80099ea:	4283      	cmp	r3, r0
 80099ec:	dc05      	bgt.n	80099fa <__swbuf_r+0x4a>
 80099ee:	0021      	movs	r1, r4
 80099f0:	0028      	movs	r0, r5
 80099f2:	f000 f965 	bl	8009cc0 <_fflush_r>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d126      	bne.n	8009a48 <__swbuf_r+0x98>
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	3001      	adds	r0, #1
 80099fe:	3b01      	subs	r3, #1
 8009a00:	60a3      	str	r3, [r4, #8]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	6022      	str	r2, [r4, #0]
 8009a08:	701f      	strb	r7, [r3, #0]
 8009a0a:	6963      	ldr	r3, [r4, #20]
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	d004      	beq.n	8009a1a <__swbuf_r+0x6a>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d51a      	bpl.n	8009a4c <__swbuf_r+0x9c>
 8009a16:	2e0a      	cmp	r6, #10
 8009a18:	d118      	bne.n	8009a4c <__swbuf_r+0x9c>
 8009a1a:	0021      	movs	r1, r4
 8009a1c:	0028      	movs	r0, r5
 8009a1e:	f000 f94f 	bl	8009cc0 <_fflush_r>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d012      	beq.n	8009a4c <__swbuf_r+0x9c>
 8009a26:	e00f      	b.n	8009a48 <__swbuf_r+0x98>
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <__swbuf_r+0xa4>)
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d101      	bne.n	8009a32 <__swbuf_r+0x82>
 8009a2e:	68ac      	ldr	r4, [r5, #8]
 8009a30:	e7cd      	b.n	80099ce <__swbuf_r+0x1e>
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <__swbuf_r+0xa8>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	d1ca      	bne.n	80099ce <__swbuf_r+0x1e>
 8009a38:	68ec      	ldr	r4, [r5, #12]
 8009a3a:	e7c8      	b.n	80099ce <__swbuf_r+0x1e>
 8009a3c:	0021      	movs	r1, r4
 8009a3e:	0028      	movs	r0, r5
 8009a40:	f000 f82c 	bl	8009a9c <__swsetup_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d0ca      	beq.n	80099de <__swbuf_r+0x2e>
 8009a48:	2601      	movs	r6, #1
 8009a4a:	4276      	negs	r6, r6
 8009a4c:	0030      	movs	r0, r6
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	0800a110 	.word	0x0800a110
 8009a54:	0800a130 	.word	0x0800a130
 8009a58:	0800a0f0 	.word	0x0800a0f0

08009a5c <__ascii_wctomb>:
 8009a5c:	1e0b      	subs	r3, r1, #0
 8009a5e:	d004      	beq.n	8009a6a <__ascii_wctomb+0xe>
 8009a60:	2aff      	cmp	r2, #255	; 0xff
 8009a62:	d904      	bls.n	8009a6e <__ascii_wctomb+0x12>
 8009a64:	238a      	movs	r3, #138	; 0x8a
 8009a66:	6003      	str	r3, [r0, #0]
 8009a68:	3b8b      	subs	r3, #139	; 0x8b
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	4770      	bx	lr
 8009a6e:	700a      	strb	r2, [r1, #0]
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7fa      	b.n	8009a6a <__ascii_wctomb+0xe>

08009a74 <_write_r>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	0005      	movs	r5, r0
 8009a78:	0008      	movs	r0, r1
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4c06      	ldr	r4, [pc, #24]	; (8009a98 <_write_r+0x24>)
 8009a80:	6022      	str	r2, [r4, #0]
 8009a82:	001a      	movs	r2, r3
 8009a84:	f7f9 f890 	bl	8002ba8 <_write>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d103      	bne.n	8009a94 <_write_r+0x20>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d000      	beq.n	8009a94 <_write_r+0x20>
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	20000314 	.word	0x20000314

08009a9c <__swsetup_r>:
 8009a9c:	4b36      	ldr	r3, [pc, #216]	; (8009b78 <__swsetup_r+0xdc>)
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	0006      	movs	r6, r0
 8009aa4:	000c      	movs	r4, r1
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	d005      	beq.n	8009ab6 <__swsetup_r+0x1a>
 8009aaa:	69ab      	ldr	r3, [r5, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <__swsetup_r+0x1a>
 8009ab0:	0028      	movs	r0, r5
 8009ab2:	f7fe fbbd 	bl	8008230 <__sinit>
 8009ab6:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <__swsetup_r+0xe0>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	d10f      	bne.n	8009adc <__swsetup_r+0x40>
 8009abc:	686c      	ldr	r4, [r5, #4]
 8009abe:	230c      	movs	r3, #12
 8009ac0:	5ee2      	ldrsh	r2, [r4, r3]
 8009ac2:	b293      	uxth	r3, r2
 8009ac4:	0719      	lsls	r1, r3, #28
 8009ac6:	d42d      	bmi.n	8009b24 <__swsetup_r+0x88>
 8009ac8:	06d9      	lsls	r1, r3, #27
 8009aca:	d411      	bmi.n	8009af0 <__swsetup_r+0x54>
 8009acc:	2309      	movs	r3, #9
 8009ace:	2001      	movs	r0, #1
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	3337      	adds	r3, #55	; 0x37
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	4240      	negs	r0, r0
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	4b28      	ldr	r3, [pc, #160]	; (8009b80 <__swsetup_r+0xe4>)
 8009ade:	429c      	cmp	r4, r3
 8009ae0:	d101      	bne.n	8009ae6 <__swsetup_r+0x4a>
 8009ae2:	68ac      	ldr	r4, [r5, #8]
 8009ae4:	e7eb      	b.n	8009abe <__swsetup_r+0x22>
 8009ae6:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <__swsetup_r+0xe8>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d1e8      	bne.n	8009abe <__swsetup_r+0x22>
 8009aec:	68ec      	ldr	r4, [r5, #12]
 8009aee:	e7e6      	b.n	8009abe <__swsetup_r+0x22>
 8009af0:	075b      	lsls	r3, r3, #29
 8009af2:	d513      	bpl.n	8009b1c <__swsetup_r+0x80>
 8009af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af6:	2900      	cmp	r1, #0
 8009af8:	d008      	beq.n	8009b0c <__swsetup_r+0x70>
 8009afa:	0023      	movs	r3, r4
 8009afc:	3344      	adds	r3, #68	; 0x44
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d002      	beq.n	8009b08 <__swsetup_r+0x6c>
 8009b02:	0030      	movs	r0, r6
 8009b04:	f7ff fb9e 	bl	8009244 <_free_r>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b0c:	2224      	movs	r2, #36	; 0x24
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	4393      	bics	r3, r2
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	2300      	movs	r3, #0
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	89a2      	ldrh	r2, [r4, #12]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <__swsetup_r+0xa6>
 8009b2a:	21a0      	movs	r1, #160	; 0xa0
 8009b2c:	2280      	movs	r2, #128	; 0x80
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	0089      	lsls	r1, r1, #2
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	400b      	ands	r3, r1
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d003      	beq.n	8009b42 <__swsetup_r+0xa6>
 8009b3a:	0021      	movs	r1, r4
 8009b3c:	0030      	movs	r0, r6
 8009b3e:	f000 f927 	bl	8009d90 <__smakebuf_r>
 8009b42:	2301      	movs	r3, #1
 8009b44:	89a2      	ldrh	r2, [r4, #12]
 8009b46:	4013      	ands	r3, r2
 8009b48:	d011      	beq.n	8009b6e <__swsetup_r+0xd2>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	6963      	ldr	r3, [r4, #20]
 8009b50:	425b      	negs	r3, r3
 8009b52:	61a3      	str	r3, [r4, #24]
 8009b54:	2000      	movs	r0, #0
 8009b56:	6923      	ldr	r3, [r4, #16]
 8009b58:	4283      	cmp	r3, r0
 8009b5a:	d1be      	bne.n	8009ada <__swsetup_r+0x3e>
 8009b5c:	230c      	movs	r3, #12
 8009b5e:	5ee2      	ldrsh	r2, [r4, r3]
 8009b60:	0613      	lsls	r3, r2, #24
 8009b62:	d5ba      	bpl.n	8009ada <__swsetup_r+0x3e>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	4313      	orrs	r3, r2
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	3801      	subs	r0, #1
 8009b6c:	e7b5      	b.n	8009ada <__swsetup_r+0x3e>
 8009b6e:	0792      	lsls	r2, r2, #30
 8009b70:	d400      	bmi.n	8009b74 <__swsetup_r+0xd8>
 8009b72:	6963      	ldr	r3, [r4, #20]
 8009b74:	60a3      	str	r3, [r4, #8]
 8009b76:	e7ed      	b.n	8009b54 <__swsetup_r+0xb8>
 8009b78:	20000010 	.word	0x20000010
 8009b7c:	0800a110 	.word	0x0800a110
 8009b80:	0800a130 	.word	0x0800a130
 8009b84:	0800a0f0 	.word	0x0800a0f0

08009b88 <_close_r>:
 8009b88:	2300      	movs	r3, #0
 8009b8a:	b570      	push	{r4, r5, r6, lr}
 8009b8c:	4c06      	ldr	r4, [pc, #24]	; (8009ba8 <_close_r+0x20>)
 8009b8e:	0005      	movs	r5, r0
 8009b90:	0008      	movs	r0, r1
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	f7f9 f824 	bl	8002be0 <_close>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d103      	bne.n	8009ba4 <_close_r+0x1c>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d000      	beq.n	8009ba4 <_close_r+0x1c>
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	20000314 	.word	0x20000314

08009bac <__sflush_r>:
 8009bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bae:	898a      	ldrh	r2, [r1, #12]
 8009bb0:	0005      	movs	r5, r0
 8009bb2:	000c      	movs	r4, r1
 8009bb4:	0713      	lsls	r3, r2, #28
 8009bb6:	d460      	bmi.n	8009c7a <__sflush_r+0xce>
 8009bb8:	684b      	ldr	r3, [r1, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc04      	bgt.n	8009bc8 <__sflush_r+0x1c>
 8009bbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc01      	bgt.n	8009bc8 <__sflush_r+0x1c>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d0fa      	beq.n	8009bc4 <__sflush_r+0x18>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	682e      	ldr	r6, [r5, #0]
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	2380      	movs	r3, #128	; 0x80
 8009bd6:	015b      	lsls	r3, r3, #5
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	401a      	ands	r2, r3
 8009bdc:	d034      	beq.n	8009c48 <__sflush_r+0x9c>
 8009bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	075b      	lsls	r3, r3, #29
 8009be4:	d506      	bpl.n	8009bf4 <__sflush_r+0x48>
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	1ac0      	subs	r0, r0, r3
 8009bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <__sflush_r+0x48>
 8009bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bf2:	1ac0      	subs	r0, r0, r3
 8009bf4:	0002      	movs	r2, r0
 8009bf6:	6a21      	ldr	r1, [r4, #32]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	0028      	movs	r0, r5
 8009bfc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009bfe:	47b8      	blx	r7
 8009c00:	89a1      	ldrh	r1, [r4, #12]
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d106      	bne.n	8009c14 <__sflush_r+0x68>
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	2b1d      	cmp	r3, #29
 8009c0a:	d830      	bhi.n	8009c6e <__sflush_r+0xc2>
 8009c0c:	4a2b      	ldr	r2, [pc, #172]	; (8009cbc <__sflush_r+0x110>)
 8009c0e:	40da      	lsrs	r2, r3
 8009c10:	07d3      	lsls	r3, r2, #31
 8009c12:	d52c      	bpl.n	8009c6e <__sflush_r+0xc2>
 8009c14:	2300      	movs	r3, #0
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	04cb      	lsls	r3, r1, #19
 8009c1e:	d505      	bpl.n	8009c2c <__sflush_r+0x80>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <__sflush_r+0x7e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d100      	bne.n	8009c2c <__sflush_r+0x80>
 8009c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c2e:	602e      	str	r6, [r5, #0]
 8009c30:	2900      	cmp	r1, #0
 8009c32:	d0c7      	beq.n	8009bc4 <__sflush_r+0x18>
 8009c34:	0023      	movs	r3, r4
 8009c36:	3344      	adds	r3, #68	; 0x44
 8009c38:	4299      	cmp	r1, r3
 8009c3a:	d002      	beq.n	8009c42 <__sflush_r+0x96>
 8009c3c:	0028      	movs	r0, r5
 8009c3e:	f7ff fb01 	bl	8009244 <_free_r>
 8009c42:	2000      	movs	r0, #0
 8009c44:	6360      	str	r0, [r4, #52]	; 0x34
 8009c46:	e7be      	b.n	8009bc6 <__sflush_r+0x1a>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	0028      	movs	r0, r5
 8009c4c:	47b8      	blx	r7
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	d1c6      	bne.n	8009be0 <__sflush_r+0x34>
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0c3      	beq.n	8009be0 <__sflush_r+0x34>
 8009c58:	2b1d      	cmp	r3, #29
 8009c5a:	d001      	beq.n	8009c60 <__sflush_r+0xb4>
 8009c5c:	2b16      	cmp	r3, #22
 8009c5e:	d101      	bne.n	8009c64 <__sflush_r+0xb8>
 8009c60:	602e      	str	r6, [r5, #0]
 8009c62:	e7af      	b.n	8009bc4 <__sflush_r+0x18>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	89a2      	ldrh	r2, [r4, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	e7ab      	b.n	8009bc6 <__sflush_r+0x1a>
 8009c6e:	2340      	movs	r3, #64	; 0x40
 8009c70:	430b      	orrs	r3, r1
 8009c72:	2001      	movs	r0, #1
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	4240      	negs	r0, r0
 8009c78:	e7a5      	b.n	8009bc6 <__sflush_r+0x1a>
 8009c7a:	690f      	ldr	r7, [r1, #16]
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	d0a1      	beq.n	8009bc4 <__sflush_r+0x18>
 8009c80:	680b      	ldr	r3, [r1, #0]
 8009c82:	600f      	str	r7, [r1, #0]
 8009c84:	1bdb      	subs	r3, r3, r7
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	0792      	lsls	r2, r2, #30
 8009c8c:	d100      	bne.n	8009c90 <__sflush_r+0xe4>
 8009c8e:	694b      	ldr	r3, [r1, #20]
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc00      	bgt.n	8009c9a <__sflush_r+0xee>
 8009c98:	e794      	b.n	8009bc4 <__sflush_r+0x18>
 8009c9a:	9b01      	ldr	r3, [sp, #4]
 8009c9c:	003a      	movs	r2, r7
 8009c9e:	6a21      	ldr	r1, [r4, #32]
 8009ca0:	0028      	movs	r0, r5
 8009ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ca4:	47b0      	blx	r6
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	dc03      	bgt.n	8009cb2 <__sflush_r+0x106>
 8009caa:	2340      	movs	r3, #64	; 0x40
 8009cac:	89a2      	ldrh	r2, [r4, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	e7df      	b.n	8009c72 <__sflush_r+0xc6>
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	183f      	adds	r7, r7, r0
 8009cb6:	1a1b      	subs	r3, r3, r0
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	e7ea      	b.n	8009c92 <__sflush_r+0xe6>
 8009cbc:	20400001 	.word	0x20400001

08009cc0 <_fflush_r>:
 8009cc0:	690b      	ldr	r3, [r1, #16]
 8009cc2:	b570      	push	{r4, r5, r6, lr}
 8009cc4:	0005      	movs	r5, r0
 8009cc6:	000c      	movs	r4, r1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <_fflush_r+0x10>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d004      	beq.n	8009cde <_fflush_r+0x1e>
 8009cd4:	6983      	ldr	r3, [r0, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <_fflush_r+0x1e>
 8009cda:	f7fe faa9 	bl	8008230 <__sinit>
 8009cde:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <_fflush_r+0x4c>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d109      	bne.n	8009cf8 <_fflush_r+0x38>
 8009ce4:	686c      	ldr	r4, [r5, #4]
 8009ce6:	220c      	movs	r2, #12
 8009ce8:	5ea3      	ldrsh	r3, [r4, r2]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0ee      	beq.n	8009ccc <_fflush_r+0xc>
 8009cee:	0021      	movs	r1, r4
 8009cf0:	0028      	movs	r0, r5
 8009cf2:	f7ff ff5b 	bl	8009bac <__sflush_r>
 8009cf6:	e7ea      	b.n	8009cce <_fflush_r+0xe>
 8009cf8:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <_fflush_r+0x50>)
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d101      	bne.n	8009d02 <_fflush_r+0x42>
 8009cfe:	68ac      	ldr	r4, [r5, #8]
 8009d00:	e7f1      	b.n	8009ce6 <_fflush_r+0x26>
 8009d02:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <_fflush_r+0x54>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	d1ee      	bne.n	8009ce6 <_fflush_r+0x26>
 8009d08:	68ec      	ldr	r4, [r5, #12]
 8009d0a:	e7ec      	b.n	8009ce6 <_fflush_r+0x26>
 8009d0c:	0800a110 	.word	0x0800a110
 8009d10:	0800a130 	.word	0x0800a130
 8009d14:	0800a0f0 	.word	0x0800a0f0

08009d18 <_lseek_r>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	0005      	movs	r5, r0
 8009d1c:	0008      	movs	r0, r1
 8009d1e:	0011      	movs	r1, r2
 8009d20:	2200      	movs	r2, #0
 8009d22:	4c06      	ldr	r4, [pc, #24]	; (8009d3c <_lseek_r+0x24>)
 8009d24:	6022      	str	r2, [r4, #0]
 8009d26:	001a      	movs	r2, r3
 8009d28:	f7f8 ff7b 	bl	8002c22 <_lseek>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d103      	bne.n	8009d38 <_lseek_r+0x20>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d000      	beq.n	8009d38 <_lseek_r+0x20>
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	20000314 	.word	0x20000314

08009d40 <__swhatbuf_r>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	000e      	movs	r6, r1
 8009d44:	001d      	movs	r5, r3
 8009d46:	230e      	movs	r3, #14
 8009d48:	5ec9      	ldrsh	r1, [r1, r3]
 8009d4a:	b096      	sub	sp, #88	; 0x58
 8009d4c:	0014      	movs	r4, r2
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	da07      	bge.n	8009d62 <__swhatbuf_r+0x22>
 8009d52:	2300      	movs	r3, #0
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	89b3      	ldrh	r3, [r6, #12]
 8009d58:	061b      	lsls	r3, r3, #24
 8009d5a:	d411      	bmi.n	8009d80 <__swhatbuf_r+0x40>
 8009d5c:	2380      	movs	r3, #128	; 0x80
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	e00f      	b.n	8009d82 <__swhatbuf_r+0x42>
 8009d62:	466a      	mov	r2, sp
 8009d64:	f000 f8a8 	bl	8009eb8 <_fstat_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dbf2      	blt.n	8009d52 <__swhatbuf_r+0x12>
 8009d6c:	22f0      	movs	r2, #240	; 0xf0
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	0212      	lsls	r2, r2, #8
 8009d72:	4013      	ands	r3, r2
 8009d74:	4a05      	ldr	r2, [pc, #20]	; (8009d8c <__swhatbuf_r+0x4c>)
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	425a      	negs	r2, r3
 8009d7a:	4153      	adcs	r3, r2
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	e7ed      	b.n	8009d5c <__swhatbuf_r+0x1c>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	2000      	movs	r0, #0
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	b016      	add	sp, #88	; 0x58
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	ffffe000 	.word	0xffffe000

08009d90 <__smakebuf_r>:
 8009d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d92:	2602      	movs	r6, #2
 8009d94:	898b      	ldrh	r3, [r1, #12]
 8009d96:	0005      	movs	r5, r0
 8009d98:	000c      	movs	r4, r1
 8009d9a:	4233      	tst	r3, r6
 8009d9c:	d006      	beq.n	8009dac <__smakebuf_r+0x1c>
 8009d9e:	0023      	movs	r3, r4
 8009da0:	3347      	adds	r3, #71	; 0x47
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	2301      	movs	r3, #1
 8009da8:	6163      	str	r3, [r4, #20]
 8009daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009dac:	ab01      	add	r3, sp, #4
 8009dae:	466a      	mov	r2, sp
 8009db0:	f7ff ffc6 	bl	8009d40 <__swhatbuf_r>
 8009db4:	9900      	ldr	r1, [sp, #0]
 8009db6:	0007      	movs	r7, r0
 8009db8:	0028      	movs	r0, r5
 8009dba:	f7ff fa8d 	bl	80092d8 <_malloc_r>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d108      	bne.n	8009dd4 <__smakebuf_r+0x44>
 8009dc2:	220c      	movs	r2, #12
 8009dc4:	5ea3      	ldrsh	r3, [r4, r2]
 8009dc6:	059a      	lsls	r2, r3, #22
 8009dc8:	d4ef      	bmi.n	8009daa <__smakebuf_r+0x1a>
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4393      	bics	r3, r2
 8009dce:	431e      	orrs	r6, r3
 8009dd0:	81a6      	strh	r6, [r4, #12]
 8009dd2:	e7e4      	b.n	8009d9e <__smakebuf_r+0xe>
 8009dd4:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <__smakebuf_r+0x84>)
 8009dd6:	62ab      	str	r3, [r5, #40]	; 0x28
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	89a2      	ldrh	r2, [r4, #12]
 8009ddc:	6020      	str	r0, [r4, #0]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	9b00      	ldr	r3, [sp, #0]
 8009de4:	6120      	str	r0, [r4, #16]
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	9b01      	ldr	r3, [sp, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <__smakebuf_r+0x7a>
 8009dee:	230e      	movs	r3, #14
 8009df0:	5ee1      	ldrsh	r1, [r4, r3]
 8009df2:	0028      	movs	r0, r5
 8009df4:	f000 f872 	bl	8009edc <_isatty_r>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d006      	beq.n	8009e0a <__smakebuf_r+0x7a>
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	4393      	bics	r3, r2
 8009e02:	001a      	movs	r2, r3
 8009e04:	2301      	movs	r3, #1
 8009e06:	4313      	orrs	r3, r2
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	89a0      	ldrh	r0, [r4, #12]
 8009e0c:	4338      	orrs	r0, r7
 8009e0e:	81a0      	strh	r0, [r4, #12]
 8009e10:	e7cb      	b.n	8009daa <__smakebuf_r+0x1a>
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	080081f5 	.word	0x080081f5

08009e18 <memmove>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4288      	cmp	r0, r1
 8009e1c:	d902      	bls.n	8009e24 <memmove+0xc>
 8009e1e:	188b      	adds	r3, r1, r2
 8009e20:	4298      	cmp	r0, r3
 8009e22:	d303      	bcc.n	8009e2c <memmove+0x14>
 8009e24:	2300      	movs	r3, #0
 8009e26:	e007      	b.n	8009e38 <memmove+0x20>
 8009e28:	5c8b      	ldrb	r3, [r1, r2]
 8009e2a:	5483      	strb	r3, [r0, r2]
 8009e2c:	3a01      	subs	r2, #1
 8009e2e:	d2fb      	bcs.n	8009e28 <memmove+0x10>
 8009e30:	bd10      	pop	{r4, pc}
 8009e32:	5ccc      	ldrb	r4, [r1, r3]
 8009e34:	54c4      	strb	r4, [r0, r3]
 8009e36:	3301      	adds	r3, #1
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d1fa      	bne.n	8009e32 <memmove+0x1a>
 8009e3c:	e7f8      	b.n	8009e30 <memmove+0x18>

08009e3e <__malloc_lock>:
 8009e3e:	4770      	bx	lr

08009e40 <__malloc_unlock>:
 8009e40:	4770      	bx	lr

08009e42 <_realloc_r>:
 8009e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e44:	0007      	movs	r7, r0
 8009e46:	000d      	movs	r5, r1
 8009e48:	0016      	movs	r6, r2
 8009e4a:	2900      	cmp	r1, #0
 8009e4c:	d105      	bne.n	8009e5a <_realloc_r+0x18>
 8009e4e:	0011      	movs	r1, r2
 8009e50:	f7ff fa42 	bl	80092d8 <_malloc_r>
 8009e54:	0004      	movs	r4, r0
 8009e56:	0020      	movs	r0, r4
 8009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	d103      	bne.n	8009e66 <_realloc_r+0x24>
 8009e5e:	f7ff f9f1 	bl	8009244 <_free_r>
 8009e62:	0034      	movs	r4, r6
 8009e64:	e7f7      	b.n	8009e56 <_realloc_r+0x14>
 8009e66:	f000 f84b 	bl	8009f00 <_malloc_usable_size_r>
 8009e6a:	002c      	movs	r4, r5
 8009e6c:	42b0      	cmp	r0, r6
 8009e6e:	d2f2      	bcs.n	8009e56 <_realloc_r+0x14>
 8009e70:	0031      	movs	r1, r6
 8009e72:	0038      	movs	r0, r7
 8009e74:	f7ff fa30 	bl	80092d8 <_malloc_r>
 8009e78:	1e04      	subs	r4, r0, #0
 8009e7a:	d0ec      	beq.n	8009e56 <_realloc_r+0x14>
 8009e7c:	0029      	movs	r1, r5
 8009e7e:	0032      	movs	r2, r6
 8009e80:	f7fe fdd3 	bl	8008a2a <memcpy>
 8009e84:	0029      	movs	r1, r5
 8009e86:	0038      	movs	r0, r7
 8009e88:	f7ff f9dc 	bl	8009244 <_free_r>
 8009e8c:	e7e3      	b.n	8009e56 <_realloc_r+0x14>
	...

08009e90 <_read_r>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	0005      	movs	r5, r0
 8009e94:	0008      	movs	r0, r1
 8009e96:	0011      	movs	r1, r2
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4c06      	ldr	r4, [pc, #24]	; (8009eb4 <_read_r+0x24>)
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	001a      	movs	r2, r3
 8009ea0:	f7f8 fe65 	bl	8002b6e <_read>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d103      	bne.n	8009eb0 <_read_r+0x20>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d000      	beq.n	8009eb0 <_read_r+0x20>
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	20000314 	.word	0x20000314

08009eb8 <_fstat_r>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b570      	push	{r4, r5, r6, lr}
 8009ebc:	4c06      	ldr	r4, [pc, #24]	; (8009ed8 <_fstat_r+0x20>)
 8009ebe:	0005      	movs	r5, r0
 8009ec0:	0008      	movs	r0, r1
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	f7f8 fe95 	bl	8002bf4 <_fstat>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	d103      	bne.n	8009ed6 <_fstat_r+0x1e>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d000      	beq.n	8009ed6 <_fstat_r+0x1e>
 8009ed4:	602b      	str	r3, [r5, #0]
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	20000314 	.word	0x20000314

08009edc <_isatty_r>:
 8009edc:	2300      	movs	r3, #0
 8009ede:	b570      	push	{r4, r5, r6, lr}
 8009ee0:	4c06      	ldr	r4, [pc, #24]	; (8009efc <_isatty_r+0x20>)
 8009ee2:	0005      	movs	r5, r0
 8009ee4:	0008      	movs	r0, r1
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	f7f8 fe92 	bl	8002c10 <_isatty>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d103      	bne.n	8009ef8 <_isatty_r+0x1c>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d000      	beq.n	8009ef8 <_isatty_r+0x1c>
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	bd70      	pop	{r4, r5, r6, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	20000314 	.word	0x20000314

08009f00 <_malloc_usable_size_r>:
 8009f00:	1f0b      	subs	r3, r1, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	1f18      	subs	r0, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da01      	bge.n	8009f0e <_malloc_usable_size_r+0xe>
 8009f0a:	580b      	ldr	r3, [r1, r0]
 8009f0c:	18c0      	adds	r0, r0, r3
 8009f0e:	4770      	bx	lr

08009f10 <_init>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f16:	bc08      	pop	{r3}
 8009f18:	469e      	mov	lr, r3
 8009f1a:	4770      	bx	lr

08009f1c <_fini>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr
